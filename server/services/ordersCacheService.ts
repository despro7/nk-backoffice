import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export interface OrderCacheItem {
  sku: string;
  name: string;
  orderedQuantity: number;
  stockBalances: { [warehouse: string]: number };
}

export interface OrderCacheData {
  id: number;
  externalId: string;
  processedItems: string | null; // JSON string —Å –º–∞—Å—Å–∏–≤–æ–º OrderCacheItem[]
  totalQuantity: number;
  cacheUpdatedAt: Date;
  cacheVersion: number;
  createdAt: Date;
  updatedAt: Date;
}

export interface CreateOrderCacheData {
  externalId: string;
  processedItems: string | null;
  totalQuantity: number;
  cacheVersion?: number;
}

export interface UpdateOrderCacheData {
  processedItems?: string | null;
  totalQuantity?: number;
  cacheVersion?: number;
}

export class OrdersCacheService {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –¥–ª—è –∑–∞–∫–∞–∑–∞
   */
  async upsertOrderCache(data: CreateOrderCacheData): Promise<OrderCacheData> {
    try {
      const cacheData = await prisma.ordersCache.upsert({
        where: {
          externalId: data.externalId
        },
        update: {
          processedItems: data.processedItems,
          totalQuantity: data.totalQuantity,
          cacheUpdatedAt: new Date(),
          cacheVersion: data.cacheVersion || 1
        },
        create: {
          externalId: data.externalId,
          processedItems: data.processedItems,
          totalQuantity: data.totalQuantity,
          cacheVersion: data.cacheVersion || 1
        }
      });

      console.log(`‚úÖ [ORDERS CACHE] ${data.processedItems ? 'Updated' : 'Created'} cache for order ${data.externalId}`);
      return cacheData;
    } catch (error) {
      console.error('‚ùå [ORDERS CACHE] Failed to upsert order cache:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–µ—à –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ externalId
   */
  async getOrderCache(externalId: string): Promise<OrderCacheData | null> {
    try {
      const cache = await prisma.ordersCache.findUnique({
        where: {
          externalId: externalId
        }
      });

      if (cache) {
        console.log(`üìã [ORDERS CACHE] Retrieved cache for order ${externalId}`);
      } else {
        console.log(`üìã [ORDERS CACHE] Cache not found for order ${externalId}`);
      }

      return cache;
    } catch (error) {
      console.error('‚ùå [ORDERS CACHE] Failed to get order cache:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞
   */
  async getOrderCacheItems(externalId: string): Promise<OrderCacheItem[]> {
    try {
      const cache = await this.getOrderCache(externalId);

      if (!cache || !cache.processedItems) {
        return [];
      }

      const items: OrderCacheItem[] = JSON.parse(cache.processedItems);
      return Array.isArray(items) ? items : [];
    } catch (error) {
      console.error('‚ùå [ORDERS CACHE] Failed to parse cache items:', error);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–µ—à –¥–ª—è –∑–∞–∫–∞–∑–∞
   */
  async hasOrderCache(externalId: string): Promise<boolean> {
    try {
      const cache = await prisma.ordersCache.findUnique({
        where: {
          externalId: externalId
        },
        select: {
          id: true
        }
      });

      return cache !== null;
    } catch (error) {
      console.error('‚ùå [ORDERS CACHE] Failed to check cache existence:', error);
      return false;
    }
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–µ—à –¥–ª—è –∑–∞–∫–∞–∑–∞ (—É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å)
   */
  async invalidateOrderCache(externalId: string): Promise<boolean> {
    try {
      const result = await prisma.ordersCache.deleteMany({
        where: {
          externalId: externalId
        }
      });

      const deleted = result.count > 0;
      if (deleted) {
        console.log(`üóëÔ∏è [ORDERS CACHE] Invalidated cache for order ${externalId}`);
      } else {
        console.log(`üóëÔ∏è [ORDERS CACHE] Cache not found for order ${externalId}`);
      }

      return deleted;
    } catch (error) {
      console.error('‚ùå [ORDERS CACHE] Failed to invalidate cache:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∫–µ—à –¥–ª—è –∑–∞–∫–∞–∑–∞
   */
  async deleteOrderCache(externalId: string): Promise<boolean> {
    try {
      const result = await prisma.ordersCache.deleteMany({
        where: {
          externalId: externalId
        }
      });

      const deleted = result.count > 0;
      if (deleted) {
        console.log(`üóëÔ∏è [ORDERS CACHE] Deleted cache for order ${externalId}`);
      } else {
        console.log(`üóëÔ∏è [ORDERS CACHE] Cache not found for order ${externalId}`);
      }

      return deleted;
    } catch (error) {
      console.error('‚ùå [ORDERS CACHE] Failed to delete cache:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–µ—à—É
   */
  async getCacheStatistics(): Promise<{
    totalEntries: number;
    averageAge: number;
    totalProcessedItemsSize: number;
  }> {
    try {
      const now = new Date();
      const totalEntries = await prisma.ordersCache.count();

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –∫–µ—à–∞ (–ø—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç)
      const cacheEntries = await prisma.ordersCache.findMany({
        select: {
          cacheUpdatedAt: true
        },
        take: 1000 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      });

      let totalAge = 0;
      cacheEntries.forEach(entry => {
        if (entry.cacheUpdatedAt) {
          totalAge += now.getTime() - entry.cacheUpdatedAt.getTime();
        }
      });

      const averageAge = cacheEntries.length > 0 ? totalAge / cacheEntries.length : 0;

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ processedItems
      const allCache = await prisma.ordersCache.findMany({
        select: {
          processedItems: true
        }
      });

      let totalProcessedItemsSize = 0;
      allCache.forEach(cache => {
        if (cache.processedItems) {
          totalProcessedItemsSize += cache.processedItems.length;
        }
      });

      return {
        totalEntries,
        averageAge: Math.round(averageAge / (1000 * 60 * 60)), // –≤ —á–∞—Å–∞—Ö
        totalProcessedItemsSize
      };
    } catch (error) {
      console.error('‚ùå [ORDERS CACHE] Failed to get cache statistics:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ externalId –∑–∞–∫–∞–∑–æ–≤ —Å –∫–µ—à–µ–º
   */
  async getCachedOrderIds(): Promise<string[]> {
    try {
      const cachedOrders = await prisma.ordersCache.findMany({
        select: {
          externalId: true
        }
      });

      const externalIds = cachedOrders.map(order => order.externalId);
      console.log(`üìã [ORDERS CACHE] Found ${externalIds.length} orders with cache`);

      return externalIds;
    } catch (error) {
      console.error('‚ùå [ORDERS CACHE] Failed to get cached order IDs:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–µ—à–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
   */
  async getMultipleOrderCaches(externalIds: string[]): Promise<Map<string, OrderCacheData | null>> {
    try {
      if (externalIds.length === 0) {
        return new Map();
      }

      const caches = await prisma.ordersCache.findMany({
        where: {
          externalId: {
            in: externalIds
          }
        }
      });

      const cacheMap = new Map<string, OrderCacheData | null>();

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∫–µ—à–∞–º–∏
      caches.forEach(cache => {
        cacheMap.set(cache.externalId, cache);
      });

      // –î–ª—è –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ –∫–µ—à–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º null
      externalIds.forEach(externalId => {
        if (!cacheMap.has(externalId)) {
          cacheMap.set(externalId, null);
        }
      });

      console.log(`üìã [ORDERS CACHE] Retrieved ${caches.length}/${externalIds.length} caches in bulk`);

      return cacheMap;
    } catch (error) {
      console.error('‚ùå [ORDERS CACHE] Failed to get multiple order caches:', error);
      throw error;
    }
  }
}

export const ordersCacheService = new OrdersCacheService();
