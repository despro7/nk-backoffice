// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

import { PrismaClient } from '@prisma/client';
import { DilovodProduct, DilovodSyncResult } from './DilovodTypes.js';
import { logWithTimestamp } from './DilovodUtils.js';
import { syncSettingsService } from '../syncSettingsService.js';

export class DilovodSyncManager {
  private prisma: PrismaClient;

  constructor() {
    this.prisma = new PrismaClient();
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  async syncProductsToDatabase(dilovodProducts: DilovodProduct[]): Promise<DilovodSyncResult> {
    try {
      logWithTimestamp('–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
      logWithTimestamp(`–ü–æ–ª—É—á–µ–Ω–æ ${dilovodProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏`);
      
      const errors: string[] = [];
      let syncedProducts = 0;
      let syncedSets = 0;

      for (const product of dilovodProducts) {
        try {
          logWithTimestamp(`\n--- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ ${product.sku} ---`);
          logWithTimestamp(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name}`);
          logWithTimestamp(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category.name} (ID: ${product.category.id})`);
          logWithTimestamp(`–¶–µ–Ω–∞: ${product.costPerItem} ${product.currency}`);
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å
          const weight = this.determineWeightByCategory(product.category.id);
          if (weight) {
            logWithTimestamp(`‚öñÔ∏è –í–µ—Å: ${weight} –≥—Ä (–∫–∞—Ç–µ–≥–æ—Ä–∏—è ID: ${product.category.id})`);
          } else {
            logWithTimestamp(`‚öñÔ∏è –í–µ—Å: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–∫–∞—Ç–µ–≥–æ—Ä–∏—è ID: ${product.category.id})`);
          }
          
          logWithTimestamp(`–ö–æ–º–ø–ª–µ–∫—Ç: ${product.set.length > 0 ? '–î–ê' : '–ù–ï–¢'}`);
          
          if (product.set.length > 0) {
            logWithTimestamp(`–°–æ—Å—Ç–∞–≤ –∫–æ–º–ø–ª–µ–∫—Ç–∞:`);
            product.set.forEach((item, index) => {
              logWithTimestamp(`  ${index + 1}. ${item.id} - ${item.quantity}`);
            });
          }
          
          logWithTimestamp(`–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã: ${product.additionalPrices.length}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ
          const existingProduct = await this.prisma.product.findUnique({
            where: { sku: product.sku }
          });

          const productData = this.prepareProductData(product);
          logWithTimestamp(`–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:`, JSON.stringify(productData, null, 2));

          if (existingProduct) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
            logWithTimestamp(`–û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä ${product.sku}...`);
            await this.prisma.product.update({
              where: { sku: product.sku },
              data: productData
            });
            logWithTimestamp(`‚úÖ –¢–æ–≤–∞—Ä ${product.sku} –æ–±–Ω–æ–≤–ª–µ–Ω`);
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            logWithTimestamp(`–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä ${product.sku}...`);
            await this.prisma.product.create({
              data: {
                sku: product.sku,
                ...productData
              }
            });
            logWithTimestamp(`‚úÖ –¢–æ–≤–∞—Ä ${product.sku} —Å–æ–∑–¥–∞–Ω`);
          }

          syncedProducts++;
          
          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Ç—ã
          if (product.set && product.set.length > 0) {
            syncedSets++;
            logWithTimestamp(`üéØ –ö–æ–º–ø–ª–µ–∫—Ç ${product.sku} —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω (${product.set.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)`);
          } else {
            logWithTimestamp(`üì¶ –û–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä ${product.sku} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω`);
          }

        } catch (error) {
          const errorMessage = `–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${product.sku}: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
          logWithTimestamp(errorMessage);
          errors.push(errorMessage);
        }
      }

      logWithTimestamp(`\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ===`);
      logWithTimestamp(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${syncedProducts}`);
      logWithTimestamp(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤: ${syncedSets}`);
      logWithTimestamp(`–û—à–∏–±–æ–∫: ${errors.length}`);
      
      if (errors.length > 0) {
        logWithTimestamp(`–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫:`);
        errors.forEach((error, index) => {
          logWithTimestamp(`${index + 1}. ${error}`);
        });
      }

      return {
        success: errors.length === 0,
        message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${syncedProducts} —Ç–æ–≤–∞—Ä–æ–≤, ${syncedSets} –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤`,
        syncedProducts,
        syncedSets,
        errors
      };

    } catch (error) {
      logWithTimestamp('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        syncedProducts: 0,
        syncedSets: 0,
        errors: [error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞']
      };
    }
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  private prepareProductData(product: DilovodProduct): any {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Å –ø–æ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const weight = this.determineWeightByCategory(product.category.id);
    
    return {
      name: product.name,
      costPerItem: product.costPerItem ? parseFloat(product.costPerItem) : null,
      currency: product.currency,
      categoryId: product.category.id || null,
      categoryName: product.category.name,
      weight: weight, // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å
      set: product.set.length > 0 ? JSON.stringify(product.set) : null,
      additionalPrices: product.additionalPrices.length > 0 ? JSON.stringify(product.additionalPrices) : null,
      dilovodId: product.id,
      lastSyncAt: new Date()
    };
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  private determineWeightByCategory(categoryId: number): number | null {
    // –ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞ - 400 –≥—Ä
    if (categoryId === 1) {
      return 400;
    }
    
    // –í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞ - 300 –≥—Ä
    if (categoryId === 2) {
      return 300;
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Å
    return null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  async getSyncStats(): Promise<{
    totalProducts: number;
    productsWithSets: number;
    lastSync: string | null;
    categoriesCount: Array<{ name: string; count: number }>;
  }> {
    try {
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
      const totalProducts = await this.prisma.product.count();
      
      // –¢–æ–≤–∞—Ä—ã —Å –∫–æ–º–ø–ª–µ–∫—Ç–∞–º–∏
      const productsWithSets = await this.prisma.product.count({
        where: {
          set: {
            not: null
          }
        }
      });
      
      // –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      const lastSyncProduct = await this.prisma.product.findFirst({
        orderBy: {
          lastSyncAt: 'desc'
        },
        select: {
          lastSyncAt: true
        }
      });
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const categoriesStats = await this.prisma.product.groupBy({
        by: ['categoryName'],
        _count: {
          categoryName: true
        },
        where: {
          categoryName: {
            not: null
          }
        }
      });
      
      const categoriesCount = categoriesStats.map(stat => ({
        name: stat.categoryName || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        count: stat._count.categoryName
      }));
      
      return {
        totalProducts,
        productsWithSets,
        lastSync: lastSyncProduct?.lastSyncAt?.toISOString() || null,
        categoriesCount
      };
      
    } catch (error) {
      logWithTimestamp('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ N –¥–Ω–µ–π)
  async cleanupOldProducts(daysOld?: number): Promise<{
    success: boolean;
    message: string;
    deletedCount: number;
  }> {
    try {
      // –ï—Å–ª–∏ daysOld –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      if (daysOld === undefined) {
        try {
          const settings = await syncSettingsService.getSyncSettings();
          daysOld = settings.dilovod.cleanupDaysOld;
        } catch (error) {
          logWithTimestamp('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Dilovod, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
          daysOld = 30;
        }
      }

      logWithTimestamp(`–û—á–∏—Å—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤, –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ ${daysOld} –¥–Ω–µ–π...`);
      
      const cutoffDate = new Date(Date.now() - daysOld * 24 * 60 * 60 * 1000);
      
      const deletedProducts = await this.prisma.product.deleteMany({
        where: {
          lastSyncAt: {
            lt: cutoffDate
          }
        }
      });
      
      logWithTimestamp(`–£–¥–∞–ª–µ–Ω–æ ${deletedProducts.count} —Å—Ç–∞—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
      
      return {
        success: true,
        message: `–£–¥–∞–ª–µ–Ω–æ ${deletedProducts.count} —Å—Ç–∞—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`,
        deletedCount: deletedProducts.count
      };
      
    } catch (error) {
      logWithTimestamp('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        deletedCount: 0
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
  async getProducts(filters: {
    page?: number;
    limit?: number;
    search?: string;
    category?: string;
    hasSets?: boolean;
  }): Promise<{
    products: any[];
    pagination: {
      page: number;
      limit: number;
      total: number;
      pages: number;
    };
  }> {
    try {
      const { page = 1, limit = 20, search, category, hasSets } = filters;
      const skip = (page - 1) * limit;
      
      // –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
      const where: any = {};
      
      if (search) {
        where.OR = [
          { name: { contains: search, mode: 'insensitive' } },
          { sku: { contains: search, mode: 'insensitive' } }
        ];
      }
      
      if (category) {
        where.categoryName = category;
      }
      
      if (hasSets !== undefined) {
        if (hasSets) {
          where.set = { not: null };
        } else {
          where.set = null;
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
      const [products, total] = await Promise.all([
        this.prisma.product.findMany({
          where,
          skip,
          take: limit,
          orderBy: {
            lastSyncAt: 'desc'
          }
        }),
        this.prisma.product.count({ where })
      ]);
      
      const pages = Math.ceil(total / limit);
      
      return {
        products,
        pagination: {
          page,
          limit,
          total,
          pages
        }
      };
      
    } catch (error) {
      logWithTimestamp('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
      throw error;
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  async disconnect(): Promise<void> {
    await this.prisma.$disconnect();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  async updateProductStockBalance(
    sku: string, 
    mainStorage: number, 
    kyivStorage: number
  ): Promise<{ success: boolean; message: string }> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä
      const existingProduct = await this.prisma.product.findUnique({
        where: { sku }
      });

      if (!existingProduct) {
        return {
          success: false,
          message: `–¢–æ–≤–∞—Ä —Å SKU ${sku} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`
        };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
      await this.prisma.product.update({
        where: { sku },
        data: {
          stockBalanceByStock: JSON.stringify({
            "1": mainStorage,    // –°–∫–ª–∞–¥ 1 (–≥–ª–∞–≤–Ω—ã–π)
            "2": kyivStorage     // –°–∫–ª–∞–¥ 2 (–∫–∏–µ–≤—Å–∫–∏–π)
          })
        }
      });

      return {
        success: true,
        message: `–û—Å—Ç–∞—Ç–∫–∏ –¥–ª—è ${sku} –æ–±–Ω–æ–≤–ª–µ–Ω—ã`
      };

    } catch (error) {
      logWithTimestamp(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è ${sku}:`, error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      };
    }
  }
}
