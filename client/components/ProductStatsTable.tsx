import React, { useState, useEffect, useMemo, useCallback } from "react";
import {
  Table,
  TableHeader,
  TableBody,
  TableColumn,
  TableRow,
  TableCell,
  Button,
  Select,
  SelectItem,
  DateRangePicker,
  Chip,
  Spinner,
} from "@heroui/react";
import { useApi } from "../hooks/useApi";
import { parseDate, CalendarDate, getLocalTimeZone, today } from "@internationalized/date";
import type { DateRange } from "@react-types/datepicker";
import { DynamicIcon } from "lucide-react/dynamic";
import { formatRelativeDate } from "../lib/formatUtils";
import { I18nProvider } from "@react-aria/i18n";
import { useRoleAccess } from "@/hooks/useRoleAccess";

interface ProductStats {
  name: string;
  sku: string;
  orderedQuantity: number;
  stockBalances: { [warehouse: string]: number };
}

interface ProductDateStats {
  date: string;
  orderedQuantity: number;
  stockBalances: { [warehouse: string]: number };
}

interface ProductStatsResponse {
  success: boolean;
  data: ProductStats[];
  metadata: {
    source: string;
    filters: {
      status: string;
      dateRange: { startDate: string; endDate: string } | null;
    };
    totalProducts: number;
    totalOrders: number;
    fetchedAt: string;
  };
}

interface ProductDateStatsResponse {
  success: boolean;
  data: ProductDateStats[];
  product: {
    name: string;
    sku: string;
  };
  metadata: {
    source: string;
    filters: {
      sku: string;
      status: string;
      dateRange: { startDate: string; endDate: string } | null;
    };
    totalDates: number;
    totalOrders: number;
    fetchedAt: string;
  };
}

interface ProductStatsTableProps {
  className?: string;
}

type SortDescriptor = {
  column: string;
  direction: "ascending" | "descending";
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ productStats

const statusOptions = [
  { key: "all", label: "–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏" },
  { key: "1", label: "–ù–æ–≤—ñ" },
  { key: "2", label: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ" },
  { key: "3", label: "–ì–æ—Ç–æ–≤—ñ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏" },
  { key: "4", label: "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ" },
  { key: "5", label: "–ü—Ä–æ–¥–∞–Ω—ñ" },
  { key: "6", label: "–í—ñ–¥—Ö–∏–ª–µ–Ω—ñ" },
  { key: "7", label: "–ü–æ–≤–µ—Ä–Ω–µ–Ω—ñ" },
  { key: "8", label: "–í–∏–¥–∞–ª–µ–Ω—ñ" }
];

export default function ProductStatsTable({ className }: ProductStatsTableProps) {
  const { isAdmin } = useRoleAccess();
  const { apiCall } = useApi();
  const [productStats, setProductStats] = useState<ProductStats[]>([]);
  const [loading, setLoading] = useState(false);
  const [sortDescriptor, setSortDescriptor] = useState<SortDescriptor>({
    column: "orderedQuantity",
    direction: "descending"
  });

  // –§–∏–ª—å—Ç—Ä—ã
  const [statusFilter, setStatusFilter] = useState("all");
  const [dateRange, setDateRange] = useState<DateRange | null>(null);
  const [datePresetKey, setDatePresetKey] = useState<string | null>(null);

  // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–≤–∞—Ä–∞–º
  const [selectedProduct, setSelectedProduct] = useState<string>("");
  const [viewMode, setViewMode] = useState<"products" | "dates">("products");

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ –¥–∞—Ç–∞–º
  const [dateStats, setDateStats] = useState<ProductDateStats[]>([]);
  const [selectedProductInfo, setSelectedProductInfo] = useState<{ name: string; sku: string } | null>(null);

  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  const [cacheLoading, setCacheLoading] = useState(false);
  const [cacheProgress, setCacheProgress] = useState<{ processed: number; total: number; errors: number } | null>(null);
  const [lastCacheUpdate, setLastCacheUpdate] = useState<Date | null>(null);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  const columns = useMemo(() => {
    if (viewMode === "dates") {
      return [
        { key: "date", label: "–î–∞—Ç–∞", sortable: true, className: "w-3/16" },
        { key: "name", label: "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É", sortable: false, className: "w-5/16" },
        { key: "orderedQuantity", label: "–ü–æ—Ä—Ü—ñ—ó", sortable: true, className: "w-2/16 text-center" },
        { key: "totalStock", label: "–í—Å—å–æ–≥–æ", sortable: true, className: "w-2/16 text-center" },
        { key: "mainStock", label: "–°–∫–ª–∞–¥ –ì–ü", sortable: true, className: "w-2/16 text-center" },
        { key: "smallStock", label: "–°–∫–ª–∞–¥ –ú", sortable: true, className: "w-2/16 text-center" }
      ];
    } else {
      return [
        { key: "name", label: "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É", sortable: true, className: "w-6/16" },
        { key: "sku", label: "SKU", sortable: true, className: "w-2/16 text-left" },
        { key: "orderedQuantity", label: "–ü–æ—Ä—Ü—ñ—ó", sortable: true, className: "w-2/16 text-center" },
        { key: "totalStock", label: "–í—Å—å–æ–≥–æ", sortable: true, className: "w-2/16 text-center" },
        { key: "mainStock", label: "–°–∫–ª–∞–¥ –ì–ü", sortable: true, className: "w-2/16 text-center" },
        { key: "smallStock", label: "–°–∫–ª–∞–¥ –ú", sortable: true, className: "w-2/16 text-center" }
      ];
    }
  }, [viewMode]);

  // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–µ—à –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
  const [cache, setCache] = useState<Record<string, { data: ProductStats[], timestamp: number }>>({});
  const CACHE_DURATION = 30000; // 30 —Å–µ–∫—É–Ω–¥ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
  const fetchProductStats = useCallback(async (force?: boolean) => {
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫–µ—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const cacheKey = `${statusFilter}_${dateRange ? `${dateRange.start?.toString()}_${dateRange.end?.toString()}` : 'no_date'}`;

    const now = Date.now();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–µ—à –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if (!force && cache[cacheKey] && (now - cache[cacheKey].timestamp) < CACHE_DURATION) {
      console.log('üìã Using client cache for filters:', cacheKey);
      setProductStats(cache[cacheKey].data);
      return;
    }

    setLoading(true);
    // console.log('üöÄ FETCH START - force:', force, 'current filters:', { statusFilter, dateRange });

    try {
      const params = new URLSearchParams();

      if (statusFilter !== "all") {
        params.append("status", statusFilter);
      }

      if (dateRange?.start && dateRange?.end) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º CalendarDate –≤ —Å—Ç—Ä–æ–∫—É YYYY-MM-DD
        const startDate = `${dateRange.start.year}-${String(dateRange.start.month).padStart(2, '0')}-${String(dateRange.start.day).padStart(2, '0')}`;
        const endDate = `${dateRange.end.year}-${String(dateRange.end.month).padStart(2, '0')}-${String(dateRange.end.day).padStart(2, '0')}`;
        params.append("startDate", startDate);
        params.append("endDate", endDate);
      }

      const queryString = params.toString();
      const url = queryString ? `/api/orders/products/stats?${queryString}` : `/api/orders/products/stats`;

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ - –¥–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ –∫–µ—à–∞

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π endpoint —Å –∫–µ—à–µ–º
      const response = await apiCall(url);
      const data: ProductStatsResponse = await response.json();

      if (data.success) {
        console.log('üìä –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï:', data.data.length, '—Ç–æ–≤–∞—Ä–æ–≤,', data.metadata.totalOrders, '–∑–∞–∫–∞–∑–æ–≤');

        const totalOrderedQuantity = data.data.reduce((sum, product) => sum + product.orderedQuantity, 0);
        console.log(`üí∞ –û–ë–©–ê–Ø –°–£–ú–ú–ê –ó–ê–ö–ê–ó–û–í: ${totalOrderedQuantity} —à—Ç.`);

        setProductStats(data.data);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–µ—à
        setCache(prev => ({
          ...prev,
          [cacheKey]: { data: data.data, timestamp: now }
        }));

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
        setLastCacheUpdate(new Date());
      }
    } catch (error) {
      console.error('Error fetching product stats:', error);
    } finally {
      setLoading(false);
    }
  }, [statusFilter, dateRange?.start, dateRange?.end, cache, CACHE_DURATION]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞—Ç–∞–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  const fetchProductDateStats = useCallback(async (force?: boolean) => {
    if (!selectedProduct) {
      console.log('‚ö†Ô∏è fetchProductDateStats: no selectedProduct, skipping');
      return;
    }

    console.log('üìä fetchProductDateStats called for product:', selectedProduct, 'force:', force);
    setLoading(true);
    try {
      const params = new URLSearchParams();
      params.append("sku", selectedProduct);

      if (statusFilter !== "all") {
        params.append("status", statusFilter);
      }

      if (dateRange?.start && dateRange?.end) {
        const startDate = `${dateRange.start.year}-${String(dateRange.start.month).padStart(2, '0')}-${String(dateRange.start.day).padStart(2, '0')}`;
        const endDate = `${dateRange.end.year}-${String(dateRange.end.month).padStart(2, '0')}-${String(dateRange.end.day).padStart(2, '0')}`;
        params.append("startDate", startDate);
        params.append("endDate", endDate);
      }

      const queryString = params.toString();
      const url = queryString ? `/api/orders/products/stats/dates?${queryString}` : `/api/orders/products/stats/dates`;

      const response = await apiCall(url);
      const data: ProductDateStatsResponse = await response.json();

      if (data.success) {
        console.log('üìä –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –ü–û –î–ê–¢–ê–ú:', data.data.length, '–¥–Ω–µ–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞', data.product.name);

        setDateStats(data.data);
        setSelectedProductInfo(data.product);
        setViewMode("dates");
      }
    } catch (error) {
      console.error('Error fetching product date stats:', error);
    } finally {
      setLoading(false);
    }
  }, [selectedProduct, statusFilter, dateRange?.start, dateRange?.end, apiCall]);

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const handleRefreshData = useCallback(() => {
    // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const cacheKey = `${statusFilter}_${dateRange ? `${dateRange.start?.toString()}_${dateRange.end?.toString()}` : 'no_date'}`;
    setCache(prev => {
      const newCache = { ...prev };
      delete newCache[cacheKey];
      return newCache;
    });

    if (viewMode === "dates" && selectedProduct) {
      fetchProductDateStats(true).catch(console.error);
    } else {
      fetchProductStats(true).catch(console.error);
    }
  }, [fetchProductStats, fetchProductDateStats, statusFilter, dateRange, viewMode, selectedProduct]);

  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç
  const getCurrentDate = () => today(getLocalTimeZone());

  const datePresets = [
    { key: "today", label: "–°—å–æ–≥–æ–¥–Ω—ñ", getRange: () => {
      const todayDate = getCurrentDate();
      return { start: todayDate, end: todayDate };
    }},
    { key: "yesterday", label: "–í—á–æ—Ä–∞", getRange: () => {
      const yesterday = getCurrentDate().subtract({ days: 1 });
      return { start: yesterday, end: yesterday };
    }},
    { key: "thisWeek", label: "–¶—å–æ–≥–æ —Ç–∏–∂–Ω—è", getRange: () => {
      const todayDate = getCurrentDate();
      const startOfWeek = todayDate.subtract({ days: todayDate.day - 1 }); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
      return { start: startOfWeek, end: todayDate };
    }},
    { key: "last7Days", label: "–û—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤", getRange: () => {
      const todayDate = getCurrentDate();
      const weekAgo = todayDate.subtract({ days: 6 });
      return { start: weekAgo, end: todayDate };
    }},
    { key: "last14Days", label: "–û—Å—Ç–∞–Ω–Ω—ñ 14 –¥–Ω—ñ–≤", getRange: () => {
      const todayDate = getCurrentDate();
      const twoWeeksAgo = todayDate.subtract({ days: 13 });
      return { start: twoWeeksAgo, end: todayDate };
    }},
    { key: "thisMonth", label: "–¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è", getRange: () => {
      const todayDate = getCurrentDate();
      const startOfMonth = todayDate.subtract({ days: todayDate.day - 1 });
      return { start: startOfMonth, end: todayDate };
    }},
    { key: "lastMonth", label: "–ú–∏–Ω—É–ª–æ–≥–æ –º—ñ—Å—è—Ü—è", getRange: () => {
      const todayDate = getCurrentDate();
      const lastMonth = todayDate.subtract({ months: 1 });
      const startOfLastMonth = lastMonth.subtract({ days: lastMonth.day - 1 });
      // –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const endOfLastMonth = startOfLastMonth.add({ days: 30 }); // –ü—Ä–∏–º–µ—Ä–Ω–æ 30 –¥–Ω–µ–π
      return { start: startOfLastMonth, end: endOfLastMonth };
    }},
    { key: "thisYear", label: "–¶—å–æ–≥–æ —Ä–æ–∫—É", getRange: () => {
      const todayDate = getCurrentDate();
      const startOfYear = new CalendarDate(todayDate.year, 1, 1);
      return { start: startOfYear, end: todayDate };
    }},
    { key: "lastYear", label: "–ú–∏–Ω—É–ª–æ–≥–æ —Ä–æ–∫—É", getRange: () => {
      const todayDate = getCurrentDate();
      const startOfLastYear = new CalendarDate(todayDate.year - 1, 1, 1);
      const endOfLastYear = new CalendarDate(todayDate.year - 1, 12, 31);
      return { start: startOfLastYear, end: endOfLastYear };
    }}
  ];

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  const handleProductChange = useCallback((sku: string) => {
    console.log('üîÑ handleProductChange called with sku:', sku);
    setSelectedProduct(sku);
    if (sku) {
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –ø–æ –¥–∞—Ç–∞–º
      console.log('üìä Switching to dates mode for product:', sku);
      setViewMode("dates");
      // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º fetchProductDateStats –∑–¥–µ—Å—å, –æ–Ω –≤—ã–∑–æ–≤–µ—Ç—Å—è –≤ useEffect
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—â–µ–º—É —Ä–µ–∂–∏–º—É
      console.log('üìä Switching back to products mode');
      setViewMode("products");
      setDateStats([]);
      setSelectedProductInfo(null);
    }
  }, []); // –£–±—Ä–∞–ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const resetFilters = useCallback(() => {
    setStatusFilter("all");
    setDateRange(null);
    setDatePresetKey(null);
    setSelectedProduct("");
    setViewMode("products");
    setDateStats([]);
    setSelectedProductInfo(null);
    setCache({}); // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫–µ—à –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞
  const refreshCache = async () => {
    setCacheLoading(true);
    setCacheProgress(null);

    try {
      console.log('üöÄ Starting cache refresh...');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
      alert('üöÄ –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤...\n–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –ø–∞—á–∫–∞–º–∏ –ø–æ 50 —à—Ç.\n–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω.');

      // –í—ã–∑—ã–≤–∞–µ–º endpoint –º–∞—Å—Å–æ–≤–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
      const response = await apiCall('/api/orders/preprocess-all', {
        method: 'POST'
      });

      if (response.status === 403) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É. –ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      }

      if (!response.ok) {
        throw new Error('Failed to refresh cache');
      }

      const result = await response.json();

      if (result.success) {
        console.log('‚úÖ Cache refresh completed:', result.stats);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
        setLastCacheUpdate(new Date());

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        alert(`‚úÖ –ö–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!\n–û–±—Ä–æ–±–ª–µ–Ω–æ: ${result.stats.processedCount} –∑–∞–º–æ–≤–ª–µ–Ω—å\n–ü–∞—á–æ–∫: ${result.stats.batchesProcessed} (–ø–æ ${result.stats.batchSize} –∑–∞–º–æ–≤–ª–µ–Ω—å)\n–ü–æ–º–∏–ª–∫–∏: ${result.stats.errorCount}`);

        // –û—á–∏—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–µ—à –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        setCache({});
        await fetchProductStats(true); // force = true –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      } else {
        throw new Error('Cache refresh failed');
      }

    } catch (error) {
      console.error('‚ùå Error refreshing cache:', error);
      alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–µ—à–∞: ' + error);
    } finally {
      setCacheLoading(false);
      setCacheProgress(null);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    console.log('üîÑ useEffect triggered - viewMode:', viewMode, 'selectedProduct:', selectedProduct, 'statusFilter:', statusFilter);
    if (viewMode === "dates" && selectedProduct) {
      console.log('üìä Calling fetchProductDateStats from useEffect');
      fetchProductDateStats();
    } else {
      console.log('üìä Calling fetchProductStats from useEffect');
      fetchProductStats();
    }
  }, [fetchProductStats, viewMode, selectedProduct, statusFilter, dateRange]); // –£–±—Ä–∞–ª–∏ fetchProductDateStats –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π



  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  useEffect(() => {
    if (!lastCacheUpdate) {
      setLastCacheUpdate(new Date());
    }
  }, [lastCacheUpdate]);

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const sortedItems = useMemo(() => {
    if (viewMode === "dates") {
      const items = [...dateStats];

      items.sort((a, b) => {
        const first = a[sortDescriptor.column as keyof ProductDateStats];
        const second = b[sortDescriptor.column as keyof ProductDateStats];

        let cmp = 0;

        if (sortDescriptor.column === "date") {
          cmp = a.date.localeCompare(b.date);
        } else if (sortDescriptor.column === "totalStock") {
          // –î–ª—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
          const firstTotal = Object.values(a.stockBalances).reduce((sum, balance) => sum + balance, 0);
          const secondTotal = Object.values(b.stockBalances).reduce((sum, balance) => sum + balance, 0);
          cmp = firstTotal - secondTotal;
        } else if (typeof first === "number" && typeof second === "number") {
          cmp = first - second;
        }

        return sortDescriptor.direction === "descending" ? -cmp : cmp;
      });

      return items;
    } else {
      const items = [...productStats];

      items.sort((a, b) => {
        const first = a[sortDescriptor.column as keyof ProductStats];
        const second = b[sortDescriptor.column as keyof ProductStats];

        let cmp = 0;

        if (sortDescriptor.column === "totalStock") {
          // –î–ª—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
          const firstTotal = Object.values(a.stockBalances).reduce((sum, balance) => sum + balance, 0);
          const secondTotal = Object.values(b.stockBalances).reduce((sum, balance) => sum + balance, 0);
          cmp = firstTotal - secondTotal;
        } else if (typeof first === "string" && typeof second === "string") {
          cmp = first.localeCompare(second);
        } else if (typeof first === "number" && typeof second === "number") {
          cmp = first - second;
        }

        return sortDescriptor.direction === "descending" ? -cmp : cmp;
      });

      return items;
    }
  }, [productStats, dateStats, sortDescriptor, viewMode]);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
  const getTotalStock = (stockBalances: { [warehouse: string]: number }) => {
    return Object.values(stockBalances).reduce((sum, balance) => sum + balance, 0);
  };

  // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –∏ –º–∞–ª—ã–π
  const getMainStock = (stockBalances: { [warehouse: string]: number }) => {
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–∫–ª–∞–¥ "1" - —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π —Å–∫–ª–∞–¥ –ì–ü
    return stockBalances["1"] || 0;
  };

  const getSmallStock = (stockBalances: { [warehouse: string]: number }) => {
    // –°—É–º–º–∞ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤ –∫—Ä–æ–º–µ "1" (–≥–ª–∞–≤–Ω–æ–≥–æ)
    return Object.entries(stockBalances)
      .filter(([warehouseId]) => warehouseId !== "1")
      .reduce((sum, [, balance]) => sum + balance, 0);
  };

  // –¶–≤–µ—Ç–æ–≤–∞—è –≥—Ä–∞–¥–∞—Ü–∏—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π (–º—è–≥–∫–∏–µ —Ü–≤–µ—Ç–∞ –≤ —Å—Ç–∏–ª–µ flat HeroUI)
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å base –∏ content, 5 –≥—Ä–∞–¥–∞—Ü–∏–π, –Ω—É–ª–∏ ‚Äî —Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ —Ñ–æ–Ω–∞
  const getValueColor = (value: number, values: number[]) => {
    if (values.length === 0 || value === 0) {
      return {
        base: "bg-transparent",
        content: "text-gray-400 font-medium"
      };
    }

    const min = Math.min(...values.filter(v => v > 0));
    const max = Math.max(...values);

    if (min === max) {
      return {
        base: "bg-neutral-100/50",
        content: "text-gray-700 font-medium"
      };
    }

    const normalized = (value - min) / (max - min);

	if (normalized < 0.1) {
	// –ö—Ä–∞—Å–Ω—ã–π
		return {
			base: "bg-danger/10",
			content: "text-danger font-medium"
		};
	} else if (normalized < 0.35) {
	// –ñ—ë–ª—Ç—ã–π
		return {
			base: "bg-yellow-500/10",
			content: "text-yellow-700/80 font-medium"
		};
	} else if (normalized < 0.75) {
		// –ñ—ë–ª—Ç—ã–π
			return {
				base: "bg-lime-500/10",
				content: "text-lime-600/80 font-medium"
			};
	} else {
		// –ó–µ–ª—ë–Ω—ã–π
		return {
			base: "bg-lime-500/20",
			content: "text-lime-600 font-medium"
		};
	}
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
  const getAllOrderedQuantities = useMemo(() =>
    viewMode === "dates"
      ? dateStats.map(item => item.orderedQuantity)
      : productStats.map(item => item.orderedQuantity),
    [productStats, dateStats, viewMode]);

  const getAllTotalStocks = useMemo(() =>
    viewMode === "dates"
      ? dateStats.map(item => getTotalStock(item.stockBalances))
      : productStats.map(item => getTotalStock(item.stockBalances)),
    [productStats, dateStats, viewMode]);

  const getAllMainStocks = useMemo(() =>
    viewMode === "dates"
      ? dateStats.map(item => getMainStock(item.stockBalances))
      : productStats.map(item => getMainStock(item.stockBalances)),
    [productStats, dateStats, viewMode]);

  const getAllSmallStocks = useMemo(() =>
    viewMode === "dates"
      ? dateStats.map(item => getSmallStock(item.stockBalances))
      : productStats.map(item => getSmallStock(item.stockBalances)),
    [productStats, dateStats, viewMode]);

  // –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  const totals = useMemo(() => {
    if (viewMode === "dates") {
      return {
        orderedQuantity: dateStats.reduce((sum, item) => sum + item.orderedQuantity, 0),
        totalStock: dateStats.reduce((sum, item) => sum + getTotalStock(item.stockBalances), 0),
        mainStock: dateStats.reduce((sum, item) => sum + getMainStock(item.stockBalances), 0),
        smallStock: dateStats.reduce((sum, item) => sum + getSmallStock(item.stockBalances), 0),
      };
    } else {
      return {
        orderedQuantity: productStats.reduce((sum, item) => sum + item.orderedQuantity, 0),
        totalStock: productStats.reduce((sum, item) => sum + getTotalStock(item.stockBalances), 0),
        mainStock: productStats.reduce((sum, item) => sum + getMainStock(item.stockBalances), 0),
        smallStock: productStats.reduce((sum, item) => sum + getSmallStock(item.stockBalances), 0),
      };
    }
  }, [productStats, dateStats, viewMode]);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º
  const formatStockBreakdown = (stockBalances: { [warehouse: string]: number }) => {
    const entries = Object.entries(stockBalances);
    if (entries.length === 0) return "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö";

    return entries.map(([warehouseId, balance]) => (
      <Chip
        key={warehouseId}
        size="sm"
        variant="flat"
        className="mr-1 mb-1"
      >
        –°–∫–ª–∞–¥ {warehouseId}: {balance}
      </Chip>
    ));
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
  const productOptions = useMemo(() => {
    const options = [<SelectItem key="">–í—Å—ñ —Ç–æ–≤–∞—Ä–∏</SelectItem>];
    productStats.forEach((product) => {
      options.push(
        <SelectItem key={product.sku}>
          {product.name} ({product.sku})
        </SelectItem>
      );
    });
    return options;
  }, [productStats]);

  return (
    <div className={`space-y-4 ${className}`}>
      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="flex flex-wrap gap-4 items-end">
        <div className="flex-1">
          <Select
            aria-label="–§—ñ–ª—å—Ç—Ä –ø–æ —Ç–æ–≤–∞—Ä—É"
            placeholder="–í—Å—ñ —Ç–æ–≤–∞—Ä–∏"
            selectedKeys={selectedProduct ? [selectedProduct] : []}
            onSelectionChange={(keys) => {
              const selected = Array.from(keys);
              const sku = selected.length > 0 ? (selected[0] as string) : "";
              handleProductChange(sku);
            }}
            renderValue={(items) => {
              if (items.length === 0) return "–í—Å—ñ —Ç–æ–≤–∞—Ä–∏";
              const selectedItem = items[0];
              const product = productStats.find(p => p.sku === selectedItem.key);
              return product ? `${product.name} (${product.sku})` : "–í—Å—ñ —Ç–æ–≤–∞—Ä–∏";
            }}
            size="lg"
            startContent={<DynamicIcon name="package" className="text-gray-400" size={19} />}
            classNames={{
              trigger: "h-12 max-w-60",
              innerWrapper: "gap-2"
            }}
          >
            {productOptions}
          </Select>
        </div>

        <div className="flex-1">
          <Select
            aria-label="–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
            placeholder="–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏"
            selectedKeys={statusFilter === "all" ? [] : [statusFilter]}
            onSelectionChange={(keys) => {
              const selected = Array.from(keys);
              const newStatus =
                selected.length > 0 ? (selected[0] as string) : "all";
              setStatusFilter(newStatus);
            }}
            size="lg"
			startContent={<DynamicIcon name="filter" className="text-gray-400" size={19} />}
			classNames={{
				trigger: "h-12",
				innerWrapper: "gap-2"
			}}
          >
            {statusOptions.map((option) => (
              <SelectItem key={option.key}>{option.label}</SelectItem>
            ))}
          </Select>
        </div>

        <div className="flex-1">
          <Select
            aria-label="–®–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä –ø–µ—Ä—ñ–æ–¥—É"
            placeholder="–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥"
			selectedKeys={datePresetKey ? [datePresetKey] : []}
            onSelectionChange={keys => {
				const selectedKey = Array.from(keys)[0] as string;
				setDatePresetKey(selectedKey);
				const preset = datePresets.find(p => p.key === selectedKey);
				if (preset) setDateRange(preset.getRange());
			}}
            size="lg"
			startContent={<DynamicIcon name="calendar" className="text-gray-400" size={19} />}
			classNames={{
				trigger: "h-12",
				innerWrapper: "gap-2"
			}}
          >
            {datePresets.map((preset) => (
              <SelectItem key={preset.key}>{preset.label}</SelectItem>
            ))}
          </Select>
        </div>

        <div className="flex-1">
          <I18nProvider locale="uk-UA">
            <DateRangePicker
              aria-label="–ê–±–æ –≤–ª–∞—Å–Ω–∏–π –ø–µ—Ä—ñ–æ–¥"
              value={dateRange}
              onChange={(value) => {
                setDateRange(value);
                setDatePresetKey(null);
              }}
              size="lg"
			  selectorButtonPlacement="start"
			  selectorIcon={<DynamicIcon name="calendar" size={18} />}
			  classNames={{
				inputWrapper: "h-12",
				segment: "rounded"
			  }}
            />
          </I18nProvider>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
        <Button
          onPress={resetFilters}
          disabled={loading}
          size="lg"
          variant="flat"
          className="h-12 px-3 gap-2 bg-transparent border-1.5 border-neutral-200 hover:bg-red-100 hover:border-red-200 hover:text-red-500"
        //   isIconOnly
        >
          <DynamicIcon name="rotate-ccw" size={16} />
		  –°–∫–∏–Ω—É—Ç–∏
        </Button>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {cacheProgress && (
        <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <div className="flex items-center justify-between mb-2">
            <div className="flex items-center gap-2">
              <DynamicIcon
                name="database"
                size={20}
                className="text-blue-600"
              />
              <span className="text-sm font-medium text-blue-800">
                –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
              </span>
            </div>
            <span className="text-sm text-blue-600">
              {cacheProgress.processed} / {cacheProgress.total}
            </span>
          </div>

          <div className="w-full bg-blue-200 rounded-full h-2 mb-2">
            <div
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{
                width: `${(cacheProgress.processed / cacheProgress.total) * 100}%`,
              }}
            />
          </div>

          <div className="flex justify-between text-xs text-blue-600">
            <span>–û–±—Ä–æ–±–ª–µ–Ω–æ: {cacheProgress.processed}</span>
            <span>–ü–æ–º–∏–ª–∫–∏: {cacheProgress.errors}</span>
          </div>
        </div>
      )}

      {/* –¢–∞–±–ª–∏—Ü–∞ */}
      <div className="relative">
        <Table
          aria-label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤"
          sortDescriptor={sortDescriptor}
          onSortChange={(descriptor) =>
            setSortDescriptor(descriptor as SortDescriptor)
          }
          classNames={{
            wrapper: "min-h-128 px-0 shadow-none",
			// table: "bg-neutral-300",
          }}
        >
          <TableHeader>
            {columns.map((column) => (
              <TableColumn
                key={column.key}
                allowsSorting={column.sortable}
                className={`${column.className} text-sm`}
              >
                {column.label}
              </TableColumn>
            ))}
          </TableHeader>
          <TableBody
            items={sortedItems as any}
            emptyContent={
              loading ? (
                <div className="flex items-center justify-center py-8">
                  <Spinner size="lg" color="primary" />
                  <span className="ml-3 text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>
                </div>
              ) : (
                <div className="flex items-center justify-center py-8 h-110 text-gray-500">
                  <DynamicIcon
                    name="inbox"
                    size={48}
                    className="text-gray-300"
                  />
                  <span className="ml-3">
                    {viewMode === "dates" ? "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ –¥–∞—Ç–∞—Ö –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É" : "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"}
                  </span>
                </div>
              )
            }
            isLoading={loading}
          >
            {(item) => {
              if (viewMode === "dates") {
                const dateItem = item as ProductDateStats;
                return (
                  <TableRow key={`${selectedProductInfo?.sku || ''}-${dateItem.date}`} className="hover:bg-neutral-50 transition-colors duration-200">
                    <TableCell className="font-medium text-base">
                      {new Date(dateItem.date).toLocaleDateString('uk-UA', {
                        day: '2-digit',
                        month: '2-digit',
                        year: 'numeric'
                      })}
                    </TableCell>
                    <TableCell className="font-medium text-base">{selectedProductInfo?.name || selectedProduct}</TableCell>
                    <TableCell className="text-center text-base">
                      <Chip
                        size="md"
                        variant="flat"
                        classNames={{
                          base: getValueColor(dateItem.orderedQuantity, getAllOrderedQuantities).base,
                          content: getValueColor(dateItem.orderedQuantity, getAllOrderedQuantities).content,
                        }}
                      >
                        {dateItem.orderedQuantity}
                      </Chip>
                    </TableCell>
                    <TableCell className="text-center text-base">
                      <Chip
                        size="md"
                        variant="flat"
                        classNames={{
                          base: getValueColor(getTotalStock(dateItem.stockBalances), getAllTotalStocks).base,
                          content: getValueColor(getTotalStock(dateItem.stockBalances), getAllTotalStocks).content,
                        }}
                      >
                        {getTotalStock(dateItem.stockBalances)}
                      </Chip>
                    </TableCell>
                    <TableCell className="text-center text-base">
                      <Chip
                        size="md"
                        variant="flat"
                        classNames={{
                          base: getValueColor(getMainStock(dateItem.stockBalances), getAllMainStocks).base,
                          content: getValueColor(getMainStock(dateItem.stockBalances), getAllMainStocks).content,
                        }}
                      >
                        {getMainStock(dateItem.stockBalances)}
                      </Chip>
                    </TableCell>
                    <TableCell className="text-center text-base">
                      <Chip
                        size="md"
                        variant="flat"
                        classNames={{
                          base: getValueColor(getSmallStock(dateItem.stockBalances), getAllSmallStocks).base,
                          content: getValueColor(getSmallStock(dateItem.stockBalances), getAllSmallStocks).content,
                        }}
                      >
                        {getSmallStock(dateItem.stockBalances)}
                      </Chip>
                    </TableCell>
                  </TableRow>
                );
              } else {
                const productItem = item as any;
                return (
                  <TableRow key={productItem.sku} className="hover:bg-neutral-50 transition-colors duration-200">
                    <TableCell className="font-medium text-base">{productItem.name}</TableCell>
                    <TableCell className="font-mono text-base">{productItem.sku}</TableCell>
                    <TableCell className="text-center text-base">
                      <Chip
                        size="md"
                        variant="flat"
                        classNames={{
                          base: getValueColor(productItem.orderedQuantity, getAllOrderedQuantities).base,
                          content: getValueColor(productItem.orderedQuantity, getAllOrderedQuantities).content,
                        }}
                      >
                        {productItem.orderedQuantity}
                      </Chip>
                    </TableCell>
                    <TableCell className="text-center text-base">
                      <Chip
                        size="md"
                        variant="flat"
                        classNames={{
                          base: getValueColor(getTotalStock(productItem.stockBalances), getAllTotalStocks).base,
                          content: getValueColor(getTotalStock(productItem.stockBalances), getAllTotalStocks).content,
                        }}
                      >
                        {getTotalStock(productItem.stockBalances)}
                      </Chip>
                    </TableCell>
                    <TableCell className="text-center text-base">
                      <Chip
                        size="md"
                        variant="flat"
                        classNames={{
                          base: getValueColor(getMainStock(productItem.stockBalances), getAllMainStocks).base,
                          content: getValueColor(getMainStock(productItem.stockBalances), getAllMainStocks).content,
                        }}
                      >
                        {getMainStock(productItem.stockBalances)}
                      </Chip>
                    </TableCell>
                    <TableCell className="text-center text-base">
                      <Chip
                        size="md"
                        variant="flat"
                        classNames={{
                          base: getValueColor(getSmallStock(productItem.stockBalances), getAllSmallStocks).base,
                          content: getValueColor(getSmallStock(productItem.stockBalances), getAllSmallStocks).content,
                        }}
                      >
                        {getSmallStock(productItem.stockBalances)}
                      </Chip>
                    </TableCell>
                  </TableRow>
                );
              }
            }}
          </TableBody>
        </Table>

        {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
        {((viewMode === "products" && productStats.length > 0) || (viewMode === "dates" && dateStats.length > 0)) && (
          <div className="border-t-1 border-gray-200 py-2">
            <div className="flex items-center justify-between">
              <div className="font-bold text-gray-800 w-8/16 pl-3">
                {viewMode === "dates"
                  ? `–ó–Ω–∞–π–¥–µ–Ω–æ ${dateStats.length} –¥–Ω—ñ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä—É ${selectedProductInfo?.name || selectedProduct}`
                  : `–ó–Ω–∞–π–¥–µ–Ω–æ ${productStats.length} —Ç–æ–≤–∞—Ä—ñ–≤`
                }
              </div>
              <div className="text-center font-bold text-gray-800 min-w-[100px] w-2/16">
                {totals.orderedQuantity}
              </div>
              <div className="text-center font-bold text-gray-800 min-w-[100px] w-2/16">
                {totals.totalStock}
              </div>
              <div className="text-center font-bold text-gray-800 min-w-[100px] w-2/16">
                {totals.mainStock}
              </div>
              <div className="text-center font-bold text-gray-800 min-w-[100px] w-2/16">
                {totals.smallStock}
              </div>
            </div>
          </div>
        )}

        {/* –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –±–µ–∫–¥—Ä–æ–ø –ª–æ–∞–¥–µ—Ä–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
        <div
          className={`absolute inset-0 bg-white/50 backdrop-blur-sm flex items-center justify-center z-10 transition-all duration-300 ease-in-out ${
            loading ? 'opacity-100 visible' : 'opacity-0 invisible'
          }`}
        >
          <div className="flex flex-col items-center">
            <Spinner size="lg" color="primary" />
            <span className="mt-3 text-gray-700 font-medium">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...</span>
          </div>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏ –∫–µ—à–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
      <div className="flex justify-between items-center text-sm text-gray-600 mt-4">
        <div></div>
        <div className="flex items-center gap-4">
          <div className="flex gap-1 items-end text-[13px]">
            <DynamicIcon name="database" size={14} className="text-neutral-400" />
            <span className="leading-none">
              –û–Ω–æ–≤–ª–µ–Ω–æ:{" "}
              <span className="font-medium">
                {lastCacheUpdate
                  ? formatRelativeDate(
                      lastCacheUpdate.toISOString(),
                    ).toLowerCase()
                  : "–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö"}
              </span>
            </span>
          </div>

          <Button
            onPress={handleRefreshData}
            disabled={loading}
            size="sm"
            variant="flat"
            className="h-8"
          >
            <DynamicIcon name="refresh-cw" size={14} />
            –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ
          </Button>

          {isAdmin() && (
            <Button
              onPress={refreshCache}
              disabled={cacheLoading}
              size="sm"
              variant="flat"
              className="h-8"
            >
              <DynamicIcon name="database" size={14} />
              {cacheLoading ? "–û–Ω–æ–≤–ª–µ–Ω–Ω—è..." : "–û–Ω–æ–≤–∏—Ç–∏ –∫–µ—à"}
            </Button>
          )}
        </div>
      </div>
    </div>
  );
}
