// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è refresh —Ç–æ–∫–µ–Ω–æ–≤
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkRefreshTokens() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ refresh —Ç–æ–∫–µ–Ω–æ–≤...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–∞—Ö
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        isActive: true,
        refreshToken: true,
        refreshTokenExpiresAt: true,
        lastLoginAt: true,
        lastActivityAt: true,
        createdAt: true,
      }
    });
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);
    
    const now = new Date();
    
    users.forEach((user, index) => {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${index + 1}: ${user.email}`);
      console.log(`   ID: ${user.id}`);
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${user.isActive ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
      console.log(`   Refresh token: ${user.refreshToken ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);
      
      if (user.refreshToken && user.refreshTokenExpiresAt) {
        const isExpired = now > user.refreshTokenExpiresAt;
        const timeUntilExpiry = user.refreshTokenExpiresAt.getTime() - now.getTime();
        const hoursUntilExpiry = Math.floor(timeUntilExpiry / (1000 * 60 * 60));
        const minutesUntilExpiry = Math.floor((timeUntilExpiry % (1000 * 60 * 60)) / (1000 * 60));
        
        console.log(`   Refresh –∏—Å—Ç–µ–∫–∞–µ—Ç: ${user.refreshTokenExpiresAt.toLocaleString()}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${isExpired ? '‚ùå –ò–°–¢–Å–ö' : '‚úÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'}`);
        
        if (!isExpired) {
          console.log(`   –î–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: ${hoursUntilExpiry}—á ${minutesUntilExpiry}–º`);
        } else {
          const hoursAgo = Math.abs(hoursUntilExpiry);
          const minutesAgo = Math.abs(minutesUntilExpiry);
          console.log(`   –ò—Å—Ç—ë–∫: ${hoursAgo}—á ${minutesAgo}–º –Ω–∞–∑–∞–¥`);
        }
      }
      
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${user.lastLoginAt ? user.lastLoginAt.toLocaleString() : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${user.lastActivityAt ? user.lastActivityAt.toLocaleString() : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      console.log('   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const activeUsers = users.filter(u => u.isActive);
    const usersWithTokens = users.filter(u => u.refreshToken);
    const usersWithValidTokens = users.filter(u => 
      u.refreshToken && u.refreshTokenExpiresAt && now < u.refreshTokenExpiresAt
    );

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers.length}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å refresh —Ç–æ–∫–µ–Ω–æ–º: ${usersWithTokens.length}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º: ${usersWithValidTokens.length}`);

    if (usersWithTokens.length > usersWithValidTokens.length) {
      console.log('\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ï—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ refresh —Ç–æ–∫–µ–Ω–∞–º–∏!');
      console.log('üí° –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkRefreshTokens();
