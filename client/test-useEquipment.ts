// –¢–µ—Å—Ç –¥–ª—è —Ö—É–∫–∞ useEquipment
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ö—É–∫–∞

import { useEquipment } from './hooks/useEquipment';

// –ú–æ–∫–∞–µ–º fetch –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const originalFetch = global.fetch;

// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è fetch
// @ts-ignore - Jest globals for testing
global.fetch = jest.fn();

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const mockEquipmentConfig = {
  connectionType: 'simulation' as const,
  scale: {
    comPort: 'COM4',
    baudRate: 9600,
    dataBits: 8,
    stopBits: 1,
    parity: 'none'
  },
  scanner: {
    autoConnect: true,
    timeout: 5000
  },
  simulation: {
    enabled: true,
    weightRange: { min: 0.1, max: 5.0 },
    scanDelay: 800,
    weightDelay: 1200
  }
};

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function testLoadConfig() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...');
  
  // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
  // @ts-ignore - Jest mock
  (global.fetch as any).mockResolvedValueOnce({
    ok: true,
    json: async () => ({
      success: true,
      data: mockEquipmentConfig
    })
  });

  // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ—Å—Ç —Ö—É–∫–∞, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É
  console.log('‚úÖ –ú–æ–∫ fetch —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó');
  console.log('üìã –û—á—ñ–∫—É–≤–∞–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:', JSON.stringify(mockEquipmentConfig, null, 2));
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function testSaveConfig() {
  console.log('\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...');
  
  const newConfig = {
    ...mockEquipmentConfig,
    connectionType: 'simulation' as const,
    scale: {
      ...mockEquipmentConfig.scale,
      comPort: 'COM5'
    }
  };

  // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
  // @ts-ignore - Jest mock
  (global.fetch as any).mockResolvedValueOnce({
    ok: true,
    json: async () => ({
      success: true,
      data: newConfig
    })
  });

  console.log('‚úÖ –ú–æ–∫ fetch —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó');
  console.log('üìã –ù–æ–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:', JSON.stringify(newConfig, null, 2));
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
function testSimulationToggle() {
  console.log('\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É —Å–∏–º—É–ª—è—Ü—ñ—ó...');
  
  const simulationConfig = {
    ...mockEquipmentConfig,
    connectionType: 'simulation' as const
  };
  
  const localConfig = {
    ...mockEquipmentConfig,
    connectionType: 'local' as const
  };

  console.log('‚úÖ –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü—ñ—ó:', simulationConfig.connectionType);
  console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º:', localConfig.connectionType);
  console.log('üìã –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–∞');
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function testConnectionTypeToggle() {
  console.log('\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ç–∏–ø—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...');
  
  const localConfig = {
    ...mockEquipmentConfig,
    connectionType: 'local' as const
  };
  
  console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', localConfig.connectionType);
  console.log('üìã –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–∞');
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è —Ö—É–∫–∞ useEquipment...\n');
  
  try {
    await testLoadConfig();
    await testSaveConfig();
    testSimulationToggle();
    testConnectionTypeToggle();
    
    console.log('\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!');
  } catch (error) {
    console.error('\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
  (window as any).testUseEquipment = runAllTests;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —ç—Ç–æ Node.js
if (typeof process !== 'undefined') {
  runAllTests();
}

export { runAllTests };
