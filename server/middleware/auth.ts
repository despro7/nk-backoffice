import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import { JwtPayload } from '../types/auth.js';
import { AuthService } from '../services/authService.js';

// –†–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Request –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
declare global {
  namespace Express {
    interface Request {
      user?: JwtPayload;
    }
  }
}

export const authenticateToken = async (req: Request, res: Response, next: NextFunction) => {
  try {
    console.log('üîê [Middleware] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ cookies
    const { accessToken, refreshToken } = await AuthService.getTokenFromCookies(req);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç access token, –Ω–æ –µ—Å—Ç—å refresh token - –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å
    if (!accessToken && refreshToken) {
      console.log('üîÑ [Middleware] Access token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ refresh token...');
      
      try {
        const refreshResult = await AuthService.refreshToken({ refreshToken });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ cookies
        await AuthService.setAuthCookies(res, refreshResult.token, refreshResult.refreshToken);
        console.log('‚úÖ [Middleware] –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π access token');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π access token
        const secret = process.env.JWT_SECRET || 'fallback_secret';
        const decoded = jwt.verify(refreshResult.token, secret) as JwtPayload;
        
        req.user = decoded;
        console.log(`üë§ [Middleware] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ—Å–ª–µ refresh: ${decoded.email} (ID: ${decoded.userId})`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await AuthService.updateUserActivity(decoded.userId);
          console.log('‚úÖ [Middleware] –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        } catch (error) {
          console.error('‚ùå [Middleware] Failed to update user activity:', error);
        }
        
        return next();
      } catch (refreshError) {
        console.log('‚ùå [Middleware] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω:', refreshError);
        return res.status(401).json({ 
          message: '–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É.',
          code: 'REFRESH_FAILED',
          shouldRefresh: false
        });
      }
    }
    
    if (!accessToken) {
      console.log('‚ùå [Middleware] Access token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ cookies –∏ –Ω–µ—Ç refresh token');
      return res.status(401).json({ 
        message: '–ü–æ—Ç—Ä—ñ–±–µ–Ω —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É',
        code: 'NO_TOKEN'
      });
    }

    console.log('‚úÖ [Middleware] Access token –Ω–∞–π–¥–µ–Ω –≤ cookies, –ø—Ä–æ–≤–µ—Ä—è–µ–º...');
    
    const secret = process.env.JWT_SECRET || 'fallback_secret';
    const decoded = jwt.verify(accessToken, secret) as JwtPayload;
    
    console.log(`üë§ [Middleware] –¢–æ–∫–µ–Ω –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${decoded.email} (ID: ${decoded.userId})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
    if (decoded.tokenType !== 'access') {
      console.log('‚ùå [Middleware] –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞:', decoded.tokenType);
      return res.status(403).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞' });
    }
    
    req.user = decoded;
    console.log('‚úÖ [Middleware] –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      await AuthService.updateUserActivity(decoded.userId);
      console.log('‚úÖ [Middleware] –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå [Middleware] Failed to update user activity:', error);
    }
    
    next();
  } catch (error) {
    if (error instanceof jwt.TokenExpiredError) {
      console.log('‚ö†Ô∏è [Middleware] –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º shouldRefresh');
      return res.status(401).json({ 
        message: '–¢–æ–∫–µ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–≤',
        code: 'TOKEN_EXPIRED',
        shouldRefresh: true
      });
    }
    
    console.log('‚ùå [Middleware] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    return res.status(403).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω' });
  }
};

export const requireRole = (roles: string[]) => {
  return (req: Request, res: Response, next: NextFunction) => {
    if (!req.user) {
      return res.status(401).json({ message: '–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' });
    }

    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤' });
    }

    next();
  };
};
