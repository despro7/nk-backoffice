import { addToast } from "@heroui/react";
import { ToastSettingsTypes } from '../types/toast';

export interface ToastOptions {
	title: string;
	description?: string;
	hideIcon?: boolean;
	variant?: "flat" | "solid" | "bordered";
	color?: "default" | "primary" | "secondary" | "success" | "warning" | "danger";
	timeout?: number;
	shouldShowTimeoutProgress?: boolean;
	// Optional key from ToastSettingsTypes to gate showing this toast
	settingKey?: keyof ToastSettingsTypes;
}


export class ToastService {
	private static defaultOptions: Partial<ToastOptions> = {
		variant: "flat",
		color: "default",
		hideIcon: true,
		timeout: 10000,
		shouldShowTimeoutProgress: true
	};

	private static settings: ToastSettingsTypes | null = null;

	// –§–æ–ª–±–µ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
	private static readonly DEFAULT_TOAST_SETTINGS: ToastSettingsTypes = {
		authSuccess: true,
		authErrors: true,
		tokenRefresh: true,
		tokenExpiry: true,
		apiErrors: true,
		equipmentStatus: true,
		systemNotifications: true,
	};

		// –ì–ª–æ–±–∞–ª—å–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è toast-–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
		static async initialize(): Promise<boolean> {
		try {
			const response = await fetch('/api/settings/toast', {
				credentials: 'include'
			});
			if (response.ok) {
				this.settings = await response.json() as ToastSettingsTypes;
					return true;
			} else if (response.status === 401) {
				// –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ–æ–ª–±–µ–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
				console.log('üîß [ToastService] User not authenticated, applying default toast settings');
				this.settings = this.DEFAULT_TOAST_SETTINGS;
				return false;
			} else {
				console.error(`üîß [ToastService] Failed to load settings: ${response.status}, applying default settings`);
				this.settings = this.DEFAULT_TOAST_SETTINGS;
				return false;
			}
		} catch (error) {
			console.error('üîß [ToastService] Error loading toast settings:', error);
			this.settings = this.DEFAULT_TOAST_SETTINGS;
			return false;
		}
	}

	// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
	private static shouldShowToast(type: string): boolean {
		if (!this.settings) return true;
		const val = (this.settings as any)[type];
		if (typeof val === 'boolean') return val;
		// –Ø–∫—â–æ –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–∫–∞–∑—É—î–º–æ
		return true;
	}

	static show(options: ToastOptions) {
		const mergedOptions = { ...this.defaultOptions, ...options } as Required<Partial<ToastOptions>> & ToastOptions;

		// If caller provided a settingKey and the corresponding setting is disabled, don't show the toast
		if (mergedOptions.settingKey && !this.shouldShowToast(mergedOptions.settingKey as string)) {
			return;
		}

		addToast({
			title: mergedOptions.title,
			description: mergedOptions.description,
			variant: mergedOptions.variant,
			hideIcon: mergedOptions.hideIcon,
			color: mergedOptions.color,
			timeout: mergedOptions.timeout,
			shouldShowTimeoutProgress: mergedOptions.shouldShowTimeoutProgress,
		});
	}

	// –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
	static tokenGenerated(userEmail: string) {
		if (!this.shouldShowToast('tokenRefresh')) return;
		this.show({
			title: "üîë –ù–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ",
			description: `–¢–æ–∫–µ–Ω–∏ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userEmail}`,
			color: "success"
		});
	}

	static tokenRefreshed(userEmail: string) {
		if (!this.shouldShowToast('tokenRefresh')) return;
		this.show({
			title: "üîÑ –¢–æ–∫–µ–Ω–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ",
			description: `–°–µ—Å—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${userEmail}`,
			color: "success"
		});
	}

	static tokenRemoved(userEmail: string) {
		if (!this.shouldShowToast('authSuccess')) return;
		this.show({
			title: "üóëÔ∏è –¢–æ–∫–µ–Ω–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ",
			description: `–°–µ—Å—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userEmail}`,
			color: "default"
		});
	}

	static tokenExpired() {
		if (!this.shouldShowToast('tokenExpiry')) return;
		this.show({
			title: "‚è∞ –°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è",
			description: "–í–∞—à–∞ —Å–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...",
			color: "default"
		});
	}

	static loginSuccess(userEmail: string) {
		if (!this.shouldShowToast('authSuccess')) return;
		this.show({
			title: "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞",
			description: `–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${userEmail}`,
			color: "success"
		});
	}

	static logoutSuccess() {
		if (!this.shouldShowToast('authSuccess')) return;
		this.show({
			title: "üëã –í–∏—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ",
			description: "–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏",
			color: "default"
		});
	}

	static authError(message: string) {
		if (!this.shouldShowToast('authErrors')) return;
		this.show({
			title: "‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó",
			description: message,
			color: "danger"
		});
	}

	static refreshError() {
		if (!this.shouldShowToast('tokenRefresh')) return;
		this.show({
			title: "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó",
			description: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É.",
			color: "danger"
		});
	}

		// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (—Ç—ñ–ª—å–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ)
		static updateSettings(newSettings: ToastSettingsTypes) {
			this.settings = newSettings;
			console.log('üîß [ToastService] Toast-–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—ñ:', this.settings);
		}

		// –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—ñ toast-–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à—É)
		static getSettings(): ToastSettingsTypes | null {
			return this.settings;
		}

		// –û–Ω–æ–≤–ª—é—î toast-–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
		static async saveSettings(settings: ToastSettingsTypes): Promise<void> {
			console.log('Toast settings to save:', settings);
			const response = await fetch('/api/settings/toast', {
				method: 'PUT',
				headers: { 'Content-Type': 'application/json' },
				credentials: 'include',
				body: JSON.stringify(settings)
			});
			if (response.ok) {
				this.settings = settings;
				console.log('‚úÖ [ToastService] Toast-–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', settings);
			} else {
				throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ toast-–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è');
			}
		}

}