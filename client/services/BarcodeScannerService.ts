import { BarcodeData } from './EquipmentService';
import { LoggingService } from './LoggingService';

export interface ScannerConfig {
  autoConnect: boolean;
  timeout: number;
  continuousMode: boolean;
  scanTimeout?: number;
  minScanSpeed?: number;
  maxScanSpeed?: number;
  minBarcodeLength?: number;
}

export interface ScannerEvent {
  type: 'connected' | 'disconnected' | 'data' | 'error';
  data?: BarcodeData;
  error?: string;
}

export class BarcodeScannerService {
  private static instance: BarcodeScannerService | null = null;
  private isConnected: boolean = false;
  private config: ScannerConfig;
  private eventListeners: ((event: ScannerEvent) => void)[] = [];
  private keyboardListener: ((event: KeyboardEvent) => void) | null = null;
  private buffer: string = '';
  private lastScanTime: number = 0;
  private scanTimeout: number = 300;
  private endScanTimer: number | null = null;
  private lastScanTimestamp: number = 0;
  private lastScannedCode: string = '';
  private keyTimestamps: number[] = [];
  private minScanSpeed: number = 50; // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –º—ñ–∂ —Å–∏–º–≤–æ–ª–∞–º–∏ (–º—Å)
  private maxScanSpeed: number = 200; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –º—ñ–∂ —Å–∏–º–≤–æ–ª–∞–º–∏ (–º—Å)
  private minBarcodeLength: number = 5; // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –±–∞—Ä–∫–æ–¥—É

  // Singleton –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç–∞–Ω—Å–∞
  public static getInstance(): BarcodeScannerService {
    if (!BarcodeScannerService.instance) {
      BarcodeScannerService.instance = new BarcodeScannerService();
    }
    return BarcodeScannerService.instance;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ singleton (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  public static resetInstance(): void {
    if (BarcodeScannerService.instance) {
      BarcodeScannerService.instance.disconnect();
      BarcodeScannerService.instance = null;
    }
  }

  private constructor() {
    this.config = {
      autoConnect: true,
      timeout: 5000,
      continuousMode: true,
      scanTimeout: 300
    };

    if (this.config.scanTimeout !== undefined) {
      this.scanTimeout = this.config.scanTimeout;
    }
    if (this.config.minScanSpeed !== undefined) {
      this.minScanSpeed = this.config.minScanSpeed;
    }
    if (this.config.maxScanSpeed !== undefined) {
      this.maxScanSpeed = this.config.maxScanSpeed;
    }
    if (this.config.minBarcodeLength !== undefined) {
      this.minBarcodeLength = this.config.minBarcodeLength;
    }

    // –ü–µ—Ä–≤—ã–π –∫–æ–¥ –≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    this.lastScanTimestamp = Date.now() - 3000;

    if (this.config.autoConnect) {
      this.connect();
    }
  }

  public async connect(): Promise<boolean> {
    try {
      // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
      if (this.isConnected) {
        return true;
      }

      this.setupKeyboardListener();
      this.isConnected = true;
      this.emitEvent({ type: 'connected' });

      return true;
    } catch (error) {
      this.emitEvent({
        type: 'error',
        error: `Failed to connect: ${error}`
      });
      return false;
    }
  }

  public async disconnect(): Promise<void> {
    try {
      this.removeKeyboardListener();
      this.isConnected = false;
      this.buffer = '';

      if (this.endScanTimer) {
        clearTimeout(this.endScanTimer);
        this.endScanTimer = null;
      }

      this.emitEvent({ type: 'disconnected' });
    } catch (error) {
      console.error('Error disconnecting scanner:', error);
    }
  }

  private setupKeyboardListener(): void {
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π listener –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (this.keyboardListener) {
      document.removeEventListener('keydown', this.keyboardListener);
    }

    this.keyboardListener = (event: KeyboardEvent) => {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ keydown —Å–æ–±—ã—Ç–∏—è
      if (event.type !== 'keydown') {
        return;
      }

      // –Ü–≥–Ω–æ—Ä—É—î–º–æ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥—É
      const activeElement = document.activeElement;
      if (activeElement && (
        activeElement.tagName === 'INPUT' ||
        activeElement.tagName === 'TEXTAREA' ||
        (activeElement as HTMLElement).contentEditable === 'true'
      )) {
        return;
      }

      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
      if (event.ctrlKey || event.altKey || event.metaKey ||
          event.key === 'Shift' || event.key === 'Control' || event.key === 'Alt' ||
          event.key === 'Meta' || event.key === 'CapsLock' || event.key === 'NumLock' ||
          event.key === 'ScrollLock' || event.key === 'Pause' || event.key === 'Insert' ||
          event.key === 'Delete' || event.key === 'Home' || event.key === 'End' ||
          event.key === 'PageUp' || event.key === 'PageDown' || event.key.length > 1) {
        return;
      }

      // –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï: –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      if ((event as any)._barcodeProcessed) {
        if (process.env.NODE_ENV === 'development') {
          console.log(`üö´ [BarcodeScanner] Event already processed, ignoring: '${event.key}'`);
        }
        return;
      }
      (event as any)._barcodeProcessed = true;


      const currentTime = Date.now();
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —à–≤–∏–¥–∫–æ—Å—Ç—ñ
      this.keyTimestamps.push(currentTime);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–∏—à–µ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –Ω–∞—Ç–∏—Å–∫–∞–Ω—å
      if (this.keyTimestamps.length > 10) {
        this.keyTimestamps.shift();
      }

      // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä —è–∫—â–æ –≤—ñ–Ω —î
      if (this.endScanTimer) {
        clearTimeout(this.endScanTimer);
        this.endScanTimer = null;
      }

      // –î–æ–¥–∞—î–º–æ —Å–∏–º–≤–æ–ª –¥–æ –±—É—Ñ–µ—Ä–∞
      this.buffer += event.key;

      // –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ Enter/Tab - –æ–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–¥ –Ω–µ–≥–∞–π–Ω–æ
      if (event.key === 'Enter' || event.key === 'Tab' || event.key === 'Return') {
        this.processScannedCode();
        return;
      }

      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –∫–æ–¥—É
      // –Ø–∫—â–æ –ø—Ä–æ—Ç—è–≥–æ–º scanTimeout –Ω–µ –±—É–¥–µ –Ω–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ - –æ–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–¥
      this.endScanTimer = window.setTimeout(() => {
        if (this.buffer.length >= this.minBarcodeLength && this.buffer.trim()) {
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤–≤–æ–¥—É - –º–∞—î –±—É—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ—é –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞
          if (this.isLikelyBarcodeScanner()) {
            this.processScannedCode();
          } else {
            // –®–≤–∏–¥–∫—ñ—Å—Ç—å –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å–∫–∞–Ω–µ—Ä—É - –æ—á–∏—â–∞—î–º–æ –±—É—Ñ–µ—Ä
            this.buffer = '';
            this.keyTimestamps = [];
          }
        } else {
          // –Ø–∫—â–æ –∫–æ–¥ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π - –æ—á–∏—â–∞—î–º–æ –±—É—Ñ–µ—Ä
          this.buffer = '';
          this.keyTimestamps = [];
        }
      }, this.scanTimeout);

      this.lastScanTime = currentTime;
    };

    document.addEventListener('keydown', this.keyboardListener);
  }

  private removeKeyboardListener(): void {
    if (this.keyboardListener) {
      document.removeEventListener('keydown', this.keyboardListener);
      this.keyboardListener = null;
    }

    if (this.endScanTimer) {
      clearTimeout(this.endScanTimer);
      this.endScanTimer = null;
    }
  }

  private processScannedCode(): void {
    if (this.buffer.trim()) {
      let cleanCode = this.buffer.trim();
      if (cleanCode.endsWith('\n') || cleanCode.endsWith('\r')) {
        cleanCode = cleanCode.slice(0, -1).trim();
      }
      if (cleanCode.endsWith('\t')) {
        cleanCode = cleanCode.slice(0, -1).trim();
      }

      if (cleanCode.length >= 3 && cleanCode.length <= 50) {
        const currentTime = Date.now();

        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏: —è–∫—â–æ —Ç–æ–π —Å–∞–º–∏–π –∫–æ–¥ –ø—Ä–æ—Ç—è–≥–æ–º –æ—Å—Ç–∞–Ω–Ω—ñ—Ö scanTimeout * 2
        if (cleanCode === this.lastScannedCode && 
            currentTime - this.lastScanTimestamp < this.scanTimeout * 2) {
          this.buffer = '';
          return;
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–¥—ã
        if (cleanCode.length > 20) {
          this.buffer = '';
          return;
        }

        const barcodeData: BarcodeData = {
          code: cleanCode,
          type: this.detectBarcodeType(cleanCode),
          timestamp: new Date()
        };


        this.lastScanTimestamp = currentTime;
        this.lastScannedCode = cleanCode;

        this.emitEvent({
          type: 'data',
          data: barcodeData
        });
      } else {
        this.buffer = '';
      }

      this.buffer = '';
    }
  }

  private isLikelyBarcodeScanner(): boolean {
    if (this.keyTimestamps.length < 3) {
      return false;
    }

    // –û–±—á–∏—Å–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—é —à–≤–∏–¥–∫—ñ—Å—Ç—å –º—ñ–∂ —Å–∏–º–≤–æ–ª–∞–º–∏
    let totalInterval = 0;
    for (let i = 1; i < this.keyTimestamps.length; i++) {
      totalInterval += this.keyTimestamps[i] - this.keyTimestamps[i - 1];
    }
    const averageInterval = totalInterval / (this.keyTimestamps.length - 1);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å–∫–∞–Ω–µ—Ä—É –±–∞—Ä–∫–æ–¥—ñ–≤
    const isCorrectSpeed = averageInterval >= this.minScanSpeed && averageInterval <= this.maxScanSpeed;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ –æ–¥–Ω–∞–∫–æ–≤—ñ (—Å—Ç–∞–±—ñ–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å)
    let consistentSpeed = true;
    for (let i = 1; i < this.keyTimestamps.length; i++) {
      const interval = this.keyTimestamps[i] - this.keyTimestamps[i - 1];
      if (interval < this.minScanSpeed * 0.5 || interval > this.maxScanSpeed * 1.5) {
        consistentSpeed = false;
        break;
      }
    }

    LoggingService.equipmentLog(`üîç [BarcodeScanner] Speed analysis: avg=${averageInterval.toFixed(1)}ms, consistent=${consistentSpeed}, likely=${isCorrectSpeed && consistentSpeed}`);

    return isCorrectSpeed && consistentSpeed;
  }

  private detectBarcodeType(code: string): string {
    if (/^\d{13}$/.test(code)) return 'EAN-13';
    if (/^\d{8}$/.test(code)) return 'EAN-8';
    if (/^\d{12}$/.test(code)) return 'UPC-A';
    if (/^[A-Z0-9]+$/.test(code)) return 'Code-128';
    if (/^[A-Z0-9\-\.\/\+\s]+$/.test(code)) return 'Code-39';
    if (code.length > 20 && /[–∞-—è–ê-–Ø]/.test(code)) return 'QR-Code';
    return 'Unknown';
  }

  public simulateScan(code?: string): BarcodeData {
    const testCodes = [
      '1234567890123', '12345678', '123456789012',
      'ABC123456789', 'ABC-123.45', 'PROD-2024-001', 'BOX-001'
    ];

    const selectedCode = code || testCodes[Math.floor(Math.random() * testCodes.length)];

    const barcodeData: BarcodeData = {
      code: selectedCode,
      type: this.detectBarcodeType(selectedCode),
      timestamp: new Date()
    };

    this.emitEvent({
      type: 'data',
      data: barcodeData
    });

    return barcodeData;
  }

  public addEventListener(callback: (event: ScannerEvent) => void): void {
    this.eventListeners.push(callback);
  }

  public removeEventListener(callback: (event: ScannerEvent) => void): void {
    const index = this.eventListeners.indexOf(callback);
    if (index > -1) {
      this.eventListeners.splice(index, 1);
    }
  }

  private emitEvent(event: ScannerEvent): void {
    this.eventListeners.forEach(callback => {
      try {
        callback(event);
      } catch (error) {
        console.error('Error in scanner event listener:', error);
      }
    });
  }

  public isScannerConnected(): boolean {
    return this.isConnected;
  }

  public getCurrentBuffer(): string {
    return this.buffer;
  }

  public clearBuffer(): void {
    this.buffer = '';
  }

  public updateConfig(newConfig: Partial<ScannerConfig>): void {
    this.config = { ...this.config, ...newConfig };
    if (newConfig.scanTimeout !== undefined) {
      this.scanTimeout = newConfig.scanTimeout;
    }
    if (newConfig.minScanSpeed !== undefined) {
      this.minScanSpeed = newConfig.minScanSpeed;
    }
    if (newConfig.maxScanSpeed !== undefined) {
      this.maxScanSpeed = newConfig.maxScanSpeed;
    }
    if (newConfig.minBarcodeLength !== undefined) {
      this.minBarcodeLength = newConfig.minBarcodeLength;
    }
  }

  public getConfig(): ScannerConfig {
    return { ...this.config };
  }

  public async testConnection(): Promise<boolean> {
    try {
      const result = await this.connect();
      if (result) {
        window.setTimeout(() => {
          this.simulateScan();
        }, 100);

        window.setTimeout(() => {
          this.disconnect();
        }, 2000);
      }
      return result;
    } catch (error) {
      console.error('Scanner connection test failed:', error);
      return false;
    }
  }

  public getStats(): { totalScans: number; lastScan: Date | null } {
    return {
      totalScans: this.eventListeners.length > 0 ? 1 : 0,
      lastScan: this.lastScanTime > 0 ? new Date(this.lastScanTime) : null
    };
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–∞–Ω–µ—Ä–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  public resetScannerState(): void {
    this.buffer = '';
    this.lastScanTime = 0;
    this.lastScanTimestamp = Date.now() - 3000; // –ß—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π —Å–∫–∞–Ω –ø—Ä–æ—à–µ–ª
    this.lastScannedCode = '';
    this.keyTimestamps = [];

    if (this.endScanTimer) {
      clearTimeout(this.endScanTimer);
      this.endScanTimer = null;
    }
  }
}

export default BarcodeScannerService;