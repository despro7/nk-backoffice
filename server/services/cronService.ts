import * as cron from 'node-cron';
import { salesDriveService } from './salesDriveService.js';

export class CronService {
  private syncJob: cron.ScheduledTask | null = null;
  private isRunning = false;

  constructor() {
    console.log('üïê CronService initialized');
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
   */
  startOrderSync(): void {
    if (this.syncJob) {
      console.log('‚ö†Ô∏è Order sync cron job already running');
      return;
    }

    // –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π —á–∞—Å –≤ –º–∏–Ω—É—Ç–∞ 5 (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —á–∞—Å–∞)
    this.syncJob = cron.schedule('5 * * * *', async () => {
      if (this.isRunning) {
        console.log('‚è≥ Previous sync still running, skipping...');
        return;
      }

      this.isRunning = true;
      console.log('üïê Running scheduled order sync...');

      try {
        const startTime = Date.now();

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º)
        const syncPromise = salesDriveService.syncOrdersWithDatabase();
        const timeoutPromise = new Promise<never>((_, reject) => {
          setTimeout(() => reject(new Error('Sync timeout after 10 minutes')), 10 * 60 * 1000);
        });

        const result = await Promise.race([syncPromise, timeoutPromise]) as { success: boolean; synced: number; errors: number; details: any[] };
        const duration = Date.now() - startTime;

        console.log(`‚úÖ Scheduled sync completed in ${duration}ms: ${result.synced} synced, ${result.errors} errors`);

        if (result.errors > 0) {
          console.warn(`‚ö†Ô∏è Sync completed with ${result.errors} errors`);
        }
      } catch (error) {
        console.error('‚ùå Scheduled sync failed:', error);
      } finally {
        this.isRunning = false;
      }
    }, {
      timezone: "Europe/Kiev"
    });

    this.syncJob.start();
    console.log('‚úÖ Order sync cron job started (every hour at minute 5)');
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
   */
  stopOrderSync(): void {
    if (this.syncJob) {
      this.syncJob.stop();
      this.syncJob.destroy();
      this.syncJob = null;
      console.log('üõë Order sync cron job stopped');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å cron-–∑–∞–¥–∞—á
   */
  getStatus(): { isRunning: boolean; hasSyncJob: boolean } {
    return {
      isRunning: this.isRunning,
      hasSyncJob: this.syncJob !== null
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ cron-–∑–∞–¥–∞—á–∏
   */
  startAll(): void {
    this.startOrderSync();
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ cron-–∑–∞–¥–∞—á–∏
   */
  stopAll(): void {
    this.stopOrderSync();
  }
}

export const cronService = new CronService();
