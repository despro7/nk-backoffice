import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
const WAREHOUSE_IDS = {
  MAIN: '1',      // –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥ (–°–∫–ª–∞–¥ –ì–ü)
  KYIV: '2',      // –ö–∏–µ–≤—Å–∫–∏–π —Å–∫–ª–∞–¥
  SMALL: '3'      // –ú–∞–ª—ã–π —Å–∫–ª–∞–¥
} as const;

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
 */
async function updateProductStock(sku: string, sourceWarehouse: string, destinationWarehouse: string, quantity: number) {
  console.log(`üì¶ [Stock Update] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ ${sku}: ${sourceWarehouse} -> ${destinationWarehouse}, –∫–æ–ª-–≤–æ: ${quantity}`);

  const product = await prisma.product.findUnique({
    where: { sku }
  });

  if (!product) {
    throw new Error(`–¢–æ–≤–∞—Ä —Å SKU ${sku} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }

  // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
  const currentStock = product.stockBalanceByStock
    ? JSON.parse(product.stockBalanceByStock)
    : {};

  console.log(`üì¶ [Stock Update] –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${sku}:`, currentStock);
  console.log(`üì¶ [Stock Update] –ò—â–µ–º —Å–∫–ª–∞–¥—ã: source=${sourceWarehouse}, dest=${destinationWarehouse}`);

  const sourceStock = currentStock[sourceWarehouse] || 0;
  const destStock = currentStock[destinationWarehouse] || 0;

  console.log(`üì¶ [Stock Update] –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏: source=${sourceStock}, dest=${destStock}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤
  if (sourceStock < quantity) {
    throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞ ${sku} –Ω–∞ —Å–∫–ª–∞–¥–µ ${sourceWarehouse}. –î–æ—Å—Ç—É–ø–Ω–æ: ${sourceStock}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${quantity}`);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
  const newStock = {
    ...currentStock,
    [sourceWarehouse]: Math.max(0, sourceStock - quantity),
    [destinationWarehouse]: destStock + quantity
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
  await prisma.product.update({
    where: { sku },
    data: {
      stockBalanceByStock: JSON.stringify(newStock),
      updatedAt: new Date()
    }
  });

  console.log(`‚úÖ [Stock Update] –û—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${sourceWarehouse}: ${sourceStock} -> ${newStock[sourceWarehouse]}, ${destinationWarehouse}: ${destStock} -> ${newStock[destinationWarehouse]}`);

  return {
    previousStock: currentStock,
    newStock,
    sourceBalance: sourceStock,
    destBalance: destStock
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
 */
async function createStockMovementHistory(
  sku: string,
  sourceWarehouse: string,
  destinationWarehouse: string,
  quantity: number,
  boxQuantity: number,
  portionQuantity: number,
  batchNumber: string,
  movementId: number,
  userId: number,
  stockUpdateResult: any
) {
  console.log(`üìä [Movement History] –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è ${sku}`);

  // –°–ø–∏—Å—ã–≤–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
  await prisma.stockMovementHistory.create({
    data: {
      productSku: sku,
      warehouse: sourceWarehouse,
      movementType: 'transfer_out',
      quantity: boxQuantity,
      quantityType: 'box',
      batchNumber: batchNumber || null,
      referenceId: movementId.toString(),
      referenceType: 'warehouse_movement',
      previousBalance: stockUpdateResult.sourceBalance,
      newBalance: stockUpdateResult.newStock[sourceWarehouse],
      notes: `–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ ${destinationWarehouse}`,
      createdBy: userId
    }
  });

  // –ü—Ä–∏—Ö–æ–¥—É–µ–º –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–∫–ª–∞–¥
  await prisma.stockMovementHistory.create({
    data: {
      productSku: sku,
      warehouse: destinationWarehouse,
      movementType: 'transfer_in',
      quantity: boxQuantity,
      quantityType: 'box',
      batchNumber: batchNumber || null,
      referenceId: movementId.toString(),
      referenceType: 'warehouse_movement',
      previousBalance: stockUpdateResult.destBalance,
      newBalance: stockUpdateResult.newStock[destinationWarehouse],
      notes: `–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–∑ ${sourceWarehouse}`,
      createdBy: userId
    }
  });

  console.log(`‚úÖ [Movement History] –ó–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è ${sku}`);
}

async function testWarehouseAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Warehouse API...\n');

  try {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.stockMovementHistory.deleteMany({
      where: {
        productSku: { startsWith: 'TEST-SKU-' }
      }
    });
    await prisma.warehouseMovement.deleteMany({
      where: {
        internalDocNumber: { startsWith: 'WM-TEST-' }
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');

    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    console.log('\n1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è...');
    const timestamp = Date.now();
    const movement = await prisma.warehouseMovement.create({
      data: {
        internalDocNumber: `WM-TEST-${timestamp}`,
        items: JSON.stringify([
          {
            sku: 'TEST-SKU-001',
            boxQuantity: 5.0,
            portionQuantity: 120,
            batchNumber: 'BATCH-001'
          },
          {
            sku: 'TEST-SKU-002',
            boxQuantity: 3.0,
            portionQuantity: 72,
            batchNumber: 'BATCH-002'
          }
        ]),
        sourceWarehouse: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥',
        destinationWarehouse: '–ú–∞–ª—ã–π —Å–∫–ª–∞–¥',
        notes: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ',
        createdBy: 1
      }
    });
    console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', movement.id);

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤...');
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
    await prisma.stockMovementHistory.create({
      data: {
        productSku: 'TEST-SKU-001',
        warehouse: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥',
        movementType: 'transfer_out',
        quantity: 5.0,
        quantityType: 'box',
        batchNumber: 'BATCH-001',
        referenceId: movement.id.toString(),
        referenceType: 'warehouse_movement',
        previousBalance: 100,
        newBalance: 95,
        notes: '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –ú–∞–ª—ã–π —Å–∫–ª–∞–¥',
        createdBy: 1
      }
    });

    // –ü—Ä–∏—Ö–æ–¥—É–µ–º –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–∫–ª–∞–¥
    await prisma.stockMovementHistory.create({
      data: {
        productSku: 'TEST-SKU-001',
        warehouse: '–ú–∞–ª—ã–π —Å–∫–ª–∞–¥',
        movementType: 'transfer_in',
        quantity: 5.0,
        quantityType: 'box',
        batchNumber: 'BATCH-001',
        referenceId: movement.id.toString(),
        referenceType: 'warehouse_movement',
        previousBalance: 20,
        newBalance: 25,
        notes: '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–∑ –û—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞',
        createdBy: 1
      }
    });

    console.log('‚úÖ –ó–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');

    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
    console.log('\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤...');
    const currentStock = await prisma.stockMovementHistory.groupBy({
      by: ['productSku', 'warehouse'],
      _max: {
        movementDate: true
      }
    });

    console.log('üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ SKU –∏ —Å–∫–ª–∞–¥—É:', currentStock.length, '–∑–∞–ø–∏—Å–µ–π');

    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ SKU –∏ —Å–∫–ª–∞–¥–∞
    console.log('\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π...');
    const stockData = await Promise.all(
      currentStock.map(async (item) => {
        const lastRecord = await prisma.stockMovementHistory.findFirst({
          where: {
            productSku: item.productSku,
            warehouse: item.warehouse,
            movementDate: item._max.movementDate
          }
        });
        return lastRecord;
      })
    );

    console.log('üìã –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏:');
    stockData.filter(Boolean).forEach(record => {
      console.log(`   ${record?.productSku} –Ω–∞ ${record?.warehouse}: ${record?.newBalance} ${record?.quantityType}`);
    });

    // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ SKU
    console.log('\n5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è TEST-SKU-001...');
    const history = await prisma.stockMovementHistory.findMany({
      where: {
        productSku: 'TEST-SKU-001'
      },
      orderBy: {
        movementDate: 'asc'
      }
    });

    console.log('üìà –ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è:');
    history.forEach(record => {
      console.log(`   ${record.movementDate.toISOString()} - ${record.warehouse}: ${record.previousBalance} ‚Üí ${record.newBalance} (${record.movementType})`);
    });

    // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    console.log('\n6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
    const updatedMovement = await prisma.warehouseMovement.update({
      where: { id: movement.id },
      data: {
        status: 'sent',
        sentToDilovodAt: new Date()
      }
    });
    console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω, —Å—Ç–∞—Ç—É—Å:', updatedMovement.status);

    // 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    console.log('\n7. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
    const allMovements = await prisma.warehouseMovement.findMany({
      orderBy: { draftCreatedAt: 'desc' }
    });
    console.log('üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', allMovements.length);

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

    // 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
    console.log('\n8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
    const testProduct = await prisma.product.upsert({
      where: { sku: 'TEST-STOCK-001' },
      update: {
        name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤',
        stockBalanceByStock: JSON.stringify({
          "1": 100, // –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥
          "2": 0,   // –ö–∏–µ–≤—Å–∫–∏–π —Å–∫–ª–∞–¥
          "3": 0    // –ú–∞–ª—ã–π —Å–∫–ª–∞–¥
        })
      },
      create: {
        sku: 'TEST-STOCK-001',
        name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤',
        stockBalanceByStock: JSON.stringify({
          "1": 100, // –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥
          "2": 0,   // –ö–∏–µ–≤—Å–∫–∏–π —Å–∫–ª–∞–¥
          "3": 0    // –ú–∞–ª—ã–π —Å–∫–ª–∞–¥
        })
      }
    });

    console.log('üì¶ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä:', testProduct.sku);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ API)
    console.log('üîÑ [Test] –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateProductStock –Ω–∞–ø—Ä—è–º—É—é...');

    try {
      const stockUpdateResult = await updateProductStock(
        'TEST-STOCK-001',
        '1', // sourceWarehouse
        '3', // destinationWarehouse
        10  // quantity
      );

      console.log('‚úÖ [Test] –§—É–Ω–∫—Ü–∏—è updateProductStock –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log('üìä [Test] –†–µ–∑—É–ª—å—Ç–∞—Ç:', stockUpdateResult);

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏
      await createStockMovementHistory(
        'TEST-STOCK-001',
        '1',
        '3',
        10,
        10,
        240,
        'STOCK-BATCH-001',
        999, // dummy movementId
        1,
        stockUpdateResult
      );

      console.log('‚úÖ [Test] –ó–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');

    } catch (error) {
      console.error('üö® [Test] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    }

    // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API —ç–º—É–ª—è—Ü–∏—é
    console.log('üîÑ [Test] –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ API —ç–º—É–ª—è—Ü–∏—é...');

    const stockMovement = await prisma.warehouseMovement.create({
      data: {
        internalDocNumber: `STOCK-TEST-${Date.now()}`,
        items: JSON.stringify([
          {
            sku: 'TEST-STOCK-001',
            boxQuantity: 5.0,
            portionQuantity: 120,
            batchNumber: 'STOCK-BATCH-002'
          }
        ]),
        sourceWarehouse: '1', // –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥
        destinationWarehouse: '3', // –ú–∞–ª—ã–π —Å–∫–ª–∞–¥
        notes: '–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —á–µ—Ä–µ–∑ API',
        createdBy: 1
      }
    });

    console.log('üìã –°–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:', stockMovement.id);

    // –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º API –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    console.log('üîÑ [Test] –í—ã–∑—ã–≤–∞–µ–º API –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤...');

    const items = JSON.parse(stockMovement.items as string) as any[];
    for (const item of items) {
      console.log(`üì¶ [Test] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ ${item.sku}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.boxQuantity} —è—â–∏–∫–æ–≤`);

      try {
        const stockUpdateResult = await updateProductStock(
          item.sku,
          stockMovement.sourceWarehouse,
          stockMovement.destinationWarehouse,
          item.boxQuantity
        );

        await createStockMovementHistory(
          item.sku,
          stockMovement.sourceWarehouse,
          stockMovement.destinationWarehouse,
          item.boxQuantity,
          item.boxQuantity,
          item.portionQuantity,
          item.batchNumber,
          stockMovement.id,
          1,
          stockUpdateResult
        );

        console.log(`‚úÖ [Test] –¢–æ–≤–∞—Ä ${item.sku} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
      } catch (itemError) {
        console.error(`üö® [Test] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${item.sku}:`, itemError);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
    const updatedProduct = await prisma.product.findUnique({
      where: { sku: 'TEST-STOCK-001' }
    });

    if (updatedProduct?.stockBalanceByStock) {
      const stockBalances = JSON.parse(updatedProduct.stockBalanceByStock);
      console.log('üìä –û—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:');
      console.log(`   –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥ (1): ${stockBalances["1"]} (–æ–∂–∏–¥–∞–ª–æ—Å—å: 85)`);
      console.log(`   –ú–∞–ª—ã–π —Å–∫–ª–∞–¥ (3): ${stockBalances["3"]} (–æ–∂–∏–¥–∞–ª–æ—Å—å: 15)`);

      // –ü–æ—Å–ª–µ –¥–≤—É—Ö –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π: 100 - 10 - 5 = 85 (–æ—Å–Ω–æ–≤–Ω–æ–π), 0 + 10 + 5 = 15 (–º–∞–ª—ã–π)
      if (stockBalances["1"] === 85 && stockBalances["3"] === 15) {
        console.log('‚úÖ –û—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      } else {
        console.log('‚ùå –û—Å—Ç–∞—Ç–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
    const historyRecords = await prisma.stockMovementHistory.findMany({
      where: {
        referenceId: stockMovement.id.toString(),
        referenceType: 'warehouse_movement'
      }
    });

    console.log(`üìà –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${historyRecords.length}`);
    historyRecords.forEach(record => {
      console.log(`   ${record.warehouse}: ${record.previousBalance} ‚Üí ${record.newBalance} (${record.movementType})`);
    });

    // 9. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\n9. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.stockMovementHistory.deleteMany({
      where: {
        OR: [
          { productSku: { startsWith: 'TEST-SKU-' } },
          { productSku: { startsWith: 'TEST-STOCK-' } }
        ]
      }
    });
    await prisma.warehouseMovement.deleteMany({
      where: {
        OR: [
          { internalDocNumber: { startsWith: 'WM-TEST-' } },
          { internalDocNumber: { startsWith: 'STOCK-TEST-' } }
        ]
      }
    });
    await prisma.product.deleteMany({
      where: {
        sku: { startsWith: 'TEST-STOCK-' }
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testWarehouseAPI();
