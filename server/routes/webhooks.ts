import { Router, Request, Response } from 'express';
import { salesDriveService } from '../services/salesDriveService.js';
import { orderDatabaseService } from '../services/orderDatabaseService.js';

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é –¥–ª—è webhook payload
interface SalesDriveWebhookPayload {
  info: {
    webhookType: string;
    webhookEvent: string;
    account: string;
  };
  data: {
    id: number;
    externalId?: string;
    statusId?: number;
    [key: string]: any;
  };
  meta?: any;
}

const router = Router();

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è webhook –∑–∞–ø—Ä–æ—Å–æ–≤
router.use('/salesdrive/order-update', (req, res, next) => {
  console.log('üîç Webhook middleware - Request details:');
  console.log(`   Method: ${req.method}`);
  console.log(`   URL: ${req.url}`);
  console.log(`   Content-Type: ${req.headers['content-type']}`);
  console.log(`   User-Agent: ${req.headers['user-agent']}`);
  console.log(`   Origin: ${req.headers['origin']}`);
  console.log(`   Body exists: ${!!req.body}`);
  console.log(`   Body keys: ${req.body ? Object.keys(req.body).join(', ') : 'none'}`);

  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
  next();
});

/**
 * POST /api/webhooks/salesdrive/order-update
 * WebHook –æ—Ç SalesDrive –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
 */
router.post('/salesdrive/order-update', async (req: Request, res: Response) => {
  try {
    console.log('üîî WebHook received - Raw body:', JSON.stringify(req.body, null, 2));

    const { data } = req.body;
    const orderId = data?.id?.toString();
    const externalId = data?.externalId;

    console.log(`üîî WebHook received: status_change for order ${externalId || orderId}`);
    console.log(`   - data.id: ${data?.id}`);
    console.log(`   - data.externalId: ${data?.externalId}`);
    console.log(`   - orderId: ${orderId}`);
    console.log(`   - externalId: ${externalId}`);

    if (!orderId && !externalId) {
      console.log('‚ùå Missing order identifier - returning 400');
      return res.status(400).json({
        success: false,
        error: 'Missing order identifier'
      });
    }

    const orderIdentifier = externalId || orderId;

    // For status_change events, we always update the order
    if (req.body.info?.webhookEvent === 'status_change') {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑
      try {
        console.log(`üîç Looking for existing order in database first...`);

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑ –≤ –Ω–∞—à–µ–π –ë–î
        let existingOrder = await orderDatabaseService.getOrderByExternalId(orderIdentifier);
        let orderDetails = null;

        if (existingOrder) {
          console.log(`‚úÖ Found existing order ${existingOrder.externalId} in database`);
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∫–∞–∫ orderDetails
          // existingOrder.items —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –≤ getOrderByExternalId
          orderDetails = {
            id: existingOrder.id,
            orderNumber: existingOrder.externalId,
            status: existingOrder.status,
            statusText: existingOrder.statusText,
            items: existingOrder.items, // –£–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –≤ getOrderByExternalId
            customerName: existingOrder.customerName,
            customerPhone: existingOrder.customerPhone,
            deliveryAddress: existingOrder.deliveryAddress,
            totalPrice: existingOrder.totalPrice,
            orderDate: existingOrder.orderDate,
            shippingMethod: existingOrder.shippingMethod,
            paymentMethod: existingOrder.paymentMethod,
            cityName: existingOrder.cityName,
            provider: existingOrder.provider,
            pricinaZnizki: existingOrder.pricinaZnizki,
            sajt: existingOrder.sajt,
            ttn: existingOrder.ttn,
            quantity: existingOrder.quantity
          };
        } else {
          console.log(`‚ùå Order ${orderIdentifier} not found in database, fetching from SalesDrive...`);
          // –ï—Å–ª–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç –≤ –ë–î, –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑ SalesDrive
          orderDetails = await salesDriveService.getOrderDetails(orderIdentifier);
        }

        if (orderDetails) {
          console.log(`üìã Order details received:`);
          console.log(`   - orderIdentifier (from webhook): ${orderIdentifier}`);
          console.log(`   - orderDetails.orderNumber: ${orderDetails.orderNumber}`);
          console.log(`   - orderDetails.id: ${orderDetails.id}`);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –ë–î (—É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—ã—à–µ, –Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
          if (!existingOrder) {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ orderIdentifier, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ orderNumber –∏–∑ –¥–µ—Ç–∞–ª–µ–π
            existingOrder = await orderDatabaseService.getOrderByExternalId(orderDetails.orderNumber);

            if (!existingOrder && orderDetails.id) {
              // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ orderNumber, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ id
              existingOrder = await orderDatabaseService.getOrderByExternalId(orderDetails.id);
            }
          }

          console.log(`   - existingOrder found: ${!!existingOrder}`);
          console.log(`   - orderDetails.orderNumber: ${orderDetails.orderNumber}`);
          console.log(`   - orderDetails.id: ${orderDetails.id}`);

          if (existingOrder) {
            console.log(`üîÑ Updating existing order ${existingOrder.externalId}`);

            // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π rawData –æ–±—ä–µ–∫—Ç
            const safeRawData = {
              webhookType: req.body.info?.webhookType,
              webhookEvent: req.body.info?.webhookEvent,
              account: req.body.info?.account,
              data: {
                id: req.body.data?.id,
                externalId: req.body.data?.externalId,
                statusId: req.body.data?.statusId,
                orderTime: req.body.data?.orderTime,
                paymentAmount: req.body.data?.paymentAmount,
                shipping_address: req.body.data?.shipping_address,
                contacts: req.body.data?.contacts,
                products: req.body.data?.products
              }
            };

            // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ SalesDrive –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É
            // –í –ë–î —Å—Ç–∞—Ç—É—Å—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ '1', '2', '3' –∏ —Ç.–¥.
            const statusMapping: { [key: number]: string } = {
              1: '1', // –ù–æ–≤—ñ
              2: '2', // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ
              3: '3', // –ù–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É
              4: '4', // –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
              5: '5', // –ü—Ä–æ–¥–∞–∂
              6: '6', // –í—ñ–¥–º–æ–≤–∞
              7: '7', // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
              8: '8'  // –í–∏–¥–∞–ª–µ–Ω–∏–π
            };

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
            const getStatusText = (status: string): string => {
              const statusTexts: { [key: string]: string } = {
                '1': '–ù–æ–≤—ñ',
                '2': '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ',
                '3': '–ù–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É',
                '4': '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ',
                '5': '–ü—Ä–æ–¥–∞–∂',
                '6': '–í—ñ–¥–º–æ–≤–∞',
                '7': '–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è',
                '8': '–í–∏–¥–∞–ª–µ–Ω–∏–π'
              };
              return statusTexts[status] || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å';
            };

            const webhookData = req.body.data;
            const newStatus = statusMapping[webhookData.statusId] || orderDetails.status;

            console.log(`üîÑ Status mapping: webhook statusId=${webhookData.statusId} -> status='${newStatus}'`);

            const updateData = {
              status: newStatus, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ webhook
              statusText: getStatusText(newStatus),
              items: orderDetails.items,
              rawData: safeRawData, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ orderDetails
              customerName: orderDetails.customerName,
              customerPhone: orderDetails.customerPhone,
              deliveryAddress: orderDetails.deliveryAddress,
              totalPrice: orderDetails.totalPrice,
              orderDate: orderDetails.orderDate,
              shippingMethod: orderDetails.shippingMethod,
              paymentMethod: orderDetails.paymentMethod,
              cityName: orderDetails.cityName,
              provider: orderDetails.provider,
              pricinaZnizki: orderDetails.pricinaZnizki,
              sajt: orderDetails.sajt,
              // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ webhook payload –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
              ttn: orderDetails.ttn,
              quantity: orderDetails.quantity
            };

            console.log(`üìä Update data:`, {
              oldStatus: existingOrder.status,
              newStatus: updateData.status,
              statusText: updateData.statusText,
              itemsType: typeof updateData.items,
              rawDataType: typeof updateData.rawData,
              itemsIsArray: Array.isArray(updateData.items),
              hasItems: !!updateData.items,
              hasRawData: !!updateData.rawData,
              customerName: updateData.customerName,
              totalPrice: updateData.totalPrice
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º rawData –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π
            if (updateData.rawData) {
              try {
                const testSerialize = JSON.stringify(updateData.rawData);
                console.log(`‚úÖ RawData serialization test passed, length: ${testSerialize.length}`);
              } catch (serializeError) {
                console.error(`‚ùå RawData serialization failed:`, serializeError);
                console.log(`   RawData type: ${typeof updateData.rawData}`);
                console.log(`   RawData keys:`, Object.keys(updateData.rawData || {}));
                // –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º rawData –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è
                updateData.rawData = null;
              }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º items –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π
            if (updateData.items) {
              try {
                const testSerialize = JSON.stringify(updateData.items);
                console.log(`‚úÖ Items serialization test passed, length: ${testSerialize.length}`);
              } catch (serializeError) {
                console.error(`‚ùå Items serialization failed:`, serializeError);
                console.log(`   Items type: ${typeof updateData.items}`);
                console.log(`   Items isArray: ${Array.isArray(updateData.items)}`);
                // –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º items –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è
                updateData.items = null;
              }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
            await orderDatabaseService.updateOrder(existingOrder.externalId, updateData);

            console.log(`‚úÖ Order ${orderDetails.orderNumber} updated via webhook`);
            console.log(`   Status changed: ${existingOrder.status} -> ${newStatus}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            if (existingOrder.status !== newStatus) {
              console.log(`üéâ Status successfully updated to: ${newStatus}`);
            } else {
              console.log(`‚ÑπÔ∏è Status remained the same: ${newStatus}`);
            }
          } else {
            console.log(`üÜï Creating new order ${orderDetails.orderNumber}`);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ webhook
            const webhookData = req.body.data;
            // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π rawData –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
            const safeRawDataForCreate = {
              webhookType: req.body.info?.webhookType,
              webhookEvent: req.body.info?.webhookEvent,
              account: req.body.info?.account,
              data: {
                id: webhookData.id,
                externalId: webhookData.externalId,
                statusId: webhookData.statusId,
                orderTime: webhookData.orderTime,
                paymentAmount: webhookData.paymentAmount,
                shipping_address: webhookData.shipping_address,
                contacts: webhookData.contacts,
                products: webhookData.products,
                ord_novaposhta: webhookData.ord_novaposhta
              }
            };

            await orderDatabaseService.createOrder({
              id: webhookData.id?.toString() || orderDetails.id?.toString(),
              externalId: webhookData.externalId || orderDetails.orderNumber,
              orderNumber: webhookData.externalId || orderDetails.orderNumber,
              ttn: webhookData.ord_novaposhta?.EN || orderDetails.ttn,
              quantity: webhookData.kilTPorcij || orderDetails.quantity,
              status: orderDetails.status,
              statusText: orderDetails.statusText,
              items: orderDetails.items,
              rawData: safeRawDataForCreate, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—ä–µ–∫—Ç
              customerName: webhookData.contacts?.[0]?.fName + ' ' + webhookData.contacts?.[0]?.lName,
              customerPhone: webhookData.contacts?.[0]?.phone?.[0],
              deliveryAddress: webhookData.shipping_address,
              totalPrice: webhookData.paymentAmount,
              orderDate: webhookData.orderTime,
              shippingMethod: webhookData.shipping_method?.toString(),
              paymentMethod: webhookData.payment_method?.toString(),
              cityName: webhookData.ord_novaposhta?.cityName,
              provider: 'SalesDrive',
              pricinaZnizki: webhookData.pricinaZnizki,
              sajt: webhookData.sajt
            });
            
            console.log(`‚úÖ Order ${orderDetails.orderNumber} created via webhook`);
          }
        } else {
          console.warn(`‚ö†Ô∏è Order ${orderIdentifier} not found in SalesDrive`);
        }
      } catch (error) {
        console.error(`‚ùå Error processing webhook for order ${orderIdentifier}:`, error);
        console.error(`   Error details:`, {
          message: error.message,
          stack: error.stack,
          name: error.name
        });
        return res.status(500).json({
          success: false,
          error: 'Failed to process order update',
          details: error.message
        });
      }
    } else {
      console.log(`‚ö†Ô∏è Unsupported webhook event: ${req.body.info?.webhookEvent}`);
    }
    
    res.json({
      success: true,
      message: `Webhook processed: ${req.body.info?.webhookEvent} for order ${orderIdentifier}`,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Webhook processing error:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Internal server error' 
    });
  }
});

/**
 * POST /api/webhooks/salesdrive/test
 * –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook
 */
router.post('/salesdrive/test', (req, res) => {
  console.log('üß™ Test webhook received:', JSON.stringify(req.body, null, 2));
  res.json({
    success: true,
    message: 'Test webhook received',
    received: req.body,
    timestamp: new Date().toISOString()
  });
});

/**
 * GET /api/webhooks/salesdrive/health
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ webhook endpoint
 */
router.get('/salesdrive/health', (req, res) => {
  res.json({
    success: true,
    message: 'SalesDrive webhook endpoint is healthy',
    timestamp: new Date().toISOString()
  });
});

export default router;
