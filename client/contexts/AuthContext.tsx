import React, { createContext, useContext, useState, useEffect, ReactNode, useRef } from 'react';
import { UserType, LoginRequest, RegisterRequest } from '../../server/types/auth';
import { useEquipment, EquipmentState, EquipmentActions } from '../hooks/useEquipment';
import { LoggingService } from '../services/LoggingService';
import { formatDuration } from '@/lib/formatUtils';
import { ToastService } from '@/services/ToastService';

// –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Ç–∏–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —á–∞—Å –∂–∏—Ç—Ç—è —Ç–æ–∫–µ–Ω–∞
interface UserWithExpiry extends Omit<UserType, 'password' | 'refreshToken' | 'refreshTokenExpiresAt'> {
  expiresIn?: number; // –ß–∞—Å –∂–∏—Ç—Ç—è access —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
}

interface AuthContextType {
  user: UserWithExpiry | null;
  isLoading: boolean;
  login: (credentials: LoginRequest) => Promise<boolean>;
  register: (userData: RegisterRequest) => Promise<boolean>;
  logout: () => Promise<void>;
  forceLogout: () => void;
  refreshToken: () => Promise<boolean>;
  checkAuthStatus: () => Promise<void>;
  equipmentState: EquipmentState;
  equipmentActions: EquipmentActions;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// –•—É–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Å—Ç–∞–Ω—É –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è —á–µ—Ä–µ–∑ AuthContext
export const useEquipmentFromAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useEquipmentFromAuth must be used within an AuthProvider');
  }
  const { equipmentState, equipmentActions } = context;
  return [equipmentState, equipmentActions] as const;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<UserWithExpiry | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const refreshTimeoutRef = useRef<number | null>(null);

  // –ö–µ—à –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (5 —Ö–≤–∏–ª–∏–Ω)
  const profileCacheRef = useRef<{ data: UserWithExpiry | null; timestamp: number } | null>(null);
  const PROFILE_CACHE_DURATION = 5 * 60 * 1000; // 5 —Ö–≤–∏–ª–∏–Ω
  

  // –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
  const [equipmentState, equipmentActions] = useEquipment();
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Å—Ç–∞–Ω –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
  const isEquipmentReady = equipmentState && equipmentActions;

  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ –ë–î
  const [authSettings, setAuthSettings] = useState<any>(null);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  const loadAuthSettings = async () => {
    try {
      LoggingService.authLog('üîÑ [AuthContext] –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...');
      const response = await fetch('/api/auth/settings', {
        credentials: 'include'
      });

      // LoggingService.authLog(`üì° [AuthContext] –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: ${response.status} ${response.statusText}`);

      if (response.ok) {
        const settings = await response.json();
        LoggingService.authLog('‚úÖ [AuthContext] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', settings);
        setAuthSettings(settings);
      } else {
        LoggingService.authLog(`‚ö†Ô∏è [AuthContext] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: ${response.status}`);
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error);
      LoggingService.authLog('‚ùå [AuthContext] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error);
    }
  };

  // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ expiresIn —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  const getRefreshDelay = (expiresIn?: number): number => {
    if (expiresIn) {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –ë–î –∞–±–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      const thresholdMinutes = authSettings?.clientRefreshThresholdMinutes || 10;
      const isEnabled = authSettings?.clientAutoRefreshEnabled !== false;
      
      if (!isEnabled) {
        return 24 * 60 * 60 * 1000; // 24 –≥–æ–¥–∏–Ω–∏ —è–∫—â–æ –≤–∏–º–∫–Ω–µ–Ω–æ
      }
      
      return Math.max((expiresIn * 1000) - (thresholdMinutes * 60 * 1000), 60000);
    }
    return 50 * 60 * 1000; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 50 —Ö–≤–∏–ª–∏–Ω
  };

  // –§—É–Ω–∫—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ (–≤–∏–π–Ω—è—Ç–∞ –æ–∫—Ä–µ–º–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è)
  const scheduleTokenRefresh = (expiresIn?: number) => {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —è–∫—â–æ authSettings —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
    const fallbackSettings = {
      clientRefreshThresholdMinutes: 10,
      clientAutoRefreshEnabled: true
    };
    
    const currentSettings = authSettings || fallbackSettings;
    const isEnabled = currentSettings.clientAutoRefreshEnabled !== false;
    
    // LoggingService.authLog('üîß [AuthContext] scheduleTokenRefresh', { expiresIn, currentSettings, isEnabled });

    if (isEnabled) {
      if (refreshTimeoutRef.current) {
        clearTimeout(refreshTimeoutRef.current);
      }
      
      const refreshDelay = getRefreshDelay(expiresIn);
      LoggingService.authLog(`‚è∞ [AuthContext] –ü–ª–∞–Ω—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ ${formatDuration(refreshDelay, { unit: 'ms' })}`);
      
      refreshTimeoutRef.current = window.setTimeout(() => {
        LoggingService.authLog('üîÑ [AuthContext] –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞');
        refreshToken(); 
      }, refreshDelay);
    } else {
      LoggingService.authLog('‚ö†Ô∏è [AuthContext] –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –≤–∏–º–∫–Ω–µ–Ω–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö');
    }
  };

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø—ñ–¥ —á–∞—Å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  useEffect(() => {
    loadAuthSettings();
  }, []);

  // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–Ω–µ –ø—Ä–∏ –ø–µ—Ä—à—ñ–π –∑–∞–≥—Ä—É–∑—Ü—ñ)
  const prevUserIdRef = useRef<number | undefined>(undefined);
  useEffect(() => {
    if (user && prevUserIdRef.current !== undefined && prevUserIdRef.current !== user.id) {
      // –†–µ–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
      LoggingService.authLog('üîÑ [AuthContext] –ó–º—ñ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏—è–≤–ª–µ–Ω–∞, –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è...');
      loadAuthSettings();
    }
    prevUserIdRef.current = user?.id;
  }, [user?.id]);

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—Ä–∏ –∑–∞–≥—Ä—É–∑—Ü—ñ –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é
  useEffect(() => {
    const timer = setTimeout(() => {
      // if (process.env.NODE_ENV === 'development') {
        // log('üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—Ä–∏ –∑–∞–≥—Ä—É–∑—Ü—ñ');
      // }
      checkAuthStatus();
    }, 100); // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–∏–º –∑–∞–ø–∏—Ç–∞–º

    return () => clearTimeout(timer);
  }, []);

  // –†–æ–∑—É–º–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ - –ø–ª–∞–Ω—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —Ä–∞–∑—ñ –∑–º—ñ–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  const prevTokenRefreshKey = useRef<string>('');
  useEffect(() => {
    if (user) {
      // –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
      const currentKey = `${user.id}-${user.expiresIn}-${authSettings?.clientAutoRefreshEnabled}-${authSettings?.middlewareAutoRefreshEnabled}`;
      
      if (prevTokenRefreshKey.current !== currentKey) {
        if (!authSettings) {
          // –Ø–∫—â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –ø–ª–∞–Ω—É—î–º–æ –∑ fallback –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
          LoggingService.authLog('üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π (–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ...) \nüîÑ [Fallback] –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞ 10 —Ö–≤–∏–ª–∏–Ω –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è');
        } else {
          // –Ø–∫—â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –ø–ª–∞–Ω—É—î–º–æ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
          LoggingService.authLog(`üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ! 
üîÑ clientAutoRefresh: ${authSettings.clientAutoRefreshEnabled ? 'ON (–∑–∞ ' + authSettings.clientRefreshThresholdMinutes + ' —Ö–≤–∏–ª–∏–Ω –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è)' : 'OFF'}
üîÑ middlewareRefresh: ${authSettings.middlewareAutoRefreshEnabled ? 'ON (–∑–∞ ' + authSettings.middlewareRefreshThresholdSeconds + ' —Å–µ–∫ –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è)' : 'OFF'}
üîÑ expiresIn: ${Math.floor(user.expiresIn / 60) > 0 && (Math.floor(user.expiresIn / 60) + '—Ö–≤')} ${user.expiresIn % 60} —Å–µ–∫`);
        }
        
        prevTokenRefreshKey.current = currentKey;
      }
      
      scheduleTokenRefresh(user.expiresIn);

      return () => {
        if (refreshTimeoutRef.current) {
          clearTimeout(refreshTimeoutRef.current);
        }
      };
    }
  }, [user, authSettings]);

  // –û–±—Ä–æ–±–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
  useEffect(() => {
    if (user) {
      let lastActivityTime = Date.now();

      // –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
      const handleVisibilityChange = () => {
        if (document.visibilityState === 'visible') {
          const timeSinceLastActivity = Date.now() - lastActivityTime;

          // –Ø–∫—â–æ –≤–∫–ª–∞–¥–∫–∞ –±—É–ª–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –±—ñ–ª—å—à–µ 30 —Ö–≤–∏–ª–∏–Ω, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω
          if (timeSinceLastActivity > 30 * 60 * 1000) {
            checkAuthStatus();
          }
        }
      };

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updateActivity = () => {
        const now = Date.now();
        lastActivityTime = now;
      };

      const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];
      events.forEach(event => {
        document.addEventListener(event, updateActivity, true);
      });

      document.addEventListener('visibilitychange', handleVisibilityChange);

      return () => {
        events.forEach(event => {
          document.removeEventListener(event, updateActivity, true);
        });
        document.removeEventListener('visibilitychange', handleVisibilityChange);
      };
    }
  }, [user]);

  const checkAuthStatus = async () => {
    // LoggingService.authLog('üîç [AuthContext] checkAuthStatus called');

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –ø—Ä–æ—Ñ—ñ–ª—é
    const now = Date.now();

    // –í–∏–º–∏–∫–∞—î–º–æ –∫–µ—à –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ (–º–µ–Ω—à–µ 5 —Ö–≤–∏–ª–∏–Ω)
    const shouldUseCache = profileCacheRef.current &&
      (now - profileCacheRef.current.timestamp) < PROFILE_CACHE_DURATION &&
      (!profileCacheRef.current.data?.expiresIn || 
       profileCacheRef.current.data.expiresIn >= 300); // 300 —Å–µ–∫—É–Ω–¥ = 5 —Ö–≤–∏–ª–∏–Ω

    if (shouldUseCache) {
      LoggingService.authLog('üìã [AuthContext] Using cached profile');
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏ –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –∫–µ—à—É
      await LoggingService.initialize();
      await ToastService.initialize();
      
      setUser(profileCacheRef.current.data);
      setIsLoading(false);
      return;
    }

    // –Ø–∫—â–æ –∫–µ—à –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤, –ª–æ–≥—É—î–º–æ —Ü–µ
    if (profileCacheRef.current && 
        profileCacheRef.current.data?.expiresIn && 
        profileCacheRef.current.data.expiresIn < 300) {
      LoggingService.authLog('üö´ [AuthContext] Cache disabled for short token (expiresIn < 5min)');
    }

    try {
      const response = await fetch('/api/auth/profile', {
        credentials: 'include'
      });

      // LoggingService.authLog('üì° [AuthContext] checkAuthStatus response:', response.status);

      if (response.ok) {
        const userData = await response.json();
        LoggingService.authLog('‚úÖ [AuthContext] checkAuthStatus success');

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Å –∂–∏—Ç—Ç—è —Ç–æ–∫–µ–Ω–∞
        const userWithExpiry = {
          ...userData,
          expiresIn: userData.expiresIn
        };

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
        profileCacheRef.current = {
          data: userWithExpiry,
          timestamp: now
        };

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
        await LoggingService.initialize();
        await ToastService.initialize();

        // –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π, useEffect –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–ø–ª–∞–Ω—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å setUser
        setUser(userWithExpiry);
        
      } else {
        // –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ 401, –ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω
        if (response.status === 401) {
          LoggingService.authLog('‚ö†Ô∏è [AuthContext] checkAuthStatus: Got 401, attempting token refresh');
          const refreshResult = await refreshToken();
          if (refreshResult) {
            LoggingService.authLog('‚úÖ [AuthContext] checkAuthStatus: Token refreshed successfully');
            // –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ checkAuthStatus
            // —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            return checkAuthStatus();
          } else {
            console.error('‚ùå [AuthContext] checkAuthStatus: Token refresh failed, logging out');
            setUser(null);
          }
        } else {
          console.error(`‚ùå [AuthContext] checkAuthStatus: Error ${response.status}, logging out`);
          setUser(null);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      setUser(null);
    } finally {
      setIsLoading(false);
    }
  };

  const refreshToken = async (): Promise<boolean> => {
    // log('üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞...');
    try {
      const response = await fetch('/api/auth/refresh', {
        method: 'POST',
        credentials: 'include'
      });

      // log(`üì° –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞: ${response.status} ${response.statusText}`);

      if (response.ok) {
        const data = await response.json();
        LoggingService.authLog('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –≤ middleware
        const tokenRefreshed = response.headers.get('X-Token-Refreshed');
        const userEmail = response.headers.get('X-User-Email');

        if (tokenRefreshed === 'true' && userEmail) {
          ToastService.tokenRefreshed(userEmail);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Å –∂–∏—Ç—Ç—è —Ç–æ–∫–µ–Ω–∞
        if (data.expiresIn && user) {
          const updatedUser = {
            ...user,
            expiresIn: data.expiresIn
          };
          setUser(updatedUser);
        }

        // –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ, useEffect –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–ø–ª–∞–Ω—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å setUser

        return true;
      } else {
        const error = await response.json();
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞', error);
        
        if (error.message.includes('–∑–∞—Å—Ç–∞—Ä—ñ–≤') || error.message.includes('–Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π')) {
          console.error('‚ùå –¢–æ–∫–µ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–≤ –∞–±–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π, –≤–∏—Ö–æ–¥–∏–º–æ –∑ —Å–∏—Å—Ç–µ–º–∏');
          ToastService.refreshError();
          forceLogout();
          return false;
        }
        return false;
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞:', error);
      console.error('‚ùå –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–æ–∫–µ–Ω–∞', error);
      return false;
    }
  };

  const login = async (credentials: LoginRequest): Promise<boolean> => {
    LoggingService.authLog('üîë [AuthContext]: –ü–æ—á–∏–Ω–∞—î–º–æ –≤—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...', { email: credentials.email });
    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(credentials),
      });

      LoggingService.authLog(`üì° [AuthContext]: –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤—Ö—ñ–¥: ${response.status} ${response.statusText}`);

      if (response.ok) {
        const data = await response.json();
        LoggingService.authLog('‚úÖ [AuthContext]: –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', data.user);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Å –∂–∏—Ç—Ç—è —Ç–æ–∫–µ–Ω–∞ —ñ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userWithExpiry = {
          ...data.user,
          expiresIn: data.expiresIn
        };
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Å—Ç–∞–Ω –ø–µ—Ä–µ–¥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é —Å–µ—Ä–≤—ñ—Å—ñ–≤,
        // —â–æ–± —Å–µ—Å—ñ–π–Ω—ñ –∫—É–∫–∏ / –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –∑–∞—Ö–∏—â–µ–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
        setUser(userWithExpiry);

        // –ü–æ–≤—Ç–æ—Ä–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ LoggingService –ø—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è user.
        await LoggingService.initialize();
        await ToastService.initialize();

        LoggingService.authLog('üîÑ [AuthContext]: LoggingService –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É');

        // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        await loadAuthSettings();

        // –ü–æ–∫–∞–∑—É—î–º–æ Toast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        ToastService.loginSuccess(data.user.email);

        // useEffect –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–ª–∞–Ω—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ setUser

        return true;
      } else {
        const error = await response.json();
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:', error.message);
        throw new Error(error.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–π—Ç–∏');
      }
    } catch (error) {
      console.error('‚ùå –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥—ñ:', error);
      throw error;
    }
  };

  const register = async (userData: RegisterRequest): Promise<boolean> => {
    LoggingService.authLog('üìù [AuthContext]: –ü–æ—á–∏–Ω–∞—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é...', { email: userData.email });
    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(userData),
      });

      LoggingService.authLog(`üì° [AuthContext]: –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é: ${response.status} ${response.statusText}`);

      if (response.ok) {
        const data = await response.json();
        LoggingService.authLog('‚úÖ [AuthContext]: –£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', data.user);

        // –ü–æ–∫–∞–∑—É—î–º–æ Toast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        ToastService.loginSuccess(data.user.email);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Å –∂–∏—Ç—Ç—è —Ç–æ–∫–µ–Ω–∞
        const userWithExpiry = {
          ...data.user,
          expiresIn: data.expiresIn
        };
        setUser(userWithExpiry);
        
        // useEffect –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ setUser

        
        return true;
      } else {
        const error = await response.json();
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error.message);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
      return false;
    }
  };

  const logout = async () => {
    LoggingService.authLog('üîö [AuthContext]: –ü–æ—á–∏–Ω–∞—î–º–æ –≤–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏...');
    try {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      if (refreshTimeoutRef.current) {
        clearTimeout(refreshTimeoutRef.current);
        refreshTimeoutRef.current = null;
      }

      await fetch('/api/auth/logout', {
        method: 'POST',
        credentials: 'include'
      });

      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–æ—Ñ–∏–ª—è
      profileCacheRef.current = null;

      LoggingService.authLog('‚úÖ [AuthContext]: –£—Å–ø—ñ—à–Ω–∏–π –≤–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏');

      // –ü–æ–∫–∞–∑—É—î–º–æ Toast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      ToastService.logoutSuccess();
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ:', error);
    } finally {
      setUser(null);
    }
  };

  const forceLogout = () => {
    LoggingService.authLog('‚õî [AuthContext]: –ü—Ä–∏–º—É—Å–æ–≤–∏–π –≤–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏');
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    if (refreshTimeoutRef.current) {
      clearTimeout(refreshTimeoutRef.current);
      refreshTimeoutRef.current = null;
    }

    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–æ—Ñ–∏–ª—è
    profileCacheRef.current = null;

    setUser(null);
  };

  const value: AuthContextType = {
    user,
    isLoading,
    login,
    register,
    logout,
    forceLogout,
    refreshToken,
    checkAuthStatus,
    equipmentState: isEquipmentReady ? equipmentState : null,
    equipmentActions: isEquipmentReady ? equipmentActions : null,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};