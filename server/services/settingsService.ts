import { prisma } from '../lib/utils.js';
import { EQUIPMENT_DEFAULTS } from '../../shared/constants/equipmentDefaults.js';

// –õ–æ–∫–∞–ª—å–Ω—ñ —Ç–∏–ø–∏ –¥–ª—è SettingsBase (—Ç–∏–º—á–∞—Å–æ–≤–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Prisma)
interface SettingsBase {
  id: number;
  key: string;
  value: string;
  description?: string;
  category?: string;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

// –¢–∏–º—á–∞—Å–æ–≤–µ —Ä—ñ—à–µ–Ω–Ω—è: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ any –¥–ª—è –æ–±—Ö–æ–¥—É –ø—Ä–æ–±–ª–µ–º –∑ —Ç–∏–ø–∏–∑–∞—Ü—ñ—î—é Prisma
const settingsBase = prisma.settingsBase as any;

export type OrderSoundEvent = 'pending' | 'success' | 'done' | 'error';

export interface EquipmentSettings {
  scale: {
    baudRate: number;
    dataBits: number;
    stopBits: number;
    parity: string;
    autoConnect: boolean;
    activePollingInterval: number;
    reservePollingInterval: number;
    activePollingDuration: number;
    maxPollingErrors: number;
    weightCacheDuration: number;
    amplitudeSpikeThresholdKg: number;
    stableSound: string;
    unstableSound: string;
    errorSound: string;
    weightThresholdForActive: number;
    connectionStrategy: 'legacy' | 'reconnectOnError' | 'persistentStream';
  };
  orderSoundSettings: Record<OrderSoundEvent, string>;
  scanner: {
    autoConnect: boolean;
    timeout: number;
    scanTimeout?: number;
    minScanSpeed?: number;
    maxScanSpeed?: number;
    minBarcodeLength?: number;
  };
  printer?: {
    enabled: boolean;
    name: string;
    autoPrintOnComplete?: boolean;
    autoPrintDelayMs?: number;
  };
}

export class EquipmentSettingsService {
  private static instance: EquipmentSettingsService;
  private readonly SETTINGS_CATEGORY = 'equipment';

  private constructor() {}

  public static getInstance(): EquipmentSettingsService {
    if (!EquipmentSettingsService.instance) {
      EquipmentSettingsService.instance = new EquipmentSettingsService();
    }
    return EquipmentSettingsService.instance;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
  async getEquipmentSettings(): Promise<EquipmentSettings> {
    try {
      const settings = await settingsBase.findMany({
        where: {
          category: this.SETTINGS_CATEGORY,
          isActive: true
        }
      });

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —î–¥–∏–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      const defaultSettings: EquipmentSettings = EQUIPMENT_DEFAULTS;

      if (settings.length === 0) {
        // –Ø–∫—â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        console.log('üìã –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º...');
        await this.saveEquipmentSettings(defaultSettings);
        return defaultSettings;
      }

      // –ü–∞—Ä—Å–∏–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –ë–î
      const parsedSettings: Partial<EquipmentSettings> = {};
      for (const setting of settings) {
        try {
          const value = JSON.parse(setting.value);
          const key = setting.key.replace('equipment_', '');
          if (key.startsWith('orderSoundSettings')) {
            // orderSoundSettings.pending, orderSoundSettings.success –∏ —Ç.–¥.
            const [, event] = key.split('.');
            if (!parsedSettings.orderSoundSettings) {
              parsedSettings.orderSoundSettings = {
                pending: 'default',
                success: 'default',
                done: 'default',
                error: 'default',
              };
            }
            parsedSettings.orderSoundSettings[event] = value;
          } else if (key.includes('.')) {
            // –í–∫–ª–∞–¥–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, scale.comPort)
            const [section, field] = key.split('.');
            if (!parsedSettings[section]) {
              parsedSettings[section] = {};
            }
            parsedSettings[section][field] = value;
          } else {
            // –ü—Ä–æ—Å—Ç—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            parsedSettings[key] = value;
          }
        } catch (error) {
          console.error(`Error parsing setting ${setting.key}:`, error);
        }
      }

      // –û–±'—î–¥–Ω—É—î–º–æ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      return this.mergeSettings(defaultSettings, parsedSettings);
    } catch (error) {
      console.error('Error getting equipment settings:', error);
      throw new Error('Failed to get equipment settings');
    }
  }

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è)
  async saveEquipmentSettings(settings: EquipmentSettings): Promise<void> {
    try {
      console.log('üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è...');

      // –ì—Ä—É–ø—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      const savePromises = [
        this.saveScaleSettings(settings.scale),
        this.saveScannerSettings(settings.scanner),
        this.savePrinterSettings(settings.printer),
        this.saveOrderSoundSettings(settings.orderSoundSettings)
      ];

      // –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
      await Promise.all(savePromises);
      console.log('‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è:', error);
      throw new Error('Failed to save equipment settings');
    }
  }

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑–≤—É–∫—ñ–≤ –¥–ª—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  private async saveOrderSoundSettings(orderSoundSettings: Record<string, string>): Promise<void> {
    if (!orderSoundSettings) return;
    const soundSettingsList = Object.entries(orderSoundSettings).map(([event, value]) => ({
      key: `equipment_orderSoundSettings.${event}`,
      value: JSON.stringify(value),
      description: `–ó–≤—É–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${event}`
    }));
    await this.batchUpsertSettings(soundSettingsList);
  }


  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤–∞–≥
  private async saveScaleSettings(scaleSettings: EquipmentSettings['scale']): Promise<void> {
    if (!scaleSettings) return;

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
    this.validateScaleSettings(scaleSettings);

    const scaleSettingsList = [
      {
        key: 'equipment_scale.baudRate',
        value: JSON.stringify(scaleSettings.baudRate ?? 4800),
        description: '–®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á—ñ –¥–∞–Ω–∏—Ö –≤–∞–≥'
      },
      {
        key: 'equipment_scale.dataBits',
        value: JSON.stringify(scaleSettings.dataBits ?? 8),
        description: '–ë—ñ—Ç–∏ –¥–∞–Ω–∏—Ö –≤–∞–≥'
      },
      {
        key: 'equipment_scale.stopBits',
        value: JSON.stringify(scaleSettings.stopBits ?? 1),
        description: '–°—Ç–æ–ø-–±—ñ—Ç–∏ –≤–∞–≥'
      },
      {
        key: 'equipment_scale.parity',
        value: JSON.stringify(scaleSettings.parity ?? 'even'),
        description: '–ü–∞—Ä–Ω—ñ—Å—Ç—å –≤–∞–≥'
      },
      {
        key: 'equipment_scale.autoConnect',
        value: JSON.stringify(scaleSettings.autoConnect ?? false),
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤–∞–≥'
      },
      {
        key: 'equipment_scale.activePollingInterval',
        value: JSON.stringify(scaleSettings.activePollingInterval ?? 1000),
        description: '–ê–∫—Ç–∏–≤–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –≤–∞–≥ (–º—Å)'
      },
      {
        key: 'equipment_scale.reservePollingInterval',
        value: JSON.stringify(scaleSettings.reservePollingInterval ?? 5000),
        description: '–†–µ–∑–µ—Ä–≤–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –≤–∞–≥ (–º—Å)'
      },
      {
        key: 'equipment_scale.activePollingDuration',
        value: JSON.stringify(scaleSettings.activePollingDuration ?? 30000),
        description: '–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –≤–∞–≥ (–º—Å)'
      },
      {
        key: 'equipment_scale.maxPollingErrors',
        value: JSON.stringify(scaleSettings.maxPollingErrors ?? 5),
        description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫ –ø–µ—Ä–µ–¥ –∑—É–ø–∏–Ω–∫–æ—é –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'
      },
      {
        key: 'equipment_scale.weightCacheDuration',
        value: JSON.stringify(scaleSettings.weightCacheDuration ?? 500),
        description: '–ß–∞—Å –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤–∞–≥ (–º—Å)'
      },
      {
        key: 'equipment_scale.amplitudeSpikeThresholdKg',
        value: JSON.stringify(scaleSettings.amplitudeSpikeThresholdKg ?? 5),
        description: '–ü–æ—Ä—ñ–≥ —Å–ø–ª–µ—Å–∫—É –≤–∞–≥–∏ (–∫–≥)'
      },
      {
        key: 'equipment_scale.stableSound',
        value: JSON.stringify(scaleSettings.stableSound ?? 'default'),
        description: '–ó–≤—É–∫ —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ –∫–∞–¥—Ä—É'
      },
      {
        key: 'equipment_scale.unstableSound',
        value: JSON.stringify(scaleSettings.unstableSound ?? 'default'),
        description: '–ó–≤—É–∫ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ –∫–∞–¥—Ä—É'
      },
      {
        key: 'equipment_scale.errorSound',
        value: JSON.stringify(scaleSettings.errorSound ?? 'default'),
        description: '–ó–≤—É–∫ –ø–æ–º–∏–ª–∫–∏'
      },
      {
        key: 'equipment_scale.weightThresholdForActive',
        value: JSON.stringify(scaleSettings.weightThresholdForActive ?? 0.010),
        description: '–ü–æ—Ä—ñ–≥ –≤–∞–≥–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω–∏–π polling (–∫–≥)'
      },
      {
        key: 'equipment_scale.connectionStrategy',
        value: JSON.stringify(scaleSettings.connectionStrategy ?? 'reconnectOnError'),
        description: '–°—Ç—Ä–∞—Ç–µ–≥—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ COM-–ø–æ—Ä—Ç–æ–º –≤–∞–≥'
      }
    ];

    await this.batchUpsertSettings(scaleSettingsList);
  }

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–∫–∞–Ω–µ—Ä–∞
  private async saveScannerSettings(scannerSettings: EquipmentSettings['scanner']): Promise<void> {
    if (!scannerSettings) return;

    const scannerSettingsList = [
      {
        key: 'equipment_scanner.autoConnect',
        value: JSON.stringify(scannerSettings.autoConnect ?? true),
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å–∫–∞–Ω–µ—Ä–∞'
      },
      {
        key: 'equipment_scanner.timeout',
        value: JSON.stringify(scannerSettings.timeout ?? 5000),
        description: '–¢–∞–π–º–∞—É—Ç —Å–∫–∞–Ω–µ—Ä–∞'
      },
      {
        key: 'equipment_scanner.scanTimeout',
        value: JSON.stringify(scannerSettings.scanTimeout ?? 300),
        description: '–¢–∞–π–º–∞—É—Ç —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–∞—Ä–∫–æ–¥—É (–º—Å)'
      },
      {
        key: 'equipment_scanner.minScanSpeed',
        value: JSON.stringify(scannerSettings.minScanSpeed ?? 50),
        description: '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è (–º—Å)'
      },
      {
        key: 'equipment_scanner.maxScanSpeed',
        value: JSON.stringify(scannerSettings.maxScanSpeed ?? 200),
        description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è (–º—Å)'
      },
      {
        key: 'equipment_scanner.minBarcodeLength',
        value: JSON.stringify(scannerSettings.minBarcodeLength ?? 5),
        description: '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –±–∞—Ä–∫–æ–¥—É'
      }
    ];

    await this.batchUpsertSettings(scannerSettingsList);
  }


  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
  private async savePrinterSettings(printerSettings: EquipmentSettings['printer']): Promise<void> {
    if (!printerSettings) return;

    const printerSettingsList = [
      {
        key: 'equipment_printer.enabled',
        value: JSON.stringify(printerSettings.enabled ?? false),
        description: '–ü—Ä—è–º–∏–π –¥—Ä—É–∫ —á–µ—Ä–µ–∑ QZ Tray —É–≤—ñ–º–∫–Ω–µ–Ω–æ'
      },
      {
        key: 'equipment_printer.name',
        value: JSON.stringify(printerSettings.name ?? ''),
        description: "–Ü–º'—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥—Ä—É–∫—É"
      },
      {
        key: 'equipment_printer.autoPrintOnComplete',
        value: JSON.stringify(printerSettings.autoPrintOnComplete ?? false),
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –¥—Ä—É–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'
      },
      {
        key: 'equipment_printer.autoPrintDelayMs',
        value: JSON.stringify(printerSettings.autoPrintDelayMs ?? 3000),
        description: '–ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –¥—Ä—É–∫–æ–º (–º—Å)'
      }
    ];

    await this.batchUpsertSettings(printerSettingsList);
  }

  // Batch –æ–ø–µ—Ä–∞—Ü—ñ—è –¥–ª—è upsert –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  private async batchUpsertSettings(settingsList: Array<{
    key: string;
    value: string;
    description: string;
  }>): Promise<void> {
    try {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Promise.all –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è upsert –æ–ø–µ—Ä–∞—Ü—ñ–π
      const upsertPromises = settingsList.map(setting => 
        settingsBase.upsert({
          where: { key: setting.key },
          update: {
            value: setting.value,
            category: this.SETTINGS_CATEGORY,
            description: setting.description,
            isActive: true,
            updatedAt: new Date()
          },
          create: {
            key: setting.key,
            value: setting.value,
            category: this.SETTINGS_CATEGORY,
            description: setting.description,
            isActive: true
          }
        })
      );

      await Promise.all(upsertPromises);
    } catch (error) {
      console.error('Error in batch upsert settings:', error);
      throw error;
    }
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
  async updateEquipmentSetting(key: string, value: any): Promise<void> {
    try {
      const dbKey = `equipment_${key}`;
      const dbValue = JSON.stringify(value);
      
      await settingsBase.upsert({
        where: { key: dbKey },
        update: {
          value: dbValue,
          updatedAt: new Date()
        },
        create: {
          key: dbKey,
          value: dbValue,
          category: this.SETTINGS_CATEGORY,
          description: `Equipment setting: ${key}`,
          isActive: true
        }
      });
    } catch (error) {
      console.error(`Error updating equipment setting ${key}:`, error);
      throw new Error(`Failed to update equipment setting: ${key}`);
    }
  }

  // –ß–∞—Å—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–æ –≥—Ä—É–ø–∞–º
  async updateScaleSettings(scaleSettings: Partial<EquipmentSettings['scale']>): Promise<void> {
    try {
      console.log('‚öñÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤–∞–≥...');
      await this.saveScaleSettings(scaleSettings as EquipmentSettings['scale']);
      console.log('‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤–∞–≥:', error);
      throw new Error('Failed to update scale settings');
    }
  }

  async updateScannerSettings(scannerSettings: Partial<EquipmentSettings['scanner']>): Promise<void> {
    try {
      console.log('üì∑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–∫–∞–Ω–µ—Ä–∞...');
      await this.saveScannerSettings(scannerSettings as EquipmentSettings['scanner']);
      console.log('‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∞–Ω–µ—Ä–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–∫–∞–Ω–µ—Ä–∞:', error);
      throw new Error('Failed to update scanner settings');
    }
  }


  async updatePrinterSettings(printerSettings: Partial<EquipmentSettings['printer']>): Promise<void> {
    try {
      console.log('üñ®Ô∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞...');
      await this.savePrinterSettings(printerSettings as EquipmentSettings['printer']);
      console.log('‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞:', error);
      throw new Error('Failed to update printer settings');
    }
  }

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
  private validateScaleSettings(scaleSettings: EquipmentSettings['scale']): void {
    if (!scaleSettings) return;

    const errors: string[] = [];

    if (scaleSettings.baudRate && (scaleSettings.baudRate < 300 || scaleSettings.baudRate > 115200)) {
      errors.push('–®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á—ñ –¥–∞–Ω–∏—Ö –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 300 –¥–æ 115200');
    }

    if (scaleSettings.dataBits && (scaleSettings.dataBits < 5 || scaleSettings.dataBits > 8)) {
      errors.push('–ë—ñ—Ç–∏ –¥–∞–Ω–∏—Ö –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤—ñ–¥ 5 –¥–æ 8');
    }

    if (scaleSettings.stopBits && (scaleSettings.stopBits < 1 || scaleSettings.stopBits > 2)) {
      errors.push('–°—Ç–æ–ø-–±—ñ—Ç–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ 1 –∞–±–æ 2');
    }

    if (scaleSettings.parity && !['none', 'even', 'odd'].includes(scaleSettings.parity)) {
      errors.push('–ü–∞—Ä–Ω—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ none, even –∞–±–æ odd');
    }

    if (scaleSettings.activePollingInterval && scaleSettings.activePollingInterval < 100) {
      errors.push('–ê–∫—Ç–∏–≤–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–µ 100–º—Å');
    }

    if (scaleSettings.reservePollingInterval && scaleSettings.reservePollingInterval < 1000) {
      errors.push('–†–µ–∑–µ—Ä–≤–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–µ 1000–º—Å');
    }

    if (errors.length > 0) {
      throw new Error(`–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤–∞–≥: ${errors.join(', ')}`);
    }
  }


  // –°–∫–∏–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
  async resetEquipmentSettings(): Promise<EquipmentSettings> {
    try {
      // –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –≤—Å—ñ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
      await settingsBase.updateMany({
        where: {
          category: this.SETTINGS_CATEGORY,
          isActive: true
        },
        data: {
          isActive: false
        }
      });

      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      const defaultSettings = await this.getEquipmentSettings();
      return defaultSettings;
    } catch (error) {
      console.error('Error resetting equipment settings:', error);
      throw new Error('Failed to reset equipment settings');
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–º—ñ–Ω –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  async getSettingsHistory(limit: number = 50): Promise<any[]> {
    try {
      const history = await settingsBase.findMany({
        where: {
          category: this.SETTINGS_CATEGORY
        },
        orderBy: {
          updatedAt: 'desc'
        },
        take: limit
      });

      return history.map(item => ({
        key: item.key,
        value: item.value,
        description: item.description,
        isActive: item.isActive,
        updatedAt: item.updatedAt
      }));
    } catch (error) {
      console.error('Error getting settings history:', error);
      throw new Error('Failed to get settings history');
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  async getSettingsStats(): Promise<{
    totalSettings: number;
    activeSettings: number;
    settingsByCategory: Record<string, number>;
    lastUpdated: Date | null;
  }> {
    try {
      const [totalCount, activeCount, categoryStats, lastUpdated] = await Promise.all([
        settingsBase.count({
          where: { category: this.SETTINGS_CATEGORY }
        }),
        settingsBase.count({
          where: { 
            category: this.SETTINGS_CATEGORY,
            isActive: true 
          }
        }),
        settingsBase.groupBy({
          by: ['key'],
          where: { category: this.SETTINGS_CATEGORY },
          _count: { key: true }
        }),
        settingsBase.findFirst({
          where: { category: this.SETTINGS_CATEGORY },
          orderBy: { updatedAt: 'desc' },
          select: { updatedAt: true }
        })
      ]);

      const settingsByCategory = categoryStats.reduce((acc, item) => {
        const category = item.key.split('_')[1] || 'other';
        acc[category] = (acc[category] || 0) + item._count.key;
        return acc;
      }, {} as Record<string, number>);

      return {
        totalSettings: totalCount,
        activeSettings: activeCount,
        settingsByCategory,
        lastUpdated: lastUpdated?.updatedAt || null
      };
    } catch (error) {
      console.error('Error getting settings stats:', error);
      throw new Error('Failed to get settings stats');
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
  private flattenSettings(settings: any, prefix: string = ''): Record<string, any> {
    const flattened: Record<string, any> = {};
    
    for (const [key, value] of Object.entries(settings)) {
      const fullKey = prefix ? `${prefix}.${key}` : key;
      
      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
        Object.assign(flattened, this.flattenSettings(value, fullKey));
      } else {
        // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è
        if (typeof value === 'string') {
          // –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ —î
          flattened[fullKey] = value;
        } else {
          // –î–ª—è —ñ–Ω—à–∏—Ö –∑–Ω–∞—á–µ–Ω—å –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ —î
          flattened[fullKey] = value;
        }
      }
    }
    
    return flattened;
  }

  private mergeSettings(defaultSettings: EquipmentSettings, userSettings: Partial<EquipmentSettings>): EquipmentSettings {
    const merged = { ...defaultSettings };
    
    for (const [section, sectionSettings] of Object.entries(userSettings)) {
      if (typeof sectionSettings === 'object' && sectionSettings !== null) {
        if (section in merged) {
          merged[section] = { ...merged[section], ...sectionSettings };
        }
      } else {
        merged[section] = sectionSettings;
      }
    }
    
    return merged;
  }
}

export default EquipmentSettingsService;
