import React, { useState, useEffect, useCallback } from 'react';
import { useEquipmentFromAuth } from '../contexts/AuthContext';
import { cn } from '../lib/utils';

interface ScaleWeightDisplayProps {
  currentScaleWeight: number; // –û–∂–∏–¥–∞–µ–º—ã–π –≤–µ—Å –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ
  totalOrderWeight: number; // –û–±—â–∏–π –≤–µ—Å –≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–∞ (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)
  className?: string;
}

interface WeightHistory {
  weight: number;
  timestamp: Date;
  isStable: boolean;
  rawMessage?: string;
}

export const ScaleWeightDisplay: React.FC<ScaleWeightDisplayProps> = ({
  currentScaleWeight,
  totalOrderWeight,
  className = ''
}) => {
  const [equipmentState, equipmentActions] = useEquipmentFromAuth();
  const [weightHistory, setWeightHistory] = useState<WeightHistory[]>([]);
  const [isConnectingScale, setIsConnectingScale] = useState(false);

  const realWeight = equipmentState.currentWeight?.weight || 0;
  const isStable = equipmentState.currentWeight?.isStable || false;
  const isConnected = equipmentState.isConnected;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∏—Å–ª–∞ –∏–∑ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const parseLastWeightFromRaw = useCallback(() => {
    if (!equipmentState.lastRawScaleData) return null;

    // –ò—â–µ–º —á–∏—Å–ª–æ —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 1.234 –∏–ª–∏ 1,234)
    const weightMatch = equipmentState.lastRawScaleData.match(/[\d]+[.,][\d]+/);
    if (weightMatch) {
      const weightStr = weightMatch[0].replace(',', '.');
      const weight = parseFloat(weightStr);
      return !isNaN(weight) && weight >= 0 ? weight : null;
    }
    return null;
  }, [equipmentState.lastRawScaleData]);

  const rawWeight = parseLastWeightFromRaw();

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
  useEffect(() => {
    if (equipmentState.currentWeight) {
      const newEntry: WeightHistory = {
        weight: equipmentState.currentWeight.weight,
        timestamp: equipmentState.currentWeight.timestamp,
        isStable: equipmentState.currentWeight.isStable,
        rawMessage: equipmentState.lastRawScaleData
      };

      setWeightHistory(prev => {
        const updated = [newEntry, ...prev].slice(0, 10); // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π
        return updated;
      });

      console.log('üìä ScaleWeightDisplay: Weight updated:', {
        weight: equipmentState.currentWeight.weight,
        isStable: equipmentState.currentWeight.isStable,
        timestamp: equipmentState.currentWeight.timestamp,
        rawMessage: equipmentState.lastRawScaleData
      });
    }
  }, [equipmentState.currentWeight, equipmentState.lastRawScaleData]);

  // Health check –∫–∞–∂–¥—ã–µ 15-30 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    const healthCheck = () => {
      console.log('üè• ScaleWeightDisplay: Health check - connection status:', isConnected);
    };

    // –ü–µ—Ä–≤—ã–π health check
    healthCheck();

    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15-30 —Å–µ–∫—É–Ω–¥ (—Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
    const interval = setInterval(() => {
      const randomDelay = 15000 + Math.random() * 15000; // 15-30 —Å–µ–∫
      setTimeout(healthCheck, randomDelay);
    }, 15000);

    return () => clearInterval(interval);
  }, [isConnected]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ—Å–∞–º
  const handleManualScaleConnect = async () => {
    if (equipmentState.isSimulationMode) {
      console.log('‚ö†Ô∏è ScaleWeightDisplay: Cannot connect in simulation mode');
      return;
    }

    setIsConnectingScale(true);
    try {
      console.log('üîß ScaleWeightDisplay: Manual scale connection attempt...');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä –ø–æ—Ä—Ç–∞ (autoConnect=false)
      const ScaleServiceClass = (await import('../services/ScaleService')).default;
      const scaleInstance = new ScaleServiceClass();
      const connected = await scaleInstance.connect(false);
      if (connected) {
        console.log('‚úÖ ScaleWeightDisplay: Scale connected successfully');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ actions
        equipmentActions.refreshConfig();
      } else {
        console.log('‚ùå ScaleWeightDisplay: Failed to connect scale');
      }
    } catch (error) {
      console.log('‚ùå ScaleWeightDisplay: Error connecting scale:', error);
    } finally {
      setIsConnectingScale(false);
    }
  };


  return (
    <div className={cn("w-full bg-white p-4 rounded-lg shadow border", className)}>
      <div className="space-y-3">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-start justify-between">
          <span className="text-sm font-medium text-gray-700">–ü–æ—Ç–æ—á–Ω–∞ –≤–∞–≥–∞</span>
          <div className="flex items-center gap-2">
            <div className={cn(
              "w-2 h-2 rounded-full",
              isConnected ? "bg-green-500" : "bg-red-500"
            )} />
            {!isConnected && !equipmentState.isSimulationMode && (
              <button
                onClick={handleManualScaleConnect}
                disabled={isConnectingScale}
                className={cn(
                  "px-2 py-1 text-xs rounded-md transition-colors",
                  !isConnectingScale
                    ? "bg-red-100 text-red-700 hover:bg-red-200"
                    : "bg-gray-100 text-gray-400 cursor-not-allowed"
                )}
              >
                {isConnectingScale ? '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...' : '–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏'}
              </button>
            )}
          </div>
        </div>

        {/* –¢–µ–∫—É—â–∏–π –≤–µ—Å */}
        <div className="text-center">
          <div className="text-2xl font-bold text-gray-900">
            {isConnected && rawWeight !== null ? `${rawWeight.toFixed(3)} –∫–≥` : '--.-- –∫–≥'}
          </div>
          <div className="text-xs text-gray-500 mt-1">
            {isConnected ? '–†–µ–∞–ª—å–Ω–∏–π —á–∞—Å' : '–í–∞–≥–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ'}
          </div>
        </div>


        {/* –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {process.env.NODE_ENV === 'development' && (
          <div className="mt-4 p-2 bg-gray-100 rounded text-xs">
            <div className="text-gray-600 flex gap-4">
              <span>Raw: {equipmentState.lastRawScaleData || '‚Äì'}</span>
              <span>Parsed: {rawWeight !== null ? `${rawWeight.toFixed(3)}` : '‚Äì'}</span>
            </div>
          </div>
        )}

        {/* –û–∂–∏–¥–∞–µ–º—ã–π –≤–µ—Å –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ */}
        {currentScaleWeight > 0 && (
          <div className="pt-2 border-t border-gray-100">
            <div className="flex justify-between items-center text-xs text-gray-600 mb-1">
              <span>–û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∞–≥–∞ (–ø–æ—Ç–æ—á–Ω–∏–π –µ—Ç–∞–ø):</span>
              <span>{currentScaleWeight.toFixed(1)} –∫–≥</span>
            </div>
            {/* –û–±—â–∏–π –≤–µ—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ */}
            {totalOrderWeight > 0 && totalOrderWeight !== currentScaleWeight && (
              <div className="flex justify-between items-center text-xs text-gray-600">
                <span>–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞–≥–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</span>
                <span>{totalOrderWeight.toFixed(1)} –∫–≥</span>
              </div>
            )}
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–Ω–∏—Ü—ã */}
            {isConnected && rawWeight !== null && (
              <div className="mt-2 text-center">
                <span className={cn(
                  "text-xs px-2 py-1 rounded-full",
                  Math.abs(rawWeight - currentScaleWeight) < 0.1
                    ? "bg-green-100 text-green-700"
                    : Math.abs(rawWeight - currentScaleWeight) < 0.5
                    ? "bg-yellow-100 text-yellow-700"
                    : "bg-red-100 text-red-700"
                )}>
                  {(() => {
                    const difference = rawWeight - currentScaleWeight;
                    // –û—Ç–ª–∞–¥–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ä–∞–∑–Ω–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞)
                    if (Math.abs(difference) > 0.1) {
                      console.log('üìä ScaleWeightDisplay: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–Ω–∏—Ü—ã:', {
                        rawWeight,
                        currentScaleWeight,
                        difference: difference.toFixed(2)
                      });
                    }
                    return (difference > 0 ? '+' : '') + difference.toFixed(2);
                  })()} –∫–≥
                </span>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};
