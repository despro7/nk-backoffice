import * as cron from 'node-cron';
import { salesDriveService } from './salesDriveService.js';
import { syncHistoryService } from './syncHistoryService.js';

export class CronService {
  private syncJob: cron.ScheduledTask | null = null;
  private isRunning = false;

  constructor() {
    console.log('üïê CronService initialized');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥
   */
  private async isSyncFresh(): Promise<boolean> {
    try {
      const lastSync = await syncHistoryService.getLastSuccessfulSync();
      if (!lastSync) {
        console.log('üîÑ [FRESHNESS] No previous sync found, allowing sync');
        return false; // –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å
      }

      const lastSyncTime = new Date(lastSync.createdAt);
      const now = new Date();
      const diffHours = (now.getTime() - lastSyncTime.getTime()) / (1000 * 60 * 60);

      if (diffHours < 1) {
        console.log(`‚è∞ [FRESHNESS] Last sync was ${Math.round(diffHours * 60)} minutes ago, skipping (less than 1 hour)`);
        return true; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–≤–µ–∂–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      }

      console.log(`üîÑ [FRESHNESS] Last sync was ${Math.round(diffHours)} hours ago, allowing sync`);
      return false; // –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å
    } catch (error) {
      console.error('‚ùå [FRESHNESS] Error checking sync freshness:', error);
      return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
   */
  startOrderSync(): void {
    if (this.syncJob) {
      console.log('‚ö†Ô∏è Order sync cron job already running');
      return;
    }

    // –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π —á–∞—Å –≤ –º–∏–Ω—É—Ç–∞ 5 (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —á–∞—Å–∞)
    this.syncJob = cron.schedule('5 * * * *', async () => {
      if (this.isRunning) {
        console.log('‚è≥ Previous sync still running, skipping...');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const isFresh = await this.isSyncFresh();
      if (isFresh) {
        console.log('‚è∞ [FRESHNESS] Skipping scheduled sync - last sync was less than 1 hour ago');
        console.log('‚è∞ [FRESHNESS] Next sync attempt in 1 hour');
        return;
      }

      console.log('‚úÖ [FRESHNESS] Sync allowed - proceeding with synchronization');

      this.isRunning = true;
      console.log('üïê Running scheduled order sync...');

      try {
        const startTime = Date.now();

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (15 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã)
        const syncPromise = salesDriveService.syncOrdersWithDatabase();
        const timeoutPromise = new Promise<never>((_, reject) => {
          setTimeout(() => reject(new Error('Sync timeout after 15 minutes')), 15 * 60 * 1000);
        });

        const result = await Promise.race([syncPromise, timeoutPromise]) as { success: boolean; synced: number; errors: number; details: any[] };
        const duration = Date.now() - startTime;

        console.log(`‚úÖ Scheduled sync completed in ${duration}ms: ${result.synced} synced, ${result.errors} errors`);

        if (result.errors > 0) {
          console.warn(`‚ö†Ô∏è Sync completed with ${result.errors} errors`);
        }
      } catch (error) {
        console.error('‚ùå Scheduled sync failed:', error);
      } finally {
        this.isRunning = false;
      }
    }, {
      timezone: "Europe/Kiev"
    });

    this.syncJob.start();
    console.log('‚úÖ Order sync cron job started (every hour at minute 5)');
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
   */
  stopOrderSync(): void {
    if (this.syncJob) {
      this.syncJob.stop();
      this.syncJob.destroy();
      this.syncJob = null;
      console.log('üõë Order sync cron job stopped');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å cron-–∑–∞–¥–∞—á
   */
  getStatus(): { isRunning: boolean; hasSyncJob: boolean } {
    return {
      isRunning: this.isRunning,
      hasSyncJob: this.syncJob !== null
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ cron-–∑–∞–¥–∞—á–∏
   */
  startAll(): void {
    this.startOrderSync();
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ cron-–∑–∞–¥–∞—á–∏
   */
  stopAll(): void {
    this.stopOrderSync();
  }
}

export const cronService = new CronService();
