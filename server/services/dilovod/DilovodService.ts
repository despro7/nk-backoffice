// –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å Dilovod - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π

import { PrismaClient } from '@prisma/client';
import {
  DilovodApiClient,
  DilovodCacheManager,
  DilovodDataProcessor,
  DilovodSyncManager,
  DilovodProduct,
  DilovodSyncResult,
  DilovodTestResult,
  DilovodStockBalance,
  WordPressProduct
} from './index.js';
import { logWithTimestamp } from './DilovodUtils.js';
import { syncSettingsService } from '../syncSettingsService.js';

export class DilovodService {
  private apiClient: DilovodApiClient;
  private cacheManager: DilovodCacheManager;
  private dataProcessor: DilovodDataProcessor;
  private syncManager: DilovodSyncManager;

  constructor() {
    this.apiClient = new DilovodApiClient();
    this.cacheManager = new DilovodCacheManager();
    this.dataProcessor = new DilovodDataProcessor(this.apiClient);
    this.syncManager = new DilovodSyncManager();
    
    logWithTimestamp('DilovodService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò =====

  // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å Dilovod
  async syncProductsWithDilovod(): Promise<DilovodSyncResult> {
    try {
      logWithTimestamp('\nüöÄ === –ù–ê–ß–ê–õ–û –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –¢–û–í–ê–†–û–í –° DILOVOD ===');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Dilovod
      const isEnabled = await syncSettingsService.isSyncEnabled('dilovod');
      if (!isEnabled) {
        logWithTimestamp('‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Dilovod –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
        return {
          success: false,
          message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Dilovod –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö',
          syncedProducts: 0,
          syncedSets: 0,
          errors: ['–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Dilovod –æ—Ç–∫–ª—é—á–µ–Ω–∞']
        };
      }

      logWithTimestamp('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Dilovod –≤–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');

      // –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ SKU —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ WordPress (–ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∫–µ—à–∞)
      logWithTimestamp('üìã –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ SKU —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ WordPress...');
      const skus = await this.fetchSkusDirectlyFromWordPress();
      
      if (skus.length === 0) {
        logWithTimestamp('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ SKU —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return {
          success: false,
          message: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ SKU —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
          syncedProducts: 0,
          syncedSets: 0,
          errors: []
        };
      }

      logWithTimestamp(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${skus.length} SKU –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏`);
      logWithTimestamp('üìã SKU:', skus.slice(0, 10));
      if (skus.length > 10) {
        logWithTimestamp(`... –∏ –µ—â–µ ${skus.length - 10}`);
      }

      // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ö –∏–∑ Dilovod
      logWithTimestamp('\nüìã –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ö –∏–∑ Dilovod...');
      const dilovodProducts = await this.getGoodsInfoWithSetsOptimized(skus);
      
      if (!dilovodProducts || dilovodProducts.length === 0) {
        logWithTimestamp('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Dilovod');
        return {
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Dilovod',
          syncedProducts: 0,
          syncedSets: 0,
          errors: []
        };
      }

      logWithTimestamp(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${dilovodProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Dilovod`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const productsWithSets = dilovodProducts.filter(p => p.set && p.set.length > 0);
      const regularProducts = dilovodProducts.filter(p => !p.set || p.set.length === 0);
      
      logWithTimestamp(`üìä –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:`);
      logWithTimestamp(`  - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${dilovodProducts.length}`);
      logWithTimestamp(`  - –ö–æ–º–ø–ª–µ–∫—Ç–æ–≤: ${productsWithSets.length}`);
      logWithTimestamp(`  - –û–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${regularProducts.length}`);
      
      if (productsWithSets.length > 0) {
        logWithTimestamp(`üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã:`);
        productsWithSets.forEach((product, index) => {
          logWithTimestamp(`  ${index + 1}. ${product.sku} - ${product.name} (${product.set.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)`);
        });
      }

      // –®–∞–≥ 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      logWithTimestamp('\nüìã –®–∞–≥ 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
      const syncResult = await this.syncManager.syncProductsToDatabase(dilovodProducts);
      
      // –®–∞–≥ 4: –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ (—è–∫—ñ —î –≤ –ë–î –∞–ª–µ –Ω–µ–º–∞—î –≤ WordPress)
      logWithTimestamp('\nüìã –®–∞–≥ 4: –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤...');
      await this.syncManager.markOutdatedProducts(skus);
      
      logWithTimestamp('\n‚úÖ === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===');
      logWithTimestamp(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${syncResult.message}`);
      logWithTimestamp(`–£—Å–ø–µ—à–Ω–æ: ${syncResult.success ? '–î–ê' : '–ù–ï–¢'}`);
      
      return syncResult;

    } catch (error) {
      logWithTimestamp('\n‚ùå === –û–®–ò–ë–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ===');
      logWithTimestamp('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Dilovod:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        syncedProducts: 0,
        syncedSets: 0,
        errors: [error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞']
      };
    }
  }

  // ===== –§–£–ù–ö–¶–ò–ò –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• =====

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å –∫–æ–º–ø–ª–µ–∫—Ç–∞–º–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  async getGoodsInfoWithSetsOptimized(skuList: string[]): Promise<DilovodProduct[]> {
    try {
      logWithTimestamp('–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ö –∏–∑ Dilovod...');
      logWithTimestamp('SKU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', skuList);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏
      const pricesResponse = await this.apiClient.getGoodsWithPrices(skuList);
      logWithTimestamp(`–ü–æ–ª—É—á–µ–Ω–æ ${pricesResponse.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏`);
      logWithTimestamp('RAW pricesResponse (first 2):', Array.isArray(pricesResponse) ? pricesResponse.slice(0, 2) : pricesResponse);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const goodsResponse = await this.apiClient.getGoodsFromCatalog(skuList);
      logWithTimestamp(`–ü–æ–ª—É—á–µ–Ω–æ ${goodsResponse.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞`);
      logWithTimestamp('RAW goodsResponse (first 2):', Array.isArray(goodsResponse) ? goodsResponse.slice(0, 2) : goodsResponse);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
      const result = await this.dataProcessor.processGoodsWithSets(pricesResponse, goodsResponse);
      
      return result;
      
    } catch (error) {
      logWithTimestamp('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å –∫–æ–º–ø–ª–µ–∫—Ç–∞–º–∏:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É SKU
  async getBalanceBySkuList(): Promise<DilovodStockBalance[]> {
    try {
      logWithTimestamp('–ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É SKU...');
      
      const skus = await this.fetchSkusDirectlyFromWordPress();
      if (skus.length === 0) {
        return [];
      }

      const stockResponse = await this.apiClient.getStockBalance(skus);
      const processedStock = this.dataProcessor.processStockBalance(stockResponse);
      
      logWithTimestamp(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedStock.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏`);
      
      return processedStock.map(item => ({
        sku: item.sku,
        name: item.name,
        mainStorage: item.mainStorage,
        kyivStorage: item.kyivStorage,
        total: item.total
      }));
      
    } catch (error) {
      logWithTimestamp('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ SKU:', error);
      throw error;
    }
  }

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î
  async updateStockBalancesInDatabase(): Promise<{
    success: boolean;
    message: string;
    updatedProducts: number;
    errors: string[];
  }> {
    try {
      logWithTimestamp('\nüîÑ === –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–°–¢–ê–¢–ö–û–í –¢–û–í–ê–†–û–í –í –ë–î ===');
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ Dilovod
      const stockBalances = await this.getBalanceBySkuList();
      
      if (stockBalances.length === 0) {
        return {
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ Dilovod',
          updatedProducts: 0,
          errors: []
        };
      }

      logWithTimestamp(`–ü–æ–ª—É—á–µ–Ω–æ ${stockBalances.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
      
      const errors: string[] = [];
      let updatedProducts = 0;

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      for (const stockBalance of stockBalances) {
        try {
          const result = await this.syncManager.updateProductStockBalance(
            stockBalance.sku,
            stockBalance.mainStorage,
            stockBalance.kyivStorage
          );
          
          if (result.success) {
            updatedProducts++;
            logWithTimestamp(`‚úÖ –û—Å—Ç–∞—Ç–∫–∏ –¥–ª—è ${stockBalance.sku} –æ–±–Ω–æ–≤–ª–µ–Ω—ã: –°–∫–ª–∞–¥1=${stockBalance.mainStorage}, –°–∫–ª–∞–¥2=${stockBalance.kyivStorage}`);
          } else {
            errors.push(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${stockBalance.sku}: ${result.message}`);
          }
        } catch (error) {
          const errorMessage = `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ ${stockBalance.sku}: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
          logWithTimestamp(errorMessage);
          errors.push(errorMessage);
        }
      }

      logWithTimestamp(`\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –û–°–¢–ê–¢–ö–û–í ===`);
      logWithTimestamp(`–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${updatedProducts}`);
      logWithTimestamp(`–û—à–∏–±–æ–∫: ${errors.length}`);
      
      if (errors.length > 0) {
        logWithTimestamp(`–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫:`);
        errors.forEach((error, index) => {
          logWithTimestamp(`${index + 1}. ${error}`);
        });
      }

      return {
        success: errors.length === 0,
        message: `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedProducts} —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏`,
        updatedProducts,
        errors
      };

    } catch (error) {
      logWithTimestamp('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ë–î:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        updatedProducts: 0,
        errors: [error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞']
      };
    }
  }

  // ===== –¢–ï–°–¢–û–í–´–ï –§–£–ù–ö–¶–ò–ò =====

  // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Dilovod
  async testConnection(): Promise<DilovodTestResult> {
    try {
      logWithTimestamp('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Dilovod...');
      
      const isConnected = await this.apiClient.testConnection();
      
      if (isConnected) {
        return {
          success: true,
          message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Dilovod —É—Å–ø–µ—à–Ω–æ'
        };
      } else {
        return {
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Dilovod'
        };
      }
    } catch (error) {
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      };
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤
  async testSetsOnly(): Promise<DilovodTestResult> {
    try {
      logWithTimestamp('\nüß™ === –¢–ï–°–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø –ö–û–ú–ü–õ–ï–ö–¢–û–í ===');
      
      const skus = await this.fetchSkusDirectlyFromWordPress();
      if (skus.length === 0) {
        return {
          success: false,
          message: '–ù–µ—Ç SKU –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        };
      }

      logWithTimestamp(`–ü–æ–ª—É—á–µ–Ω–æ ${skus.length} SKU –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
      const response = await this.apiClient.getGoodsFromCatalog(skus);
      
      if (!Array.isArray(response)) {
        return {
          success: false,
          message: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞'
        };
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const setParentId = "1100300000001315";
      const potentialSets = response.filter((item: any) => item.parent === setParentId);
      const regularGoods = response.filter((item: any) => item.parent !== setParentId);
      
      logWithTimestamp(`\nüìä –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞:`);
      logWithTimestamp(`  - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${response.length}`);
      logWithTimestamp(`  - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ (parent=${setParentId}): ${potentialSets.length}`);
      logWithTimestamp(`  - –û–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${regularGoods.length}`);
      
      if (potentialSets.length > 0) {
        logWithTimestamp(`\nüéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã:`);
        potentialSets.forEach((item: any, index: number) => {
          logWithTimestamp(`  ${index + 1}. ID: ${item.id}, SKU: ${item.sku}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${item.id__pr || 'N/A'}`);
        });
      }
      
      return {
        success: true,
        message: `–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${potentialSets.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤`,
        data: {
          totalGoods: response.length,
          potentialSets: potentialSets.length,
          regularGoods: regularGoods.length,
          response: response
        }
      };
      
    } catch (error) {
      logWithTimestamp('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      };
    }
  }

  // ===== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ï–®–ï–ú =====

  // –ü–æ–ª—É—á–µ–Ω–∏–µ SKU –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async getTestSkus(): Promise<string[]> {
    return this.fetchSkusDirectlyFromWordPress();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞
  async getCacheStats(): Promise<{
    hasCache: boolean;
    skuCount: number;
    lastUpdated: string | null;
    isExpired: boolean;
  }> {
    return this.cacheManager.getCacheStats();
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞
  async forceRefreshCache(): Promise<{ success: boolean; message: string; skuCount: number }> {
    return this.cacheManager.forceRefreshCache();
  }

  // ===== –§–£–ù–ö–¶–ò–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  async getSyncStats(): Promise<{
    totalProducts: number;
    productsWithSets: number;
    lastSync: string | null;
    categoriesCount: Array<{ name: string; count: number }>;
  }> {
    return this.syncManager.getSyncStats();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
  async getProducts(filters: {
    page?: number;
    limit?: number;
    search?: string;
    category?: string;
    hasSets?: boolean;
  }): Promise<{
    products: any[];
    pagination: {
      page: number;
      limit: number;
      total: number;
      pages: number;
    };
  }> {
    return this.syncManager.getProducts(filters);
  }

  // ===== –§–£–ù–ö–¶–ò–ò –û–ß–ò–°–¢–ö–ò =====

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  async cleanupOldProducts(daysOld?: number): Promise<{
    success: boolean;
    message: string;
    deletedCount: number;
  }> {
    return this.syncManager.cleanupOldProducts(daysOld);
  }

  // ===== –ü–†–ò–í–ê–¢–ù–Ü –ú–ï–¢–û–î–ò =====

  // –ü—Ä—è–º–∏–π –∑–∞–ø–∏—Ç SKU –∑ WordPress (–±–µ–∑ –∫–µ—à—É)
  private async fetchSkusDirectlyFromWordPress(): Promise<string[]> {
    try {
      if (!process.env.WORDPRESS_DATABASE_URL) {
        throw new Error('WORDPRESS_DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      }

      logWithTimestamp('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WordPress –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      logWithTimestamp(`URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${process.env.WORDPRESS_DATABASE_URL.replace(/\/\/.*@/, '//***@')}`);
      
      // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WordPress –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const wordpressDb = new PrismaClient({
        datasources: {
          db: {
            url: process.env.WORDPRESS_DATABASE_URL
          }
        }
      });

      try {
        logWithTimestamp('–í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å –∫ WordPress –±–∞–∑–µ...');
        
        // –ü–æ–ª—É—á–∞–µ–º SKU —Ç–æ–≤–∞—Ä–æ–≤
        const products = await wordpressDb.$queryRaw<WordPressProduct[]>`
          SELECT DISTINCT 
            pm.meta_value as sku,
            COALESCE(CAST(pm2.meta_value AS SIGNED), 1) as stock_quantity
          FROM wp_postmeta pm
          INNER JOIN wp_posts p ON pm.post_id = p.ID
          LEFT JOIN wp_postmeta pm2 ON pm.post_id = pm2.post_id AND pm2.meta_key = '_stock'
          WHERE pm.meta_key = '_sku'
            AND pm.meta_value IS NOT NULL
            AND pm.meta_value != ''
            AND p.post_type = 'product'
            AND p.post_status = 'publish'
          ORDER BY pm.meta_value
        `;

        logWithTimestamp(`SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü–æ–ª—É—á–µ–Ω–æ ${products.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ WordPress`);
        
        if (products.length === 0) {
          logWithTimestamp('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: SQL –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª 0 –∑–∞–ø–∏—Å–µ–π.');
          return [];
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ SKU
        const validSkus = products
          .filter(product => product.sku && product.sku.trim() !== '')
          .map(product => product.sku.trim());

        logWithTimestamp(`–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å ${validSkus.length} –≤–∞–ª–∏–¥–Ω—ã—Ö SKU`);
        
        if (validSkus.length > 0) {
          logWithTimestamp(`–ü—Ä–∏–º–µ—Ä—ã –≤–∞–ª–∏–¥–Ω—ã—Ö SKU: ${validSkus.slice(0, 5).join(', ')}`);
        }

        return validSkus;

      } finally {
        // –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await wordpressDb.$disconnect();
        logWithTimestamp('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WordPress –±–∞–∑–æ–π –∑–∞–∫—Ä—ã—Ç–æ');
      }
      
    } catch (error) {
      logWithTimestamp('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SKU –∏–∑ WordPress:', error);
      throw error;
    }
  }

  // ===== –ó–ê–ö–†–´–¢–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–ô =====

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  async disconnect(): Promise<void> {
    logWithTimestamp('–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è DilovodService...');
    
    await Promise.all([
      this.cacheManager.disconnect(),
      this.syncManager.disconnect()
    ]);
    
    logWithTimestamp('–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è DilovodService –∑–∞–∫—Ä—ã—Ç—ã');
  }
}
