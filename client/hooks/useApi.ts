import { useAuth } from '../contexts/AuthContext';

export const useApi = () => {
  const { refreshToken, forceLogout, checkAuthStatus } = useAuth();

  const apiCall = async (url: string, options: RequestInit = {}) => {
    const startTime = Date.now();
    const method = options.method || 'GET';
    // console.log(`üöÄ [CLIENT] useApi: Starting ${method} request to ${url}`);

    try {
      const response = await fetch(url, {
        ...options,
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
      });

      const responseTime = Date.now() - startTime;
      // console.log(`üì® [CLIENT] useApi: ${method} ${url} -> Status: ${response.status} (${responseTime}ms)`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∏)
      if (response.status === 200) {
        const tokenRefreshed = response.headers.get('X-Token-Refreshed');
        if (tokenRefreshed === 'true') {
          console.log('‚úÖ [CLIENT] useApi: Token was refreshed automatically by server');
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
          await checkAuthStatus();
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ç–æ–∫–µ–Ω —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ cookies)
          return response;
        }
      }

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
      if (response.status === 401) {
        // console.log(`üîê [CLIENT] useApi: Received 401, attempting token refresh...`);
        const errorData = await response.json().catch(() => ({}));

        // –ï—Å–ª–∏ —ç—Ç–æ expired —Ç–æ–∫–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
        if (errorData.shouldRefresh || errorData.code === 'TOKEN_EXPIRED') {
          // console.log(`üîÑ [CLIENT] useApi: Token expired, refreshing...`);
          const refreshSuccess = await refreshToken();

          if (refreshSuccess) {
            // console.log(`‚úÖ [CLIENT] useApi: Token refreshed successfully, updating auth status...`);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            // console.log(`üîÑ [CLIENT] useApi: Calling checkAuthStatus...`);
            await checkAuthStatus();
            // console.log(`üéØ [CLIENT] useApi: checkAuthStatus completed`);

            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
            const retryResponse = await fetch(url, {
              ...options,
              credentials: 'include',
              headers: {
                'Content-Type': 'application/json',
                ...options.headers,
              },
            });

            const retryTime = Date.now() - startTime;
            // console.log(`üîÅ [CLIENT] useApi: Retry ${method} ${url} -> Status: ${retryResponse.status} (${retryTime}ms)`);
            return retryResponse;
          } else {
            // –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            console.error(`‚ùå [CLIENT] useApi: Token refresh failed, forcing logout`);
            forceLogout();
            throw new Error('–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É.');
          }
        } else {
          // –î—Ä—É–≥–∏–µ 401 –æ—à–∏–±–∫–∏ (–Ω–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
          console.error(`‚ùå [CLIENT] useApi: 401 error, not token related, forcing logout`);
          forceLogout();
          throw new Error('–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è');
        }
      }

      return response;
    } catch (error) {
      const errorTime = Date.now() - startTime;
      console.error(`‚ùå [CLIENT] useApi: Request failed after ${errorTime}ms:`, error);
      throw error;
    }
  };

  return { apiCall };
};
