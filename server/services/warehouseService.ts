import { PrismaClient } from '@prisma/client';
import { WarehouseMovement, StockMovementHistory, WarehouseMovementItem } from '../../client/types/warehouse';

const prisma = new PrismaClient();

export class WarehouseService {
  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
  static async createMovement(data: {
    internalDocNumber: string;
    items: any[];
    sourceWarehouse: string;
    destinationWarehouse: string;
    notes?: string;
    createdBy: number;
  }): Promise<WarehouseMovement> {
    const result = await prisma.warehouseMovement.create({
      data: {
        ...data,
        items: JSON.stringify(data.items)
      }
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JsonValue –≤ WarehouseMovementItem[]
    return {
      ...result,
      items: Array.isArray(result.items) ? result.items as unknown as WarehouseMovementItem[] : []
    } as unknown as WarehouseMovement;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  static async updateMovement(id: number, data: {
    items?: any[];
    deviations?: any[];
    status?: string;
    notes?: string;
  }): Promise<WarehouseMovement> {
    const updateData: any = {
      draftLastEditedAt: new Date()
    };

    if (data.items !== undefined) {
      updateData.items = JSON.stringify(data.items);
    }
    if (data.deviations !== undefined) {
      updateData.deviations = JSON.stringify(data.deviations);
    }
    if (data.status !== undefined) {
      updateData.status = data.status;
    }
    if (data.notes !== undefined) {
      updateData.notes = data.notes;
    }

    const result = await prisma.warehouseMovement.update({
      where: { id },
      data: updateData
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JsonValue –≤ WarehouseMovementItem[]
    return {
      ...result,
      items: Array.isArray(result.items) ? result.items as unknown as WarehouseMovementItem[] : []
    } as unknown as WarehouseMovement;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Dilovod
  static async sendToDilovod(id: number, dilovodDocNumber: string): Promise<WarehouseMovement> {
    const result = await prisma.warehouseMovement.update({
      where: { id },
      data: {
        status: 'sent',
        notes: dilovodDocNumber, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ Dilovod –≤ notes
        sentToDilovodAt: new Date()
      }
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JsonValue –≤ WarehouseMovementItem[]
    return {
      ...result,
      items: Array.isArray(result.items) ? result.items as unknown as WarehouseMovementItem[] : []
    } as unknown as WarehouseMovement;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  static async getMovements(params: {
    status?: string;
    warehouse?: string;
    page?: number;
    limit?: number;
  }) {
    const { status, warehouse, page = 1, limit = 20 } = params;
    
    const where: any = {};
    if (status) where.status = status;
    if (warehouse) {
      where.OR = [
        { sourceWarehouse: warehouse },
        { destinationWarehouse: warehouse }
      ];
    }

    const skip = (page - 1) * limit;
    
    const [movements, total] = await Promise.all([
      prisma.warehouseMovement.findMany({
        where,
        orderBy: { draftCreatedAt: 'desc' },
        skip,
        take: limit
      }),
      prisma.warehouseMovement.count({ where })
    ]);

    return {
      movements,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit)
      }
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ ID
  static async getMovementById(id: number): Promise<WarehouseMovement | null> {
    const result = await prisma.warehouseMovement.findUnique({
      where: { id }
    });

    if (!result) return null;

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JsonValue –≤ WarehouseMovementItem[]
    return {
      ...result,
      items: Array.isArray(result.items) ? result.items as unknown as WarehouseMovementItem[] : []
    } as unknown as WarehouseMovement;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
  static async createStockMovement(data: {
    productSku: string;
    warehouse: string;
    movementType: string; // –ò–∑–º–µ–Ω–µ–Ω–æ —Å union type –Ω–∞ string
    quantity: number;
    quantityType: string; // –ò–∑–º–µ–Ω–µ–Ω–æ —Å union type –Ω–∞ string
    batchNumber?: string;
    referenceId?: string;
    referenceType?: string;
    previousBalance: number;
    newBalance: number;
    notes?: string;
    createdBy?: number;
  }): Promise<StockMovementHistory> {
    const result = await prisma.stockMovementHistory.create({
      data
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    return result as StockMovementHistory;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
  static async getStockHistory(params: {
    sku?: string;
    warehouse?: string;
    movementType?: string;
    startDate?: Date;
    endDate?: Date;
    page?: number;
    limit?: number;
  }) {
    const { sku, warehouse, movementType, startDate, endDate, page = 1, limit = 50 } = params;
    
    const where: any = {};
    if (sku) where.productSku = sku;
    if (warehouse) where.warehouse = warehouse;
    if (movementType) where.movementType = movementType;
    if (startDate || endDate) {
      where.movementDate = {};
      if (startDate) where.movementDate.gte = startDate;
      if (endDate) where.movementDate.lte = endDate;
    }

    const skip = (page - 1) * limit;
    
    const [history, total] = await Promise.all([
      prisma.stockMovementHistory.findMany({
        where,
        orderBy: { movementDate: 'desc' },
        skip,
        take: limit
      }),
      prisma.stockMovementHistory.count({ where })
    ]);

    return {
      history,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit)
      }
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º
  static async getCurrentStock(warehouse?: string) {
    const where: any = {};
    if (warehouse) where.warehouse = warehouse;

    const currentStock = await prisma.stockMovementHistory.groupBy({
      by: ['productSku', 'warehouse'],
      where,
      _max: {
        movementDate: true
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ SKU –∏ —Å–∫–ª–∞–¥–∞
    const stockData = await Promise.all(
      currentStock.map(async (item) => {
        const lastRecord = await prisma.stockMovementHistory.findFirst({
          where: {
            productSku: item.productSku,
            warehouse: item.warehouse,
            movementDate: item._max.movementDate
          }
        });
        return lastRecord;
      })
    );

    return stockData.filter(Boolean);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∫–ª–∞–¥–µ
  static async getProductStock(sku: string, warehouse: string): Promise<number> {
    const lastRecord = await prisma.stockMovementHistory.findFirst({
      where: {
        productSku: sku,
        warehouse: warehouse
      },
      orderBy: {
        movementDate: 'desc'
      }
    });

    return lastRecord ? lastRecord.newBalance : 0;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–µ–∂–¥—É —Å–∫–ª–∞–¥–∞–º–∏
  static async getProductsForMovement() {
    try {
      console.log('üè™ [WarehouseService] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è...');

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const products = await prisma.product.findMany({
        where: {
          stockBalanceByStock: {
            not: null
          }
        },
        orderBy: { name: 'asc' }
      });

      console.log(`üè™ [WarehouseService] –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏`);

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫–ª–∞–¥–µ –∏ –ø–∞—Ä—Å–∏–º JSON
      const productsWithStock = products
        .map(product => {
          try {
            const stockBalance = product.stockBalanceByStock
              ? JSON.parse(product.stockBalanceByStock)
              : {};

            // –û—Å—Ç–∞—Ç–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ –ø–æ—Ä—Ü–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–ª–∞–¥–∞—Ö
            const mainStockPortions = stockBalance["1"] || 0;  // –ü–æ—Ä—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫–ª–∞–¥–µ
            const kyivStockPortions = stockBalance["2"] || 0;   // –ü–æ—Ä—Ü–∏–∏ –Ω–∞ –∫–∏–µ–≤—Å–∫–æ–º —Å–∫–ª–∞–¥–µ
            const smallStockPortions = stockBalance["3"] || 0;  // –ü–æ—Ä—Ü–∏–∏ –Ω–∞ –º–∞–ª–æ–º —Å–∫–ª–∞–¥–µ

            // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç "—è—â–∏–∫–∏ / –ø–æ—Ä—Ü–∏–∏"
            const PORTIONS_PER_BOX = 24;
            const mainStockBoxes = Math.floor(mainStockPortions / PORTIONS_PER_BOX);
            const mainStockRemainder = mainStockPortions % PORTIONS_PER_BOX;
            const smallStockBoxes = Math.floor(smallStockPortions / PORTIONS_PER_BOX);
            const smallStockRemainder = smallStockPortions % PORTIONS_PER_BOX;

            

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫–ª–∞–¥–µ
            if (mainStockPortions > 0) {
              return {
                id: product.sku, // –ò—Å–ø–æ–ª—å–∑—É–µ–º SKU –∫–∞–∫ ID
                sku: product.sku,
                name: product.name,
                balance: `${mainStockPortions} / ${smallStockPortions}`, // –æ—Å–Ω–æ–≤–Ω–æ–π / –º–∞–ª—ã–π (–≤ –ø–æ—Ä—Ü–∏—è—Ö)
                details: {
                  boxes: 0, // –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—â–∏–∫–æ–≤ (–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
                  portions: 0, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
                  forecast: 125, // –ó–∞–≥–ª—É—à–∫–∞, –ø–æ–∑–∂–µ –∑–∞–¥–∞–¥–∏–º –ª–æ–≥–∏–∫—É
                  batchNumber: '' // –ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏ (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–π)
                },
                stockData: {
                  mainStock: mainStockPortions,     // –ü–æ—Ä—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫–ª–∞–¥–µ
                  kyivStock: kyivStockPortions,     // –ü–æ—Ä—Ü–∏–∏ –Ω–∞ –∫–∏–µ–≤—Å–∫–æ–º —Å–∫–ª–∞–¥–µ
                  smallStock: smallStockPortions,   // –ü–æ—Ä—Ü–∏–∏ –Ω–∞ –º–∞–ª–æ–º —Å–∫–ª–∞–¥–µ
                  displayFormat: {
                    main: `${mainStockBoxes} / ${mainStockRemainder}`,     // "—è—â–∏–∫–∏ / –ø–æ—Ä—Ü–∏–∏"
                    small: `${smallStockBoxes} / ${smallStockRemainder}`   // "—è—â–∏–∫–∏ / –ø–æ—Ä—Ü–∏–∏"
                  }
                }
              };
            }
            return null;
          } catch (error) {
            console.warn(`üö® [WarehouseService] Failed to parse stockBalanceByStock for product ${product.sku}:`, error);
            console.warn(`üö® [WarehouseService] Raw data:`, product.stockBalanceByStock);
            return null;
          }
        })
        .filter(Boolean);

      console.log(`‚úÖ [WarehouseService] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${productsWithStock.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫–ª–∞–¥–µ`);

      return {
        success: true,
        products: productsWithStock
      };
    } catch (error) {
      console.error('üö® [WarehouseService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
  static async processWarehouseMovement(movementId: number) {
    const movement = await this.getMovementById(movementId);
    if (!movement || movement.status !== 'sent') {
      throw new Error('Invalid movement or status');
    }

    const { items, sourceWarehouse, destinationWarehouse } = movement;

    for (const item of items) {
      const { sku, boxQuantity, portionQuantity, batchNumber } = item;

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
      const sourceBalance = await this.getProductStock(sku, sourceWarehouse);
      const destBalance = await this.getProductStock(sku, destinationWarehouse);

      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
      await this.createStockMovement({
        productSku: sku,
        warehouse: sourceWarehouse,
        movementType: 'transfer_out',
        quantity: boxQuantity,
        quantityType: 'box',
        batchNumber,
        referenceId: movementId.toString(),
        referenceType: 'warehouse_movement',
        previousBalance: sourceBalance,
        newBalance: sourceBalance - boxQuantity,
        notes: `–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ ${destinationWarehouse}`,
        createdBy: movement.createdBy
      });

      // –ü—Ä–∏—Ö–æ–¥—É–µ–º –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–∫–ª–∞–¥
      await this.createStockMovement({
        productSku: sku,
        warehouse: destinationWarehouse,
        movementType: 'transfer_in',
        quantity: boxQuantity,
        quantityType: 'box',
        batchNumber,
        referenceId: movementId.toString(),
        referenceType: 'warehouse_movement',
        previousBalance: destBalance,
        newBalance: destBalance + boxQuantity,
        notes: `–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–∑ ${sourceWarehouse}`,
        createdBy: movement.createdBy
      });
    }
  }
}
