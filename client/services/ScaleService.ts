import { ScaleData } from './EquipmentService';

// –¢–∏–ø—ã –¥–ª—è Web Serial API (–µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º)
declare global {
  interface Navigator {
    serial?: {
      requestPort(options?: { filters?: Array<{ usbVendorId?: number; usbProductId?: number }> }): Promise<SerialPort>;
      getPorts(): Promise<SerialPort[]>;
    };
  }

  interface SerialPort {
    open(options: SerialOptions): Promise<void>;
    close(): Promise<void>;
    readable: ReadableStream<Uint8Array> | null;
    writable: WritableStream<Uint8Array> | null;
  }

  interface SerialOptions {
    baudRate: number;
    dataBits?: number;
    stopBits?: number;
    parity?: string;
    bufferSize?: number;
  }
}

export interface ScaleConnectionConfig {
  comPort: string;
  baudRate: number;
  dataBits: number;
  stopBits: number;
  parity: 'none' | 'even' | 'odd';
}

export interface ScaleProtocol {
  startByte: string;
  endByte: string;
  dataLength: number;
  checksum: boolean;
}

export class ScaleService {
  private port: SerialPort | null = null;
  private reader: ReadableStreamDefaultReader<Uint8Array> | null = null;
  private writer: WritableStreamDefaultWriter<Uint8Array> | null = null;
  private isConnected: boolean = false;
  private config: ScaleConnectionConfig;
  private protocol: ScaleProtocol;
  private weightBuffer: string = '';
  private onWeightChange: ((data: ScaleData) => void) | null = null;
  private onRawData: ((data: string) => void) | null = null;

  constructor() {
    this.config = {
      comPort: 'COM5',
      baudRate: 9600,
      dataBits: 8,
      stopBits: 1,
      parity: 'none'
    };

    // –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –≤–∞–≥ –í–¢–ê-60 (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    this.protocol = {
      startByte: '',     // –ù–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–∞–π—Ç–∞
      endByte: '\n',     // –ö–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
      dataLength: 0,     // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞
      checksum: false
    };
  }

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≤–∞–≥ —á–µ—Ä–µ–∑ Web Serial API
  public async connect(autoConnect: boolean = false): Promise<boolean> {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É Web Serial API
      if (!('serial' in navigator)) {
        console.log('‚ö†Ô∏è ScaleService: Web Serial API –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–∂–µ
      if (this.isConnected && this.port) {
        console.log('üîß ScaleService: –í–∞–≥–∏ –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ');
        return true;
      }

      console.log('üîß ScaleService: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ COM –ø–æ—Ä—Ç—É...');

      // –ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç
      if (autoConnect) {
        try {
          const ports = await navigator.serial.getPorts();
          console.log('üîß ScaleService: –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤:', ports.length);

          if (ports.length > 0) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ—Ä—Ç
            this.port = ports[0];
            console.log('üîß ScaleService: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç');
          } else {
            console.log('‚ö†Ô∏è ScaleService: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä');
            return false;
          }
        } catch (error) {
          console.log('‚ö†Ô∏è ScaleService: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã:', error);
          return false;
        }
      } else {
        // –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –ø–æ—Ä—Ç–∞
        this.port = await navigator.serial.requestPort({
          // filters: [
          //   { usbVendorId: 0x1a86, usbProductId: 0x7523 }, // CH340
          //   { usbVendorId: 0x067b, usbProductId: 0x2303 }, // Prolific
          //   { usbVendorId: 0x0403, usbProductId: 0x6001 }  // FTDI
          // ]
        });
      }

      console.log('üîß ScaleService: –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ä—Ç –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏...');

      // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ä—Ç –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
      await this.port.open({
        baudRate: this.config.baudRate,
        dataBits: this.config.dataBits,
        stopBits: this.config.stopBits,
        parity: this.config.parity,
        bufferSize: 1024
      });

      this.isConnected = true;
      console.log('‚úÖ ScaleService: –í–∞–≥–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ');

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
      this.startReading();

      return true;
    } catch (error) {
      console.log('‚ùå ScaleService: –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≤–∞–≥–∏:', error);
      this.isConnected = false;
      return false;
    }
  }

  // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ –≤–∞–≥
  public async disconnect(): Promise<void> {
    try {
      if (this.reader) {
        await this.reader.cancel();
        this.reader = null;
      }

      if (this.writer) {
        await this.writer.close();
        this.writer = null;
      }

      if (this.port) {
        await this.port.close();
        this.port = null;
      }

      this.isConnected = false;
      console.log('Scale disconnected');
    } catch (error) {
      console.error('Error disconnecting scale:', error);
    }
  }

  // –ó–∞–ø—É—Å–∫ —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –≤–∞–≥
  private async startReading(): Promise<void> {
    if (!this.port || !this.isConnected) return;

    try {
      const textDecoder = new TextDecoder();
      this.reader = this.port.readable?.getReader();

      if (!this.reader) {
        throw new Error('Failed to get reader');
      }

      while (this.isConnected) {
        try {
          const { value, done } = await this.reader.read();

          if (done) break;

          if (value) {
            const chunk = textDecoder.decode(value, { stream: true });
            this.processWeightData(chunk);
          }
        } catch (error) {
          console.error('Error reading from scale:', error);
          break;
        }
      }
    } catch (error) {
      console.error('Failed to start reading from scale:', error);
    }
  }

  // –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –∑ –≤–∞–≥
  private processWeightData(data: string): void {
    this.weightBuffer += data;

    // –ü–µ—Ä–µ–¥–∞—î–º–æ —Å–∏—Ä—ñ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ callback
    if (this.onRawData && data.trim()) {
      this.onRawData(data);
    }

    // –®—É–∫–∞—î–º–æ –ø–æ–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    let endIndex = this.weightBuffer.indexOf(this.protocol.endByte);

    while (endIndex !== -1) {
      const message = this.weightBuffer.substring(0, endIndex);
      this.parseWeightMessage(message);

      // –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      this.weightBuffer = this.weightBuffer.substring(endIndex + 1);

      // –®—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      endIndex = this.weightBuffer.indexOf(this.protocol.endByte);
    }

    // –ï—Å–ª–∏ endByte –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –≤–µ—Å - –ø–∞—Ä—Å–∏–º –∏—Ö —Å—Ä–∞–∑—É
    if (this.weightBuffer.length > 0 && endIndex === -1) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –±—É—Ñ–µ—Ä —á–∏—Å–ª–æ —Å —Ç–æ—á–∫–æ–π
      const weightMatch = this.weightBuffer.match(/[\d]+[.,][\d]+/);
      if (weightMatch) {
        this.parseWeightMessage(this.weightBuffer);
        this.weightBuffer = ''; // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
      }
    }

    // –û—á–∏—â–∞—î–º–æ –±—É—Ñ–µ—Ä —è–∫—â–æ –≤—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π
    if (this.weightBuffer.length > 1000) {
      this.weightBuffer = this.weightBuffer.substring(this.weightBuffer.length - 500);
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∞–≥
  private parseWeightMessage(message: string): void {
    try {
      // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
      let cleanMessage = message.trim();

      // –£–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏
      cleanMessage = cleanMessage.replace(/[a-zA-Z\s]/g, '');

      // –ò—â–µ–º —á–∏—Å–ª–∞ —Å —Ç–æ—á–∫–æ–π (–≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1.234 –∏–ª–∏ 1,234)
      const weightMatch = cleanMessage.match(/[\d]+[.,][\d]+/);

      if (weightMatch) {
        // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        const weightStr = weightMatch[0].replace(',', '.');
        const weight = parseFloat(weightStr);

        if (!isNaN(weight) && weight >= 0) {
          const scaleData: ScaleData = {
            weight: weight,
            unit: 'kg',
            isStable: true, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
            timestamp: new Date()
          };

          // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback —è–∫—â–æ –≤—ñ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
          if (this.onWeightChange) {
            this.onWeightChange(scaleData);
          }
        }
      }
    } catch (error) {
      console.error('‚ùå Error parsing weight message:', error);
    }
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è callback –¥–ª—è –∑–º—ñ–Ω–∏ –≤–∞–≥–∏
  public onWeightData(callback: (data: ScaleData) => void): void {
    this.onWeightChange = callback;
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è callback –¥–ª—è —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö
  public onRawDataReceived(callback: (data: string) => void): void {
    this.onRawData = callback;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∞–≥–∏
  public async getCurrentWeight(): Promise<ScaleData | null> {
    if (!this.isConnected) {
      console.log('‚ö†Ô∏è ScaleService: –í–∞–≥–∏ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ');
      return null;
    }

    console.log('üîß ScaleService: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–∞–≥–∏ –∑ –±—É—Ñ–µ—Ä–∞...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä–µ
    if (this.weightBuffer.length > 0) {
      console.log('üîß ScaleService: –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä–µ, –ø–∞—Ä—Å–∏–º:', this.weightBuffer);

      // –ü–∞—Ä—Å–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ—Å –∏–∑ –±—É—Ñ–µ—Ä–∞
      const weightMatch = this.weightBuffer.match(/[\d]+[.,][\d]+/);
      if (weightMatch) {
        const weightStr = weightMatch[0].replace(',', '.');
        const weight = parseFloat(weightStr);

        if (!isNaN(weight) && weight >= 0) {
          const scaleData: ScaleData = {
            weight: weight,
            unit: 'kg',
            isStable: true,
            timestamp: new Date()
          };

          console.log('‚úÖ ScaleService: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å –∏–∑ –±—É—Ñ–µ—Ä–∞:', scaleData);
          return scaleData;
        }
      }
    }

    // –ï—Å–ª–∏ –≤ –±—É—Ñ–µ—Ä–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–µ—Å —á–µ—Ä–µ–∑ callback
    console.log('üîß ScaleService: –ë—É—Ñ–µ—Ä –ø—É—Å—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ—Å...');

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, –≤–¥—Ä—É–≥ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–¥—É—Ç
    return new Promise((resolve) => {
      const timeout = setTimeout(() => {
        console.log('‚è∞ ScaleService: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ—Å–æ–≤');
        resolve(null);
      }, 1000); // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã

      // –ï—Å–ª–∏ –∑–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏–¥—É—Ç –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      const originalCallback = this.onWeightChange;
      this.onWeightChange = (data: ScaleData) => {
        console.log('‚úÖ ScaleService: –ü–æ–ª—É—á–µ–Ω—ã —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ:', data);
        clearTimeout(timeout);
        this.onWeightChange = originalCallback;
        resolve(data);
      };
    });
  }

  // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ –≤–∞–≥–∏
  private async sendCommand(command: string): Promise<void> {
    if (!this.port || !this.isConnected) {
      throw new Error('Scale is not connected');
    }

    try {
      this.writer = this.port.writable?.getWriter();
      
      if (!this.writer) {
        throw new Error('Failed to get writer');
      }

      const encoder = new TextEncoder();
      const data = encoder.encode(command);
      await this.writer.write(data);
      
      await this.writer.releaseLock();
    } catch (error) {
      console.error('Error sending command to scale:', error);
      throw error;
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
  public isScaleConnected(): boolean {
    return this.isConnected;
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  public updateConfig(newConfig: Partial<ScaleConnectionConfig>): void {
    this.config = { ...this.config, ...newConfig };
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  public getConfig(): ScaleConnectionConfig {
    return { ...this.config };
  }

  // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
  public async testConnection(): Promise<boolean> {
    try {
      const result = await this.connect();
      if (result) {
        await this.disconnect();
      }
      return result;
    } catch (error) {
      console.error('Scale connection test failed:', error);
      return false;
    }
  }

  // –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  public async testConnectionConfigs(): Promise<{config: ScaleConnectionConfig, success: boolean}[]> {
    const configs: ScaleConnectionConfig[] = [
      { comPort: 'COM5', baudRate: 9600, dataBits: 8, stopBits: 1, parity: 'none' },
      { comPort: 'COM5', baudRate: 19200, dataBits: 8, stopBits: 1, parity: 'none' },
      { comPort: 'COM5', baudRate: 9600, dataBits: 8, stopBits: 1, parity: 'even' },
      { comPort: 'COM5', baudRate: 19200, dataBits: 8, stopBits: 1, parity: 'even' },
      { comPort: 'COM5', baudRate: 4800, dataBits: 8, stopBits: 1, parity: 'none' },
      { comPort: 'COM5', baudRate: 38400, dataBits: 8, stopBits: 1, parity: 'none' }
    ];

    const results: {config: ScaleConnectionConfig, success: boolean}[] = [];

    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ—Å–∞–º...\n');

    for (const config of configs) {
      console.log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º: ${config.baudRate} baud, ${config.parity} parity`);

      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        this.updateConfig(config);

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        const success = await this.connect();

        if (success) {
          console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');

          // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö (5 —Å–µ–∫—É–Ω–¥)
          let dataReceived = false;
          const timeout = setTimeout(() => {
            if (!dataReceived) {
              console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥');
            }
          }, 5000);

          const originalCallback = this.onWeightChange;
          this.onWeightChange = (data) => {
            dataReceived = true;
            clearTimeout(timeout);
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: ${data.weight} –∫–≥`);
          };

          await new Promise(resolve => setTimeout(resolve, 5000));

          // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
          await this.disconnect();
          this.onWeightChange = originalCallback;

          results.push({ config, success: dataReceived });
          console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${dataReceived ? '–£–°–ü–ï–•' : '–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ë–ï–ó –î–ê–ù–ù–´–•'}\n`);
        } else {
          console.log('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å\n');
          results.push({ config, success: false });
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}\n`);
        results.push({ config, success: false });
      }
    }

    return results;
  }
}

export default ScaleService;
