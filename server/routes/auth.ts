import { Router, Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { AuthService } from '../services/authService.js';
import { authenticateToken, requireRole } from '../middleware/auth.js';
import { LoginRequest, RegisterRequest, UpdateProfileRequest, RefreshTokenRequest } from '../types/auth.js';

const prisma = new PrismaClient();

const router = Router();

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.post('/register', authenticateToken, requireRole(['admin']), async (req: Request<{}, {}, RegisterRequest>, res: Response) => {
  try {
    console.log('üîç Register request body:', req.body);
    console.log('üîç Register request body type:', typeof req.body);
    console.log('üîç Register request body keys:', Object.keys(req.body));
    console.log('üîç Register request body email:', req.body.email);
    
    const result = await AuthService.register(req.body);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies
    await AuthService.setAuthCookies(res, result.token, result.refreshToken);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤ (–æ–Ω–∏ –≤ cookies)
    res.status(201).json({
      user: result.user,
      expiresIn: result.expiresIn,
      message: 'User successfully registered'
    });
  } catch (error) {
    console.error('‚ùå Register error:', error);
    res.status(400).json({ message: error instanceof Error ? error.message : 'Registration failed' });
  }
});

// –õ–æ–≥–∏–Ω
router.post('/login', async (req: Request, res: Response) => {
  try {
    console.log('üîç Login request body:', req.body);
    console.log('üîç Login request body type:', typeof req.body);
    console.log('üîç Login request body keys:', Object.keys(req.body));
    console.log('üîç Login request body email:', req.body.email);
    
    const result = await AuthService.login(req.body);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies
    await AuthService.setAuthCookies(res, result.token, result.refreshToken);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤ (–æ–Ω–∏ –≤ cookies)
    res.json({
      user: result.user,
      expiresIn: result.expiresIn,
      message: 'Login successful'
    });
  } catch (error) {
    console.error('‚ùå Login error:', error);
    res.status(401).json({ message: error instanceof Error ? error.message : 'Login failed' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
router.post('/refresh', async (req: Request, res: Response) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º refresh token –∏–∑ cookies
    const { refreshToken } = await AuthService.getTokenFromCookies(req);
    if (!refreshToken) {
      return res.status(401).json({ message: 'Refresh token not found' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É—è refresh token –∏–∑ cookies
    const result = await AuthService.refreshToken({ refreshToken });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ cookies
    await AuthService.setAuthCookies(res, result.token, result.refreshToken);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤ (–æ–Ω–∏ –≤ cookies)
    res.json({
      expiresIn: result.expiresIn,
      message: 'Token successfully refreshed'
    });
  } catch (error) {
    res.status(401).json({ message: error instanceof Error ? error.message : 'Failed to refresh token' });
  }
});

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
router.post('/logout', authenticateToken, async (req: Request, res: Response) => {
  try {
    await AuthService.logout(req.user!.userId);
    
    // –û—á–∏—â–∞–µ–º cookies
    await AuthService.clearAuthCookies(res);
    
    res.json({ message: 'Successfully logged out' });
  } catch (error) {
    res.status(500).json({ message: 'Logout failed' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–æ—É—Ç)
router.get('/profile', authenticateToken, async (req: Request, res: Response) => {
  try {
    const user = await AuthService.getUserById(req.user!.userId);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    const { password, ...userWithoutPassword } = user;
    res.json(userWithoutPassword);
  } catch (error) {
    res.status(500).json({ message: 'Failed to get profile' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–æ—É—Ç)
router.put('/profile', authenticateToken, async (req: Request<{}, {}, UpdateProfileRequest>, res: Response) => {
  try {
    const updatedUser = await AuthService.updateProfile(req.user!.userId, req.body);
    res.json({ 
      success: true, 
      message: 'Profile successfully updated',
      user: updatedUser
    });
  } catch (error) {
    res.status(400).json({ 
      success: false,
      message: error instanceof Error ? error.message : 'Failed to update profile' 
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.get('/roles', authenticateToken, requireRole(['admin']), async (req: Request, res: Response) => {
  try {
    const roles = await prisma.user.findMany({
      select: {
        role: true,
        roleName: true
      },
      where: {
        isActive: true
      },
      distinct: ['role']
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–æ–ª–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–æ–ª–µ–π
    const uniqueRoles = roles.map(user => ({
      value: user.role,
      label: user.roleName || getRoleLabel(user.role)
    }));

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const baseRoles = [
      { value: 'admin', label: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä' },
      { value: 'boss', label: '–ù–∞—á–∞–ª—å–Ω–∏–∫' },
      { value: 'shop-manager', label: '–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∞–≥–∞–∑–∏–Ω—É' },
      { value: 'ads-manager', label: '–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∫–ª–∞–º–∏' },
      { value: 'storekeeper', label: '–ö–æ–º—ñ—Ä–Ω–∏–∫' }
    ];

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const allRoles = [...baseRoles];
    uniqueRoles.forEach(role => {
      if (!allRoles.find(r => r.value === role.value)) {
        allRoles.push(role);
      }
    });

    res.json(allRoles);
  } catch (error) {
    console.error('Error fetching roles:', error);
    res.status(500).json({ message: 'Failed to fetch roles' });
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏
function getRoleLabel(role: string): string {
  const roleLabels: Record<string, string> = {
    'admin': '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä',
    'boss': '–ù–∞—á–∞–ª—å–Ω–∏–∫',
    'shop-manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∞–≥–∞–∑–∏–Ω—É',
    'ads-manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∫–ª–∞–º–∏',
    'storekeeper': '–ö–æ–º—ñ—Ä–Ω–∏–∫'
  };
  return roleLabels[role] || role.charAt(0).toUpperCase() + role.slice(1);
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.get('/users', authenticateToken, requireRole(['admin']), async (req: Request, res: Response) => {
  try {
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        roleName: true,
        isActive: true,
        createdAt: true,
        lastLoginAt: true,
        lastActivityAt: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const formattedUsers = users.map(user => ({
      id: user.id,
      email: user.email,
      name: user.name || '',
      role: user.role,
      roleName: user.roleName || '',
      roleLabel: user.roleName || getRoleLabel(user.role),
      isActive: user.isActive,
      createdAt: user.createdAt,
      lastLoginAt: user.lastLoginAt,
      lastActivityAt: user.lastActivityAt
    }));

    res.json(formattedUsers);
  } catch (error) {
    console.error('Error fetching users:', error);
    res.status(500).json({ message: 'Failed to fetch users' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.put('/users/:id', authenticateToken, requireRole(['admin']), async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { name, email, password, role, roleName, isActive } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π email –Ω–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if (email) {
      const existingUser = await prisma.user.findFirst({
        where: {
          email: email,
          NOT: { id: parseInt(id) }
        }
      });

      if (existingUser) {
        return res.status(400).json({ message: '–¶–µ–π email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º' });
      }
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData: any = {
      name: name || undefined,
      email: email || undefined,
      role: role || undefined,
      roleName: roleName || undefined,
      isActive: isActive !== undefined ? isActive : undefined
    };

    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
    if (password) {
      const bcrypt = await import('bcryptjs');
      updateData.password = await bcrypt.hash(password, 10);
    }

    const updatedUser = await prisma.user.update({
      where: { id: parseInt(id) },
      data: updateData,
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        roleName: true,
        isActive: true,
        updatedAt: true
      }
    });

    res.json({
      success: true,
      message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π',
      user: {
        ...updatedUser,
        roleLabel: updatedUser.roleName || getRoleLabel(updatedUser.role)
      }
    });
  } catch (error) {
    console.error('Error updating user:', error);
    res.status(500).json({ message: 'Failed to update user' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.delete('/users/:id', authenticateToken, requireRole(['admin']), async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const user = await prisma.user.findUnique({
      where: { id: parseInt(id) }
    });

    if (!user) {
      return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω –Ω–µ —É–¥–∞–ª—è–µ—Ç —Å–∞–º —Å–µ–±—è
    if (user.id === req.user!.userId) {
      return res.status(400).json({ message: '–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç' });
    }

    await prisma.user.delete({
      where: { id: parseInt(id) }
    });

    res.json({
      success: true,
      message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π'
    });
  } catch (error) {
    console.error('Error deleting user:', error);
    res.status(500).json({ message: 'Failed to delete user' });
  }
});

export default router;
