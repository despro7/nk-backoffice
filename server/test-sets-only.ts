// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ (parent = 1100300000001315)
import 'dotenv/config';
import { DilovodService } from './services/dilovod/DilovodService';

async function testSetsOnly() {
  const dilovodService = new DilovodService();
  
  try {
    console.log('=== –¢–ï–°–¢ –¢–û–õ–¨–ö–û –ö–û–ú–ü–õ–ï–ö–¢–û–í ===');
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å parent = 1100300000001315');
    
    // –ü–æ–ª—É—á–∞–µ–º SKU –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\n1. –ü–æ–ª—É—á–∞–µ–º SKU –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    const skus = await dilovodService.getTestSkus();
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${skus.length} SKU:`, skus);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ SKU
    console.log('\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ SKU...');
    const result = await dilovodService.getGoodsInfoWithSetsOptimized(skus);
    
    console.log('\n3. –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log(`–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.length}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const productsWithSets = result.filter(p => p.set && p.set.length > 0);
    const regularProducts = result.filter(p => !p.set || p.set.length === 0);
    
    console.log(`–ö–æ–º–ø–ª–µ–∫—Ç–æ–≤: ${productsWithSets.length}`);
    console.log(`–û–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${regularProducts.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ parent ID
    const byParent: { [key: string]: any[] } = {};
    result.forEach(product => {
      const parent = (product as any).parent || 'unknown';
      if (!byParent[parent]) {
        byParent[parent] = [];
      }
      byParent[parent].push(product);
    });
    
    console.log('\nüìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ parent ID:');
    Object.keys(byParent).forEach(parent => {
      console.log(`  Parent ${parent}: ${byParent[parent].length} —Ç–æ–≤–∞—Ä–æ–≤`);
      byParent[parent].slice(0, 3).forEach((product, index) => {
        console.log(`    ${index + 1}. ${product.sku} - ${product.name}`);
      });
    });
    
    if (productsWithSets.length > 0) {
      console.log('\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã:');
      productsWithSets.forEach((product, index) => {
        console.log(`  ${index + 1}. ${product.sku} - ${product.name} (${product.set.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)`);
        console.log(`     –°–æ—Å—Ç–∞–≤:`, product.set);
      });
    }
    
    if (regularProducts.length > 0) {
      console.log('\nüì¶ –û–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–ø–µ—Ä–≤—ã–µ 5):');
      regularProducts.slice(0, 5).forEach((product, index) => {
        console.log(`  ${index + 1}. ${product.sku} - ${product.name}`);
      });
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await dilovodService.disconnect();
  }
}

testSetsOnly();
