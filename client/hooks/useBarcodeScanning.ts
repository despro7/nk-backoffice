import { useCallback, useRef, useState } from 'react';
import type { OrderChecklistItem } from '../types/orderAssembly';
import { addToast } from '@heroui/toast';

interface UseBarcodeScanningProps {
  checklistItems: OrderChecklistItem[];
  activeBoxIndex: number;
  setChecklistItems: React.Dispatch<React.SetStateAction<OrderChecklistItem[]>>;
  debugMode?: boolean;
}

const SCAN_COUNTDOWN = 2000; // 2 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è–º–∏
const TOAST_COUNTDOWN = 3000; // 3 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏

export function useBarcodeScanning({
  checklistItems,
  activeBoxIndex,
  setChecklistItems,
  debugMode = false
}: UseBarcodeScanningProps) {
  const [lastScannedCode, setLastScannedCode] = useState<string>('');
  const [lastScanTimestamp, setLastScanTimestamp] = useState<number>(() => Date.now() - 3000);
  
  // Ref –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –∫–æ–¥—É (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏)
  const lastProcessedCodeRef = useRef<string>('');
  const lastProcessedTimestampRef = useRef<number>(0);
  
  // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ü—ñ—ó toast —Å–ø–æ–≤—ñ—â–µ–Ω—å
  const lastToastTimestampsRef = useRef<Record<string, number>>({});
  const activeToastsRef = useRef<Set<string>>(new Set());
  
  // useRef –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –±–µ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
  const checklistItemsRef = useRef<OrderChecklistItem[]>([]);
  const activeBoxIndexRef = useRef<number>(0);

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ ref –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
  checklistItemsRef.current = checklistItems;
  activeBoxIndexRef.current = activeBoxIndex;

  /**
   * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É toast –∑ –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è–º –¥—É–±–ª—ñ–∫–∞—Ü—ñ—ó
   */
  const showToastWithCountdown = useCallback((options: Parameters<typeof addToast>[0], toastKey: string) => {
    const currentTime = Date.now();
    const lastToastTime = lastToastTimestampsRef.current[toastKey] || 0;
    const timeSinceLastToast = currentTime - lastToastTime;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –≤–∂–µ —Ç–∞–∫–∏–π toast
    if (activeToastsRef.current.has(toastKey)) {
      console.log(`üö´ Toast "${toastKey}" –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ`);
      return;
    }

    // –£ —Ä–µ–∂–∏–º—ñ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è –∞–±–æ —è–∫—â–æ –º–∏–Ω—É–ª–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∞—Å—É - –ø–æ–∫–∞–∑—É—î–º–æ toast
    if (debugMode || timeSinceLastToast >= TOAST_COUNTDOWN) {
      console.log(`üçû –ü–æ–∫–∞–∑—É—î–º–æ toast "${toastKey}" (–ø—Ä–æ–π—à–ª–æ ${timeSinceLastToast}–º—Å)`);

      // –î–æ–¥–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–æ toast, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –≤ HeroUI
      const uniqueId = `${toastKey}-${currentTime}-${Math.random().toString(36).substr(2, 9)}`;
      const toastWithId = {
        ...options,
        id: uniqueId
      };

      // –ü–æ–∑–Ω–∞—á–∞—î–º–æ toast —è–∫ –∞–∫—Ç–∏–≤–Ω–∏–π
      activeToastsRef.current.add(toastKey);

      addToast(toastWithId);
      lastToastTimestampsRef.current[toastKey] = currentTime;

      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–µ—Ä–µ–∑ timeout (—Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ —á–∞—Å –∂–∏—Ç—Ç—è toast)
      const cleanupTimeout = (options.timeout || 10000) + 1000;
      setTimeout(() => {
        activeToastsRef.current.delete(toastKey);
        console.log(`üßπ Toast "${toastKey}" –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö`);
      }, cleanupTimeout);
    } else {
      console.log(`üö´ Toast "${toastKey}" –ø—Ä–æ–ø—É—â–µ–Ω–∏–π (–∑–∞–ª–∏—à–∏–ª–æ—Å—å ${TOAST_COUNTDOWN - timeSinceLastToast}–º—Å)`);
    }
  }, [debugMode]);

  /**
   * –§—É–Ω–∫—Ü—ñ—è —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
   */
  const resetScanState = useCallback(() => {
    setLastScannedCode('');
    setLastScanTimestamp(Date.now());
    // –°–∫–∏–¥–∞—î–º–æ ref —â–æ–± –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å–∫–∞–Ω –ø—Ä–æ–π—à–æ–≤
    lastProcessedCodeRef.current = '';
    lastProcessedTimestampRef.current = 0;
    console.log('üîÑ [useBarcodeScanning] –°—Ç–∞–Ω —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ');
    addToast({
      title: "–°—Ç–∞–Ω —Å–∫–∏–Ω—É—Ç–æ",
      description: "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –Ω–æ–≤–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è",
      color: "primary",
      timeout: 2000
    });
  }, []);

  /**
   * –ú–µ–º–æ—ñ–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
   */
  const handleBarcodeScan = useCallback((scannedCode: string) => {
    const currentTime = Date.now();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –æ–±—Ä–æ–±–ª—è–ª–∏ –º–∏ –≤–∂–µ —Ü–µ–π –∫–æ–¥
    const isAlreadyProcessed = scannedCode === lastProcessedCodeRef.current &&
                               currentTime - lastProcessedTimestampRef.current < SCAN_COUNTDOWN;

    if (isAlreadyProcessed && !debugMode) {
      console.log('‚è≥ [useBarcodeScanning] –ö–æ–¥ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–¥–∞–≤–Ω–æ:', scannedCode);
      return;
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ ref
    lastProcessedCodeRef.current = scannedCode;
    lastProcessedTimestampRef.current = currentTime;

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ–Ω—à–∏–º –∫–æ–¥–æ–º
    setLastScanTimestamp(currentTime);
    setLastScannedCode(scannedCode);

    console.log('üì± [useBarcodeScanning] –ù–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', scannedCode);

    // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ ref
    const currentChecklistItems = checklistItemsRef.current;
    const currentActiveBoxIndex = activeBoxIndexRef.current;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–≤–∞–∂–µ–Ω–∞ –ø–æ—Ç–æ—á–Ω–∞ –∫–æ—Ä–æ–±–∫–∞
    const currentBox = currentChecklistItems.find(item =>
      item.type === 'box' && (item.boxIndex || 0) === currentActiveBoxIndex
    );

    console.log('üîç [useBarcodeScanning] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ—Ä–æ–±–∫–∏:', {
      activeBoxIndex: currentActiveBoxIndex,
      currentBoxFound: !!currentBox,
      currentBoxStatus: currentBox?.status,
      currentBoxName: currentBox?.name
    });

    // –Ø–∫—â–æ –∫–æ—Ä–æ–±–∫–∞ –Ω–µ –∑–≤–∞–∂–µ–Ω–∞, —ñ–≥–Ω–æ—Ä—É—î–º–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
    const isBoxWeighed = currentBox?.status === 'done';

    if (!isBoxWeighed) {
      console.log('üö´ [useBarcodeScanning] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –∫–æ—Ä–æ–±–∫–∞ –Ω–µ –≤–∑–≤–µ—à–µ–Ω–∞');
      showToastWithCountdown({
        title: "–°–ø–æ—á–∞—Ç–∫—É –∑–≤–∞–∂—Ç–µ –∫–æ—Ä–æ–±–∫—É",
        description: "–ù–µ –º–æ–∂–Ω–∞ —Å–∫–∞–Ω—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏, –ø–æ–∫–∏ –∫–æ—Ä–æ–±–∫–∞ –Ω–µ –±—É–¥–µ –∑–≤–∞–∂–µ–Ω–∞",
        color: "warning",
        timeout: 3000
      }, "box-not-weighed");
      return;
    }

    // –®—É–∫–∞—î–º–æ —Ç–æ–≤–∞—Ä –ø–æ SKU
    const foundItem = currentChecklistItems.find(item => item.sku === scannedCode);

    if (foundItem) {
      console.log('‚úÖ [useBarcodeScanning] –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä:', foundItem.name);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –º–∞—î —Ç–æ–≤–∞—Ä –≤–∂–µ —Å—Ç–∞—Ç—É—Å 'done' - –ó–ê–ë–û–†–û–ù–Ø–Ñ–ú–û —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
      if (foundItem.status === 'done') {
        console.log('üö´ [useBarcodeScanning] –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ —Å—Ç–∞—Ç—É—Å–µ done:', foundItem.name);
        showToastWithCountdown({
          title: "–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ",
          description: `${foundItem.name} –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ`,
          color: "danger",
          timeout: 3000
        }, `scan-forbidden-${foundItem.id}`);
        return;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ç–æ–≤–∞—Ä –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å—ñ 'awaiting_confirmation' (–∫–æ—Ä–æ–±–∫–∏)
      if (foundItem.type === 'box' && foundItem.status !== 'awaiting_confirmation') {
        console.log('üö´ [useBarcodeScanning] –ö–æ—Ä–æ–±–∫–∏ –Ω–µ —Å–∫–∞–Ω–∏—Ä—É—é—Ç—Å—è, –∫—Ä–æ–º–µ awaiting_confirmation:', foundItem.name);
        showToastWithCountdown({
          title: "–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ",
          description: "–ö–æ—Ä–æ–±–∫–∏ –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞–Ω—É–≤–∞—Ç–∏",
          color: "warning",
          timeout: 3000
        }, `box-scan-forbidden-${foundItem.id}`);
        return;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ç–æ–≤–∞—Ä –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π –∫–æ—Ä–æ–±—Ü—ñ
      if ((foundItem.boxIndex || 0) !== currentActiveBoxIndex) {
        console.log('üö´ [useBarcodeScanning] –¢–æ–≤–∞—Ä –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ—Ä–æ–±–∫–µ:', foundItem.name);
        showToastWithCountdown({
          title: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫–æ—Ä–æ–±–∫–∞",
          description: `${foundItem.name} –Ω–µ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –∫–æ—Ä–æ–±—Ü—ñ`,
          color: "warning",
          timeout: 3000
        }, `wrong-box-${foundItem.id}`);
        return;
      }

      // –¢–û–ß–ù–û –¢–ê–ö–ê –ñ –õ–û–ì–Ü–ö–ê –Ø–ö –í handleItemClick:
      // 1. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å 'pending' –¥–ª—è –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
      setChecklistItems(prevItems =>
        prevItems.map(item => {
          if (item.id === foundItem.id) {
            return { ...item, status: 'pending' as const };
          }
          // 2. –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å —ñ–Ω—à–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ default —Ç—ñ–ª—å–∫–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π –∫–æ—Ä–æ–±—Ü—ñ
          if (item.status === 'pending' && (item.boxIndex || 0) === currentActiveBoxIndex) {
            return { ...item, status: 'default' as const };
          }
          return item;
        })
      );

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      addToast({
        title: "–®—Ç—Ä–∏—Ö-–∫–æ–¥ –≤—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω–æ",
        description: `${foundItem.name} –≤–∏–±—Ä–∞–Ω–æ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—ó`,
        color: "success",
        timeout: 2000
      });

    } else {
      console.log('‚ùå [useBarcodeScanning] –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', scannedCode);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      showToastWithCountdown({
        title: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
        description: `–®—Ç—Ä–∏—Ö-–∫–æ–¥ ${scannedCode} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∂–æ–¥–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É`,
        color: "warning",
        timeout: 3000
      }, `item-not-found-${scannedCode}`);
    }
  }, [debugMode, showToastWithCountdown, setChecklistItems]);

  return {
    handleBarcodeScan,
    resetScanState,
    lastScannedCode,
    lastScanTimestamp
  };
}

