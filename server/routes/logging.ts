import { Router, Request, Response } from 'express';
import { authenticateToken } from '../middleware/auth.js';
import fs from 'fs';
import path from 'path';

const router = Router();

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
const SETTINGS_FILE = path.join(process.cwd(), 'logging-settings.json');

// –¢–∏–ø—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º)
interface ConsoleLoggingSettings {
  authContextLogs: boolean;
  apiCallLogs: boolean; 
  routingLogs: boolean;
  equipmentLogs: boolean;
  debugLogs: boolean;
  performanceLogs: boolean;
  // –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  loggingSettingsLogs: boolean;
  orderAssemblyLogs: boolean;
  cookieLogs: boolean;
  warehouseMovementLogs: boolean;
}

interface ToastLoggingSettings {
  authSuccess: boolean;
  authErrors: boolean;
  tokenRefresh: boolean;
  tokenExpiry: boolean;
  apiErrors: boolean;
  equipmentStatus: boolean;
  systemNotifications: boolean;
}

interface LoggingSettings {
  console: ConsoleLoggingSettings;
  toast: ToastLoggingSettings;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const defaultSettings: LoggingSettings = {
  console: {
    authContextLogs: true,
    apiCallLogs: false,
    routingLogs: false,
    equipmentLogs: true,
    debugLogs: false,
    performanceLogs: false,
    // –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    loggingSettingsLogs: false,
    orderAssemblyLogs: false,
    cookieLogs: false,
    warehouseMovementLogs: false
  },
  toast: {
    authSuccess: true,
    authErrors: true,
    tokenRefresh: true,
    tokenExpiry: true,
    apiErrors: true,
    equipmentStatus: true,
    systemNotifications: true
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
function loadSettingsFromFile(): LoggingSettings {
  try {
    if (fs.existsSync(SETTINGS_FILE)) {
      const data = fs.readFileSync(SETTINGS_FILE, 'utf8');
      const settings = JSON.parse(data);
      console.log('üìã [LoggingRoute] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞');
      return { ...defaultSettings, ...settings };
    }
  } catch (error) {
    console.error('‚ùå [LoggingRoute] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞:', error);
  }
  console.log('üìã [LoggingRoute] –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
  return defaultSettings;
}

function saveSettingsToFile(settings: LoggingSettings): boolean {
  try {
    fs.writeFileSync(SETTINGS_FILE, JSON.stringify(settings, null, 2));
    console.log('üíæ [LoggingRoute] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª');
    return true;
  } catch (error) {
    console.error('‚ùå [LoggingRoute] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª:', error);
    return false;
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
let loggingSettings: LoggingSettings = loadSettingsFromFile();

// GET /api/settings/logging - –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
router.get('/', (req: Request, res: Response) => {
  try {
    console.log('üîß [LoggingRoute] –ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)');
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º GET –∑–∞–ø—Ä–æ—Å–µ
    loggingSettings = loadSettingsFromFile();
    
    res.json(loggingSettings);
  } catch (error) {
    console.error('‚ùå [LoggingRoute] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    res.status(500).json({ 
      error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è' 
    });
  }
});

// PUT /api/settings/logging - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
router.put('/', authenticateToken, (req: Request, res: Response) => {
  try {
    console.log('üîß [LoggingRoute] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user?.email);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    const { console: consoleSettings, toast: toastSettings } = req.body;
    
    if (!consoleSettings || !toastSettings) {
      console.error('‚ùå [LoggingRoute] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö');
      return res.status(400).json({ 
        error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω–∏—Ö' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π console
    const requiredConsoleFields: (keyof ConsoleLoggingSettings)[] = [
      'authContextLogs', 'apiCallLogs', 'routingLogs', 'equipmentLogs', 'debugLogs', 'performanceLogs',
      // –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      'loggingSettingsLogs', 'orderAssemblyLogs', 'cookieLogs', 'warehouseMovementLogs'
    ];

    const requiredToastFields: (keyof ToastLoggingSettings)[] = [
      'authSuccess', 'authErrors', 'tokenRefresh', 'tokenExpiry', 'apiErrors', 'equipmentStatus', 'systemNotifications'
    ];

    for (const field of requiredConsoleFields) {
      if (typeof consoleSettings[field] !== 'boolean') {
        console.error(`‚ùå [LoggingRoute] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ console.${field}`);
        return res.status(400).json({ 
          error: `–í—ñ–¥—Å—É—Ç–Ω—î –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ–ª–µ console.${field}` 
        });
      }
    }

    for (const field of requiredToastFields) {
      if (typeof toastSettings[field] !== 'boolean') {
        console.error(`‚ùå [LoggingRoute] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ toast.${field}`);
        return res.status(400).json({ 
          error: `–í—ñ–¥—Å—É—Ç–Ω—î –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ–ª–µ toast.${field}` 
        });
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–∞–º—è—Ç–∏
    loggingSettings = {
      console: { ...consoleSettings },
      toast: { ...toastSettings }
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    const fileSaved = saveSettingsToFile(loggingSettings);
    if (!fileSaved) {
      return res.status(500).json({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª'
      });
    }

    console.log('‚úÖ [LoggingRoute] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');

    res.json({ 
      success: true, 
      message: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ',
      settings: loggingSettings 
    });
    
  } catch (error) {
    console.error('‚ùå [LoggingRoute] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    res.status(500).json({ 
      error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è' 
    });
  }
});

// POST /api/settings/logging/reset - —Å–±—Ä–æ—Å–∏—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
router.post('/reset', authenticateToken, (req: Request, res: Response) => {
  try {
    console.log('üîß [LoggingRoute] –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user?.email);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    loggingSettings = { ...defaultSettings };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    const fileSaved = saveSettingsToFile(loggingSettings);
    if (!fileSaved) {
      return res.status(500).json({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Ñ–∞–π–ª'
      });
    }

    console.log('‚úÖ [LoggingRoute] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º');

    res.json({ 
      success: true, 
      message: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ –¥–æ —Ç–∏–ø–æ–≤–∏—Ö',
      settings: loggingSettings 
    });
    
  } catch (error) {
    console.error('‚ùå [LoggingRoute] –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    res.status(500).json({ 
      error: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∏–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è' 
    });
  }
});

export default router;
