import React, { useState, useEffect } from 'react';
import {
  Card,
  CardHeader,
  CardBody,
  CardFooter,
  Switch,
  Button
} from '@heroui/react';
import { LoggingService, LoggingSettings as LoggingSettingsType, ConsoleLoggingSettings, ToastLoggingSettings } from '../services/LoggingService';
import { DynamicIcon } from 'lucide-react/dynamic';

export const LoggingSettingsComponent: React.FC = () => {
  const [settings, setSettings] = useState<LoggingSettingsType | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);
  const [isInitialized, setIsInitialized] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadSettings();
  }, []);

  const loadSettings = async () => {
    try {
      LoggingService.loggingSettingsLog('üîß –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è...');

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ LoggingService
      const currentSettings = LoggingService.getSettings();
      setSettings(currentSettings);
      setIsInitialized(true);
      LoggingService.loggingSettingsLog('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ LoggingService:', currentSettings);

    } catch (error) {
      console.error('üîß [LoggingSettings] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∫–∞–∂–µ—Ç –ª–æ–∞–¥–µ—Ä
      setIsInitialized(true);
    }
  };

  const saveSettings = async () => {
    if (!settings) return;
    
    setIsLoading(true);
    try {
      LoggingService.loggingSettingsLog('üîß –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...');
      LoggingService.loggingSettingsLog('üîß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(settings, null, 2));

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ —Å—Ä–∞–∑—É (–¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞)
      LoggingService.updateSettings(settings);
      LoggingService.loggingSettingsLog('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ');

      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const success = await LoggingService.saveSettings(settings);
      
      if (success) {
        setHasChanges(false);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        LoggingService.toastSystemNotification(
          "‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ",
          "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
          "success"
        );

        LoggingService.loggingSettingsLog('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      } else {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–æ–±–ª–µ–º–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        LoggingService.toastSystemNotification(
          "‚ö†Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ",
          "–ó–º—ñ–Ω–∏ –¥—ñ—é—Ç—å, –∞–ª–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
          "warning"
        );
      }
      
    } catch (error) {
      console.error('Error saving logging settings:', error);
      LoggingService.toastSystemNotification(
        "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è",
        "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
        "danger"
      );
    } finally {
      setIsLoading(false);
    }
  };

  const updateConsoleSetting = (key: keyof ConsoleLoggingSettings, value: boolean) => {
    if (!settings) return;
    
    setSettings(prev => prev ? {
      ...prev,
      console: {
        ...prev.console,
        [key]: value
      }
    } : prev);
    setHasChanges(true);
  };

  const updateToastSetting = (key: keyof ToastLoggingSettings, value: boolean) => {
    if (!settings) return;
    
    setSettings(prev => prev ? {
      ...prev,
      toast: {
        ...prev.toast,
        [key]: value
      }
    } : prev);
    setHasChanges(true);
  };

  const resetToDefaults = () => {
    const defaultSettings: LoggingSettingsType = {
      console: {
        authContextLogs: true,
        apiCallLogs: false,
        routingLogs: false,
        equipmentLogs: true,
        debugLogs: false,
        performanceLogs: false,
        // –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        loggingSettingsLogs: false,
        orderAssemblyLogs: false,
        cookieLogs: false,
        warehouseMovementLogs: false,
        productSetsLogs: false
      },
      toast: {
        authSuccess: true,
        authErrors: true,
        tokenRefresh: true,
        tokenExpiry: true,
        apiErrors: true,
        equipmentStatus: true,
        systemNotifications: true
      }
    };
    
    setSettings(defaultSettings);
    setHasChanges(true);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const demonstrateConsoleLog = (type: keyof ConsoleLoggingSettings) => {
    switch (type) {
      case 'authContextLogs':
        LoggingService.authLog('üîë –î–µ–º–æ: –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', { expiresIn: 120 });
        break;
      case 'apiCallLogs':
        LoggingService.apiLog('üöÄ –î–µ–º–æ: API –∑–∞–ø—Ä–æ—Å GET /api/orders -> 200 (150ms)');
        break;
      case 'routingLogs':
        LoggingService.routeLog('üß≠ –î–µ–º–æ: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É /settings/logging');
        break;
      case 'equipmentLogs':
        LoggingService.equipmentLog('‚öñÔ∏è –î–µ–º–æ: –í–µ—Å—ã VTA-60 –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, –≤–µ—Å: 1.25 –∫–≥');
        break;
      case 'debugLogs':
        LoggingService.debugLog('üêõ –î–µ–º–æ: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', { state: 'active', count: 5 });
        break;
      case 'performanceLogs':
        LoggingService.perfLog('‚ö° –î–µ–º–æ: –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∑–∞ 15ms');
        break;
      // –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      case 'loggingSettingsLogs':
        LoggingService.loggingSettingsLog('‚öôÔ∏è –î–µ–º–æ: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
        break;
      case 'orderAssemblyLogs':
        LoggingService.orderAssemblyLog('üì¶ –î–µ–º–æ: –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ12345 –≥–æ—Ç–æ–≤–µ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏');
        break;
      case 'cookieLogs':
        LoggingService.cookieLog('üç™ –î–µ–º–æ: Cookie "user_theme" –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º "dark"');
        break;
      case 'warehouseMovementLogs':
        LoggingService.warehouseMovementLog('üè≠ –î–µ–º–æ: –°–∫–ª–∞–¥—Å—å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç #WM-001 —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        break;
      case 'productSetsLogs':
        LoggingService.productSetsLog('üõí –î–µ–º–æ: –ù–∞–±—ñ—Ä —Ç–æ–≤–∞—Ä—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        break;
    }
  };

  const demonstrateToast = (type: keyof ToastLoggingSettings) => {
    switch (type) {
      case 'authSuccess':
        LoggingService.toastAuthSuccess('demo@example.com');
        break;
      case 'authErrors':
        LoggingService.toastAuthError('–ù–µ–≤—ñ—Ä–Ω—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ');
        break;
      case 'tokenRefresh':
        LoggingService.toastTokenRefreshed('demo@example.com');
        break;
      case 'tokenExpiry':
        LoggingService.toastTokenExpired();
        break;
      case 'apiErrors':
        LoggingService.toastApiError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ');
        break;
      case 'equipmentStatus':
        LoggingService.toastEquipmentStatus('‚öñÔ∏è –í–µ—Å—ã –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ', 'VTA-60 —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ');
        break;
      case 'systemNotifications':
        LoggingService.toastSystemNotification('üîî –°–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', '–î–µ–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î!');
        break;
    }
  };

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è UI
  const consoleSettingsConfig: Array<{
    key: keyof ConsoleLoggingSettings;
    label: string;
    description: string;
    color: 'primary' | 'success' | 'warning' | 'danger';
  }> = [
    {
      key: 'authContextLogs',
      label: '–õ–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (AuthContext)',
      description: '–õ–æ–≥–∏ —Ç–æ–∫–µ–Ω—ñ–≤, –≤—Ö–æ–¥—É/–≤–∏—Ö–æ–¥—É, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—Å–∏–π',
      color: 'primary'
    },
    {
      key: 'apiCallLogs',
      label: 'API –∑–∞–ø–∏—Ç–∏',
      description: '–õ–æ–≥–∏ HTTP –∑–∞–ø–∏—Ç—ñ–≤ —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —Å–µ—Ä–≤–µ—Ä–∞',
      color: 'success'
    },
    {
      key: 'routingLogs',
      label: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è',
      description: '–õ–æ–≥–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏',
      color: 'primary'
    },
    {
      key: 'equipmentLogs',
      label: '–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è (–≤–∞–≥–∏, –ø—Ä–∏–Ω—Ç–µ—Ä–∏)',
      description: '–õ–æ–≥–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —ñ —Ä–æ–±–æ—Ç–∏ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
      color: 'warning'
    },
    {
      key: 'debugLogs',
      label: '–í—ñ–¥–ª–∞–¥–æ—á–Ω—ñ –ª–æ–≥–∏',
      description: '–¢–µ—Ö–Ω—ñ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤',
      color: 'danger'
    },
    {
      key: 'performanceLogs',
      label: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
      description: '–õ–æ–≥–∏ —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —ñ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ',
      color: 'success'
    },
    // –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    {
      key: 'loggingSettingsLogs',
      label: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è',
      description: '–õ–æ–≥–∏ —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ª–æ–≥–∞–º–∏',
      color: 'primary'
    },
    {
      key: 'orderAssemblyLogs',
      label: '–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å',
      description: '–õ–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—É –∑–±–∏—Ä–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å',
      color: 'warning'
    },
    {
      key: 'productSetsLogs',
      label: '–ù–∞–±—ñ—Ä —Ç–æ–≤–∞—Ä—ñ–≤',
      description: '–õ–æ–≥–∏ —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∞–±–æ—Ä–∞–º–∏ —Ç–æ–≤–∞—Ä—ñ–≤',
      color: 'success'
    },
    {
      key: 'cookieLogs',
      label: '–†–æ–±–æ—Ç–∞ –∑ Cookies',
      description: '–õ–æ–≥–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ —á–∏—Ç–∞–Ω–Ω—è cookies',
      color: 'success'
    },
    {
      key: 'warehouseMovementLogs',
      label: '–°–∫–ª–∞–¥—Å—å–∫—ñ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è',
      description: '–õ–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ —Å–∫–ª–∞–¥—Å—å–∫–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ —Ç–∞ —Ä—É—Ö–æ–º —Ç–æ–≤–∞—Ä—ñ–≤',
      color: 'danger'
    }
  ];

  const toastSettingsConfig: Array<{
    key: keyof ToastLoggingSettings;
    label: string;
    description: string;
    color: 'primary' | 'success' | 'warning' | 'danger';
  }> = [
    {
      key: 'authSuccess',
      label: '–£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è',
      description: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—Ö—ñ–¥ —ñ –≤–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏',
      color: 'success'
    },
    {
      key: 'authErrors',
      label: '–ü–æ–º–∏–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó',
      description: '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ –≤—Ö–æ–¥—É —ñ —Ç–æ–∫–µ–Ω—ñ–≤',
      color: 'danger'
    },
    {
      key: 'tokenRefresh',
      label: '–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤',
      description: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó',
      color: 'success'
    },
    {
      key: 'tokenExpiry',
      label: '–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤',
      description: '–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å–µ—Å—ñ—ó',
      color: 'warning'
    },
    {
      key: 'apiErrors',
      label: '–ü–æ–º–∏–ª–∫–∏ API',
      description: '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ –∑–∞–ø—Ä–æ—Å—ñ–≤ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞',
      color: 'danger'
    },
    {
      key: 'equipmentStatus',
      label: '–°—Ç–∞—Ç—É—Å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
      description: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤–µ—Å–æ–≤, –ø—Ä–∏–Ω—Ç–µ—Ä—ñ–≤',
      color: 'primary'
    },
    {
      key: 'systemNotifications',
      label: '–°–∏—Å—Ç–µ–º–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
      description: '–ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏',
      color: 'primary'
    }
  ];

  if (!isInitialized || !settings) {
    return (
      <Card className="w-full p-2">
        <CardBody className="flex items-center justify-center p-8">
          <div className="text-center">
            <div className="text-lg">‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...</div>
          </div>
        </CardBody>
      </Card>
    );
  }

  return (
    <Card className="w-full p-2">
      <CardHeader>
        <div className="flex items-center gap-3">
          <div>
            <h3 className="text-xl font-semibold">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è</h3>
            <p className="text-sm text-gray-600">
              –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Å–æ–ª—å–Ω–∏–º–∏ –ª–æ–≥–∞–º–∏ —Ç–∞ Toast —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏
            </p>
          </div>
        </div>
      </CardHeader>

      <CardBody className="space-y-6">
        <div className="flex gap-6">
          {/* –ö–æ–Ω—Å–æ–ª—å–Ω—ñ –ª–æ–≥–∏ */}
          <div className="space-y-4 flex-1">
            <h4 className="text-lg font-bold">
              –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—ñ –±—Ä–∞—É–∑–µ—Ä–∞
            </h4>
            <div className="space-y-4">
              {consoleSettingsConfig.map((config) => (
                <div key={config.key} className="flex items-start gap-3">
                  <Switch
                    size="sm"
                    isSelected={settings.console[config.key]}
                    onValueChange={(value) => updateConsoleSetting(config.key, value)}
                    className="mt-1"
                  />
                  <div className="flex-1">
                    <div className="font-medium text-sm">
                      {config.label}
                      <Button
                          size="sm"
                          variant="flat"
                          color="default"
                          onPress={() => {demonstrateConsoleLog(config.key); LoggingService.toastSystemNotification('üîî –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è', '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)', 'default')}}
                          className="h-6 px-2 text-xs ml-2 gap-1"
                        >
                        <DynamicIcon name="bell-ring" strokeWidth={1.5} size={12} /> –¢–µ—Å—Ç—É–≤–∞—Ç–∏
                        </Button>
                    </div>
                    <div className="text-xs text-gray-500 mb-1">{config.description}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Toast —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è */}
          <div className="space-y-4 flex-1">
            <h4 className="text-lg font-bold">
              Toast —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            </h4>
            <div className="space-y-4">
              {toastSettingsConfig.map((config) => (
                <div key={config.key} className="flex items-start gap-3">
                  <Switch
                    size="sm"
                    isSelected={settings.toast[config.key]}
                    onValueChange={(value) => updateToastSetting(config.key, value)}
                    className="mt-1"
                  />
                  <div className="flex-1">
                    <div className="font-medium text-sm">{config.label}</div>
                    <div className="text-xs text-gray-500 mb-1">{config.description}</div>
                    <div className="flex items-center gap-2">
                      <Button
                        size="sm"
                        variant="light"
                        color={config.color}
                        onPress={() => demonstrateToast(config.key)}
                        className="h-6 px-2 text-xs"
                      >
                        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏
                      </Button>
                      <span className="text-xs text-gray-400">
                        –î–µ–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </CardBody>

      <CardFooter className="flex flex-col gap-4">
        <div className="flex justify-start items-center w-full mt-3 gap-4">
          <Button
            color="primary"
            onPress={saveSettings}
            isLoading={isLoading}
            isDisabled={!hasChanges}
          >
            {isLoading ? '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...' : '–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'}
          </Button>

          <Button
            color="default"
            variant="light"
            onPress={resetToDefaults}
          >
            –°–∫–∏–Ω—É—Ç–∏ –¥–æ —Ç–∏–ø–æ–≤–∏—Ö
          </Button>

        </div>
      </CardFooter>
    </Card>
  );
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const LoggingSettings = LoggingSettingsComponent;