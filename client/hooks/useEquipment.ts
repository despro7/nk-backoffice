import { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import EquipmentService, {
  EquipmentStatus,
  ScaleData,
  BarcodeData,
  EquipmentConfig
} from '../services/EquipmentService';
import ScaleService, { VTAScaleData } from '../services/ScaleService';
import BarcodeScannerService, { ScannerEvent } from '../services/BarcodeScannerService'; 


export interface EquipmentState {
  status: EquipmentStatus;
  currentWeight: VTAScaleData | null;
  lastBarcode: BarcodeData | null;
  isConnected: boolean;
  isScaleConnected: boolean;
  isScannerConnected: boolean;
  isSimulationMode: boolean;
  config: EquipmentConfig | null;
  isLoading: boolean;
  lastRawScaleData: string | Uint8Array;
  // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è polling
  isActivePolling: boolean;
  isReservePolling: boolean;
}

export interface EquipmentActions {
  connectScale: () => Promise<boolean>;
  disconnectScale: () => Promise<void>;
  connectScanner: () => Promise<boolean>;
  disconnectScanner: () => Promise<void>;
  setConnectionType: (connectionType: 'local' | 'simulation') => void;
  getWeight: () => Promise<VTAScaleData | null>;
  resetScanner: () => void;

  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling
  startActivePolling: () => void;
  stopActivePolling: () => void;
  startReservePolling: () => void;
  stopReservePolling: () => void;

  updateConfig: (config: Partial<EquipmentConfig>) => void;
  loadConfig: () => Promise<void>;
  saveConfig: (config: EquipmentConfig) => Promise<void>;
  resetConfig: () => Promise<void>;
  refreshConfig: () => Promise<void>;
}

export const useEquipment = (): [EquipmentState, EquipmentActions] => {

  const [status, setStatus] = useState<EquipmentStatus>({
    isConnected: false,
    isSimulationMode: false,
    lastActivity: null,
    error: null
  });

  const [currentWeight, setCurrentWeight] = useState<VTAScaleData | null>(null);
  const [lastBarcode, setLastBarcode] = useState<BarcodeData | null>(null);
  const [config, setConfig] = useState<EquipmentConfig | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [lastRawScaleData, setLastRawScaleData] = useState<string | Uint8Array>('');

  // –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const [isScaleConnected, setIsScaleConnected] = useState(false);
  const [isScannerConnected, setIsScannerConnected] = useState(false);

  // –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–∫–∞–Ω–æ–≤
  const lastProcessedCodeRef = useRef<string>('');
  const lastProcessedTimeRef = useRef<number>(0);
  
  const equipmentService = useRef(EquipmentService.getInstance());
  const scaleService = useRef(ScaleService.getInstance());
  const scannerService = useRef(BarcodeScannerService.getInstance());

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling
  const [isActivePolling, setIsActivePolling] = useState(false);
  const [isReservePolling, setIsReservePolling] = useState(false);
  const activePollingIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const reservePollingIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const activePollingTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const isReservePollingRef = useRef<boolean>(false);
  const isActivePollingRef = useRef(false); // Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö
  const activePollingErrorCountRef = useRef(0); // –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling
  const isPollingRef = useRef(false); // Ref for preventing concurrent polling requests
  const [significantWeightDetected, setSignificantWeightDetected] = useState(false);

  // –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤
  const weightCacheRef = useRef<{ data: VTAScaleData; timestamp: number } | null>(null);
  
  // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
  const reconnectAttemptsRef = useRef(0);
  const maxReconnectAttempts = 3;
  
  // –°—á–µ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø–æ–¥—Ä—è–¥ (–¥–ª—è —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)
  const timeoutCountRef = useRef(0);
  const maxTimeoutsBeforeReconnect = 3;

  // –ö–µ—à –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (15 –º–∏–Ω—É—Ç)
  const configCacheRef = useRef<{ data: EquipmentConfig | null; timestamp: number } | null>(null);
  const CONFIG_CACHE_DURATION = 15 * 60 * 1000;


  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î
  const loadConfig = useCallback(async () => {
    try {
      setIsLoading(true);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const now = Date.now();
      if (configCacheRef.current && (now - configCacheRef.current.timestamp) < CONFIG_CACHE_DURATION) {
        if (process.env.NODE_ENV === 'development') {
          console.log('üîß Using cached equipment config');
        }
        setConfig({ ...configCacheRef.current.data });
        updateStatus({
          isSimulationMode: configCacheRef.current.data?.connectionType === 'simulation',
          isConnected: configCacheRef.current.data?.connectionType === 'simulation'
        });
        setIsLoading(false);
        return;
      }

      const response = await fetch('/api/settings/equipment', {
        credentials: 'include'
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
          configCacheRef.current = {
            data: result.data,
            timestamp: now
          };

          setConfig({ ...result.data }); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–∏
          updateStatus({
            isSimulationMode: result.data.connectionType === 'simulation',
            isConnected: result.data.connectionType === 'simulation'
          });
        }
      }
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Error loading equipment config:', error);
      }
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ë–î
  const saveConfig = useCallback(async (newConfig: EquipmentConfig) => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/settings/equipment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(newConfig)
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
          configCacheRef.current = {
            data: newConfig,
            timestamp: Date.now()
          };

          setConfig({ ...newConfig }); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–∏
          updateStatus({
            isSimulationMode: newConfig.connectionType === 'simulation',
            isConnected: newConfig.connectionType === 'simulation'
          });
        }
      }
    } catch (error) {
      console.error('Error saving equipment config:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const resetConfig = useCallback(async () => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/settings/equipment/reset', {
        method: 'POST',
        credentials: 'include'
      });
      
      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          setConfig({ ...result.data }); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–∏
          updateStatus({
            isSimulationMode: result.data.connectionType === 'simulation',
            isConnected: result.data.connectionType === 'simulation'
          });
        }
      }
    } catch (error) {
      console.error('Error resetting equipment config:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadConfig();
  }, [loadConfig]);

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
  const updateStatus = useCallback((updates: Partial<EquipmentStatus>) => {
    setStatus(prev => ({ ...prev, ...updates }));
  }, []);

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≤–∞–≥
  const connectScale = useCallback(async (manual: boolean = false): Promise<boolean> => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ config
      if (!config) {
        console.log('‚ö†Ô∏è useEquipment: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
        return false;
      }

      if (config.connectionType === 'simulation') {
        console.log('üîß useEquipment: –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ - –ø–æ–¥–∫–ª—é—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Å—ã');
        updateStatus({
          isConnected: true,
          lastActivity: new Date(),
          error: null
        });
        setIsScaleConnected(true);
        return true;
      }



      // –õ–æ–∫–∞–ª—å–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: auto = true (–∏—â–µ–º –ø–æ—Ä—Ç), manual = false (–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Ä—Ç)
      const result = await scaleService.current.connect(!manual);
      if (result) {
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –≤–∞–≥
        scaleService.current.onWeightData((weightData: VTAScaleData) => {
          console.log('üîß useEquipment: Weight data received from scale:', weightData);
          setCurrentWeight(weightData);
          console.log('üîß useEquipment: currentWeight updated');
          updateStatus({
            lastActivity: new Date(),
            error: null
          });
        });

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ callback –¥–ª—è —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö –∑ –≤–∞–≥
        scaleService.current.onRawDataReceived((rawData: Uint8Array) => {
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Uint8Array –≤ HEX —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const hexString = Array.from(rawData)
            .map(b => b.toString(16).padStart(2, '0').toUpperCase())
            .join(' ');
          setLastRawScaleData(hexString);
          console.log('üîß useEquipment: Raw scale data received:', hexString);
        });

        updateStatus({
          isConnected: true,
          lastActivity: new Date(),
          error: null
        });
        setIsScaleConnected(true);
      }
      
      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      updateStatus({ 
        isConnected: false, 
        error: errorMessage,
        lastActivity: new Date()
      });
      return false;
    }
  }, [updateStatus, config]);


  // –ü–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≤–∞–≥ (–¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è)
  const disconnectScale = useCallback(async (): Promise<void> => {
    try {
      await scaleService.current.disconnect();
      setCurrentWeight(null);
      updateStatus({
        isConnected: false,
        lastActivity: new Date()
      });
      setIsScaleConnected(false);
    } catch (error) {
      console.error('Error disconnecting scale:', error);
    }
  }, [updateStatus]);

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–∫–∞–Ω–µ—Ä–∞
  const connectScanner = useCallback(async (): Promise<boolean> => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ config
      if (!config) {
        return false;
      }
      
      if (config.connectionType === 'simulation') {
        updateStatus({
          isConnected: true,
          lastActivity: new Date(),
          error: null
        });
        setIsScannerConnected(true);
        return true;
      }



      // –õ–æ–∫–∞–ª—å–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
      const result = await scannerService.current.connect();
      if (result) {
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Å–∫–∞–Ω–µ—Ä–∞
        scannerService.current.addEventListener((event: ScannerEvent) => {
          if (event.type === 'data' && event.data) {
            const currentTime = Date.now();
            const code = event.data.code;

            // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã: –µ—Å–ª–∏ —Ç–æ—Ç –∂–µ –∫–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 —Å–µ–∫—É–Ω–¥
            if (code === lastProcessedCodeRef.current &&
                currentTime - lastProcessedTimeRef.current < 2000) {
              if (process.env.NODE_ENV === 'development') {
                console.log('üîÑ [useEquipment] Duplicate barcode ignored:', code);
              }
              return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            lastProcessedCodeRef.current = code;
            lastProcessedTimeRef.current = currentTime;

            setLastBarcode(event.data);
            updateStatus({
              lastActivity: new Date(),
              error: null
            });
          }
        });
        
        updateStatus({
          isConnected: true,
          lastActivity: new Date(),
          error: null
        });
        setIsScannerConnected(true);
      }
      
      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      updateStatus({ 
        isConnected: false, 
        error: errorMessage,
        lastActivity: new Date()
      });
      return false;
    }
  }, [updateStatus, config]);

  // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ —Å–∫–∞–Ω–µ—Ä–∞
  const disconnectScanner = useCallback(async (): Promise<void> => {
    try {
      await scannerService.current.disconnect();
      setLastBarcode(null);
      updateStatus({
        isConnected: false,
        lastActivity: new Date()
      });
      setIsScannerConnected(false);
    } catch (error) {
      console.error('Error disconnecting scanner:', error);
    }
  }, [updateStatus]);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–∞–Ω–µ—Ä–∞
  const resetScanner = useCallback(() => {
    try {
      scannerService.current.resetScannerState();
      setLastBarcode(null);
      updateStatus({
        lastActivity: new Date()
      });
    } catch (error) {
      console.error('Error resetting scanner:', error);
    }
  }, [updateStatus]);

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  const setConnectionType = useCallback((connectionType: 'local' | 'simulation') => {

    // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç config
    updateStatus({
      isSimulationMode: connectionType === 'simulation',
      isConnected: connectionType === 'simulation',
      lastActivity: new Date()
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º config –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (config) {
      const newConfig = { ...config, connectionType };
      setConfig({ ...newConfig }); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    } else {
      // –ï—Å–ª–∏ config –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π config —Å connectionType
      const tempConfig = {
        connectionType,
        scale: null,
        scanner: null,
        simulation: null
      };
      setConfig({ ...tempConfig } as EquipmentConfig); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    }
  }, [updateStatus, config]);

  // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
  const attemptReconnect = useCallback(async (): Promise<boolean> => {
    if (reconnectAttemptsRef.current >= maxReconnectAttempts) {
      console.log(`‚ö†Ô∏è useEquipment: –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${maxReconnectAttempts})`);
      return false;
    }

    reconnectAttemptsRef.current++;
    console.log(`üîÑ useEquipment: –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttemptsRef.current}/${maxReconnectAttempts}`);

    try {
      // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
      await disconnectScale();
      
      // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s
      const delay = Math.min(1000 * Math.pow(2, reconnectAttemptsRef.current - 1), 4000);
      console.log(`‚è≥ useEquipment: –ü–∞—É–∑–∞ ${delay}ms –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º...`);
      await new Promise(resolve => setTimeout(resolve, delay));
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      const reconnected = await connectScale();
      
      if (reconnected) {
        console.log('‚úÖ useEquipment: –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –≤–µ—Å–∞–º');
        reconnectAttemptsRef.current = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        return true;
      } else {
        console.log('‚ùå useEquipment: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–µ—Å–∞–º');
        return false;
      }
    } catch (error) {
      console.error('‚ùå useEquipment: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error);
      return false;
    }
  }, [connectScale, disconnectScale]);

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞–≥–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const getWeight = useCallback(async (useCache: boolean = true): Promise<VTAScaleData | null> => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ config –≤–º–µ—Å—Ç–æ equipmentService
      if (config?.connectionType === 'simulation') {
        console.log('üîß useEquipment: –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ—Å');
        const weightData = await equipmentService.current.getWeight();
        setCurrentWeight(weightData);
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        weightCacheRef.current = {
          data: weightData,
          timestamp: Date.now()
        };
        return weightData;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –µ—Å–ª–∏ useCache = true
      if (useCache && weightCacheRef.current) {
        const age = Date.now() - weightCacheRef.current.timestamp;
        const cacheDuration = config?.scale?.weightCacheDuration || 2000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 2 —Å–µ–∫—É–Ω–¥
        if (age < cacheDuration) {
          console.log('üîß useEquipment: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å:', weightCacheRef.current.data);
          return weightCacheRef.current.data;
        }
      }

      console.log('üîß useEquipment: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–π –≤–µ—Å –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤');
      const weightData = await scaleService.current.getCurrentWeight();
      if (weightData) {
        console.log('‚úÖ useEquipment: –í–µ—Å –ø–æ–ª—É—á–µ–Ω:', weightData);
        setCurrentWeight(weightData);
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏
        timeoutCountRef.current = 0;
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        weightCacheRef.current = {
          data: weightData,
          timestamp: Date.now()
        };
        return weightData;
      } else {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –≤–µ—Å, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        console.log('‚ö†Ô∏è useEquipment: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –≤–µ—Å, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
        
        const reconnected = await attemptReconnect();
        if (reconnected) {
          // –ü–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Å –µ—â–µ —Ä–∞–∑
          console.log('üîÑ useEquipment: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞...');
          const retryWeightData = await scaleService.current.getCurrentWeight();
          if (retryWeightData) {
            console.log('‚úÖ useEquipment: –í–µ—Å –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', retryWeightData);
            setCurrentWeight(retryWeightData);
            weightCacheRef.current = {
              data: retryWeightData,
              timestamp: Date.now()
            };
            return retryWeightData;
          }
        }
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à
        if (weightCacheRef.current) {
          console.log('‚ö†Ô∏è useEquipment: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', weightCacheRef.current.data);
          return weightCacheRef.current.data;
        }
        console.log('‚ö†Ô∏è useEquipment: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Å –æ—Ç –≤–µ—Å–æ–≤');
        return null;
      }
    } catch (error) {
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
      const errorDetails = {
        message: error instanceof Error ? error.message : String(error),
        name: error instanceof Error ? error.name : 'Unknown',
        stack: error instanceof Error ? error.stack : undefined,
        timestamp: new Date().toISOString(),
        connectionStatus: scaleService.current?.isScaleConnected() || false,
        config: config?.scale
      };
      
      console.log('‚ùå useEquipment: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞:', errorDetails);
      
      // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ –∏ —É–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      let shouldReconnect = false;
      
      if (error instanceof Error) {
        if (error.message.includes('device has been lost')) {
          console.log('üîå useEquipment: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ (device lost)');
          shouldReconnect = true;
        } else if (error.message.includes('closed stream')) {
          console.log('üîå useEquipment: –ü–æ—Ç–æ–∫ –∑–∞–∫—Ä—ã—Ç (stream closed)');
          shouldReconnect = true;
        } else if (error.message.includes('timeout') || error.message.includes('—Ç–∞–π–º-–∞—É—Ç')) {
          console.log('‚è±Ô∏è useEquipment: –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
          timeoutCountRef.current++;
          
          // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø–æ–¥—Ä—è–¥
          if (timeoutCountRef.current >= maxTimeoutsBeforeReconnect) {
            console.log(`‚è±Ô∏è useEquipment: ${timeoutCountRef.current} —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø–æ–¥—Ä—è–¥, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...`);
            shouldReconnect = true;
            timeoutCountRef.current = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
          } else {
            console.log(`‚è±Ô∏è useEquipment: –¢–∞–π–º–∞—É—Ç ${timeoutCountRef.current}/${maxTimeoutsBeforeReconnect}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à`);
            shouldReconnect = false;
          }
        } else if (error.message.includes('locked')) {
          console.log('üîí useEquipment: –ü–æ—Ç–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (stream locked)');
          shouldReconnect = true;
        } else if (error.message.includes('not connected')) {
          console.log('üîå useEquipment: –í–µ—Å—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
          shouldReconnect = true;
        } else {
          console.log('‚ùì useEquipment: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
          shouldReconnect = true;
        }
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Å–∞
      if (error instanceof Error && !error.message.includes('timeout') && !error.message.includes('—Ç–∞–π–º-–∞—É—Ç')) {
        timeoutCountRef.current = 0;
      }
      
      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      let reconnected = false;
      if (shouldReconnect) {
        console.log('‚ö†Ô∏è useEquipment: –û—à–∏–±–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        reconnected = await attemptReconnect();
      } else {
        console.log('‚ö†Ô∏è useEquipment: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –±–µ–∑ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      }
      if (reconnected) {
        // –ü–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Å –µ—â–µ —Ä–∞–∑
        console.log('üîÑ useEquipment: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞...');
        try {
          const retryWeightData = await scaleService.current.getCurrentWeight();
          if (retryWeightData) {
            console.log('‚úÖ useEquipment: –í–µ—Å –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', retryWeightData);
            setCurrentWeight(retryWeightData);
            weightCacheRef.current = {
              data: retryWeightData,
              timestamp: Date.now()
            };
            return retryWeightData;
          }
        } catch (retryError) {
          console.error('‚ùå useEquipment: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', retryError);
        }
      }
      
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å
      if (weightCacheRef.current) {
        console.log('‚ö†Ô∏è useEquipment: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', weightCacheRef.current.data);
        return weightCacheRef.current.data;
      }
      return null;
    }
  }, [config, attemptReconnect]);

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≤–µ—Å–∞–º–∏
  const checkScaleHealth = useCallback(async () => {
    if (!scaleService.current || !config?.scale) return;
    
    try {
      const isConnected = scaleService.current.isScaleConnected();
      const port = (scaleService.current as any).port;
      
      const healthInfo = {
        isConnected,
        portExists: !!port,
        readableLocked: port?.readable?.locked || false,
        writableLocked: port?.writable?.locked || false,
        timestamp: new Date().toISOString()
      };
      
      console.log('üè• useEquipment: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–µ—Å–æ–≤:', healthInfo);
      
      // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ –ø–æ—Ç–æ–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
      if (isConnected && (healthInfo.readableLocked || healthInfo.writableLocked)) {
        console.warn('‚ö†Ô∏è useEquipment: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –≤–µ—Å–æ–≤');
      }
      
      return healthInfo;
    } catch (error) {
      console.error('‚ùå useEquipment: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –≤–µ—Å–æ–≤:', error);
      return null;
    }
  }, [config?.scale]);

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  const updateConfig = useCallback((newConfig: Partial<EquipmentConfig>) => {
    if (config) {
      const updatedConfig = { ...config, ...newConfig };
      setConfig({ ...updatedConfig }); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç

      // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º isSimulationMode –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è connectionType
      if (newConfig.connectionType !== undefined) {
        updateStatus({
          isSimulationMode: newConfig.connectionType === 'simulation',
          isConnected: newConfig.connectionType === 'simulation',
          lastActivity: new Date()
        });
      } else {
        updateStatus({ lastActivity: new Date() });
      }

      // –°–µ—Ä–≤–∏—Å—ã...
      if (newConfig.scale) {
        scaleService.current.updateConfig(newConfig.scale);
      }
      if (newConfig.scanner) {
        scannerService.current.updateConfig(newConfig.scanner);
      }
    } else {
      console.log('üîß useEquipment: Config not loaded yet, cannot update');
    }
  }, [updateStatus, config]);

  // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const [isInitialized, setIsInitialized] = useState(false);

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  useEffect(() => {
    // –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω ScaleService
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –≤–µ—Å–∞–º–∏ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    return () => {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling, –Ω–æ –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º –≤–µ—Å—ã - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è
      // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç stopScalePolling
      if (activePollingIntervalRef.current) {
        clearInterval(activePollingIntervalRef.current);
        activePollingIntervalRef.current = null;
      }
      if (reservePollingIntervalRef.current) {
        clearInterval(reservePollingIntervalRef.current);
        reservePollingIntervalRef.current = null;
      }
      if (activePollingTimeoutRef.current) {
        clearTimeout(activePollingTimeoutRef.current);
        activePollingTimeoutRef.current = null;
      }
      setCurrentWeight(null);
      setIsScaleConnected(false);
    };
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ config
  useEffect(() => {
    const initEquipment = async () => {
      try {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (!config || isInitialized) {
          return;
        }

        setIsInitialized(true);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
        updateStatus({
          isSimulationMode: config.connectionType === 'simulation',
          isConnected: config.connectionType === 'simulation',
          lastActivity: new Date(),
          error: null
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –≤ —Ä–µ–∂–∏–º—ñ —Å–∏–º—É–ª—è—Ü—ñ—ó
        if (config.connectionType === 'simulation') {
          await connectScale();
          await connectScanner();
        } else {
          // –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—Å–æ–≤, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
          if (config.scale?.autoConnect && !isScaleConnected) {
            try {
              console.log('üîß useEquipment: –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ...');
              const scaleConnected = await scaleService.current.connect(true); // –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
              if (scaleConnected) {
                console.log('‚úÖ useEquipment: –í–µ—Å—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
                setIsScaleConnected(true);
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                reconnectAttemptsRef.current = 0;
              } else {
                console.log('‚ö†Ô∏è useEquipment: –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω —Ä–∞–Ω–µ–µ');
              }
            } catch (error) {
              console.log('‚ö†Ô∏è useEquipment: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–µ—Å–æ–≤:', error);
            }
          }

          // –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
          if (config.scanner?.autoConnect && !isScannerConnected) {
            try {
              console.log('üîß useEquipment: –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞...');
              const scannerConnected = await connectScanner();
              if (scannerConnected) {
                console.log('‚úÖ useEquipment: –°–∫–∞–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
              } else {
                console.log('‚ö†Ô∏è useEquipment: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∫–∞–Ω–µ—Ä');
              }
            } catch (error) {
              console.log('‚ö†Ô∏è useEquipment: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∫–∞–Ω–µ—Ä–∞:', error);
              // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ø—ã—Ç–∫–∞
            }
          }
        }
      } catch (error) {
        console.error('Error initializing equipment:', error);
      }
    };

    initEquipment();
  }, [config, isInitialized, connectScale, connectScanner]); // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç config –∏ isInitialized

  // useEffect –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–µ—Å–æ–≤
  // --- –£–î–ê–õ–ï–ù–û ---

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≤–µ—Å–∞–º–∏
  // --- –£–î–ê–õ–ï–ù–û ---

  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω - –ì–õ–£–ë–û–ö–û–ï –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–ï –¥–ª—è React
  const state: EquipmentState = useMemo(() => ({
    status: { ...status }, // –ö–ª–æ–Ω–∏—Ä—É–µ–º status –æ–±—ä–µ–∫—Ç
    currentWeight: currentWeight ? { ...currentWeight } : null, // –ö–ª–æ–Ω–∏—Ä—É–µ–º currentWeight
    lastBarcode: lastBarcode ? { ...lastBarcode } : null, // –ö–ª–æ–Ω–∏—Ä—É–µ–º lastBarcode
    isConnected: status.isConnected,
    isScaleConnected,
    isScannerConnected,
    isSimulationMode: status.isSimulationMode,
    config: config ? { ...config } : null, // –ö–ª–æ–Ω–∏—Ä—É–µ–º config –æ–±—ä–µ–∫—Ç
    isLoading,
    lastRawScaleData: typeof lastRawScaleData === 'string' ? lastRawScaleData : Array.from(lastRawScaleData).map(b => b.toString(16).padStart(2, '0').toUpperCase()).join(' '),
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è polling
    isActivePolling,
    isReservePolling
  }), [status, currentWeight, lastBarcode, config, isLoading, isScaleConnected, isScannerConnected, lastRawScaleData, isActivePolling, isReservePolling]);



  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const refreshConfig = useCallback(async () => {
    await loadConfig();
  }, [loadConfig]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è polling (–æ–±—ä—è–≤–ª—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ)
  const stopReservePolling = useCallback(() => {
    if (!isReservePollingRef.current) {
      return;
    }

    console.log('‚èπÔ∏è useEquipment: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ polling');
    setIsReservePolling(false);
    isReservePollingRef.current = false;
    isPollingRef.current = false;

    if (reservePollingIntervalRef.current) {
      clearInterval(reservePollingIntervalRef.current);
      reservePollingIntervalRef.current = null;
    }
  }, []);

  const startReservePolling = useCallback(() => {
    if (isReservePollingRef.current || !config) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–∞ (OrderView)
    const isOnOrderPage = window.location.pathname.includes('/orders/');
    if (!isOnOrderPage) {
      console.log('‚ö†Ô∏è useEquipment: –†–µ–∑–µ—Ä–≤–Ω—ã–π polling –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–∞');
      return;
    }

    const reservePollingInterval = config?.scale?.reservePollingInterval || 5000;
    console.log(`üîÑ useEquipment: –ó–∞–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ polling (${reservePollingInterval}ms)`);
    setIsReservePolling(true);
    isReservePollingRef.current = true;

    reservePollingIntervalRef.current = setInterval(async () => {
      if (isPollingRef.current) {
        if (process.env.NODE_ENV === 'development') {
          console.log('... Reserve polling request in progress, skipping this interval');
        }
        return;
      }
      try {
        isPollingRef.current = true;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤—Å–µ –µ—â–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–∞
        const isOnOrderPage = window.location.pathname.includes('/orders/');
        if (!isOnOrderPage) {
          console.log('‚ö†Ô∏è useEquipment: –ü–æ–∫–∏–Ω—É–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π polling');
          stopReservePolling();
          return;
        }

        // –†–µ–∑–µ—Ä–≤–Ω—ã–π polling —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π
        if (!isActivePollingRef.current) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞
          if (!status.isConnected || !isScaleConnected) {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω autoConnect
            if (config?.scale?.autoConnect) {
              console.log('üîÑ useEquipment: Reserve polling - –≤–µ—Å—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
              try {
                // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
                await scaleService.current.disconnect();
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
                await new Promise(resolve => setTimeout(resolve, 100));
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º connect(true) –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
                const connected = await scaleService.current.connect(true);
                if (connected) {
                  console.log('‚úÖ useEquipment: Reserve polling - –≤–µ—Å—ã –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
                  setIsScaleConnected(true); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
                } else {
                  console.log('‚ö†Ô∏è useEquipment: Reserve polling - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–µ—Å—ã');
                }
              } catch (connectError) {
                console.log('‚ö†Ô∏è useEquipment: Reserve polling - –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', connectError);
              }
            }
            return; // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤—ã—Ö–æ–¥–∏–º, —Ç.–∫. –≤–µ—Å—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
          }

          const reserveWeight = await getWeight(false);

          if (reserveWeight && process.env.NODE_ENV === 'development') {
            console.log('üìä useEquipment: Reserve polling weight:', {
              weight: reserveWeight.weight,
              timestamp: reserveWeight.timestamp
            });
          } else if (!reserveWeight) {
            console.log('‚ö†Ô∏è useEquipment: Reserve polling - –≤–µ—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
          }

          // –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π polling
          const weightThreshold = config?.scale?.weightThresholdForActive || 0.010; // 10 –≥—Ä–∞–º–º
          if (reserveWeight && reserveWeight.weight > weightThreshold && !isActivePollingRef.current) {
            console.log(`‚öñÔ∏è useEquipment: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å (${reserveWeight.weight} –∫–≥) –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ.`);
            setSignificantWeightDetected(true);
          }
        }
      } catch (error) {
        console.log('‚ö†Ô∏è useEquipment: –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ polling:', error);
      } finally {
        isPollingRef.current = false;
      }
    }, reservePollingInterval);
  }, [config, getWeight, status.isConnected, isScaleConnected, updateStatus, setSignificantWeightDetected]);

  // –ê–∫—Ç–∏–≤–Ω—ã–π polling –¥–ª—è pending —Å—Ç–∞—Ç—É—Å–æ–≤ (500ms) - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≤–µ—Å–∞—Ö
  const startActivePolling = useCallback(() => {
    if (isActivePollingRef.current || !config || config.connectionType === 'simulation') {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
    if (!status.isConnected || !isScaleConnected) {
      console.log('‚ö†Ô∏è useEquipment: –ê–∫—Ç–∏–≤–Ω—ã–π polling –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–µ—Å—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π polling –≤–º–µ—Å—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
      startReservePolling();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–∞ (OrderView)
    const isOnOrderPage = window.location.pathname.includes('/orders/');
    if (!isOnOrderPage) {
      console.log('‚ö†Ô∏è useEquipment: –ê–∫—Ç–∏–≤–Ω—ã–π polling –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–∞');
      return;
    }

    const activePollingInterval = config?.scale?.activePollingInterval || 1000;
    const timeout = config?.scale?.activePollingDuration || 30000;

    console.log(`üîÑ useEquipment: –ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling (${activePollingInterval}ms) –Ω–∞ ${timeout / 1000} —Å–µ–∫—É–Ω–¥`);
    setIsActivePolling(true);
    isActivePollingRef.current = true;
    activePollingErrorCountRef.current = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π polling –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
    if (isReservePolling) {
      stopReservePolling();
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (activePollingTimeoutRef.current) {
      clearTimeout(activePollingTimeoutRef.current);
      activePollingTimeoutRef.current = null;
    }

    activePollingIntervalRef.current = setInterval(async () => {
      if (isPollingRef.current) {
        if (process.env.NODE_ENV === 'development') {
          console.log('... Active polling request in progress, skipping this interval');
        }
        return;
      }
      try {
        isPollingRef.current = true;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ polling
        if (!isActivePollingRef.current) {
          console.log('‚ö†Ô∏è useEquipment: –ê–∫—Ç–∏–≤–Ω—ã–π polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤—Å–µ –µ—â–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–∞
        const isOnOrderPage = window.location.pathname.includes('/orders/');
        if (!isOnOrderPage) {
          console.log('‚ö†Ô∏è useEquipment: –ü–æ–∫–∏–Ω—É–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π polling');
          stopActivePolling();
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –≤–µ—Å –±–µ–∑ –∫—ç—à–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling
        const freshWeight = await getWeight(false);

        if (freshWeight && process.env.NODE_ENV === 'development') {
          console.log('‚öñÔ∏è useEquipment: Active polling weight:', {
            weight: freshWeight.weight,
            isStable: freshWeight.isStable,
            timestamp: freshWeight.timestamp
          });
        } else if (!freshWeight) {
          activePollingErrorCountRef.current++;
          const maxErrors = config?.scale?.maxPollingErrors || 5;
          console.log(`‚ö†Ô∏è useEquipment: –ê–∫—Ç–∏–≤–Ω—ã–π polling - –≤–µ—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω (–æ—à–∏–±–∫–∞ ${activePollingErrorCountRef.current}/${maxErrors})`);
          
          // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π polling
          if (activePollingErrorCountRef.current >= maxErrors) {
            console.log('‚ùå useEquipment: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É');
            stopActivePolling();
            startReservePolling();
            return;
          }
          return;
        } else {
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Å–∞
          activePollingErrorCountRef.current = 0;
        }
      } catch (error) {
        activePollingErrorCountRef.current++;
        const maxErrors = config?.scale?.maxPollingErrors || 5;
        console.log(`‚ö†Ô∏è useEquipment: –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling (–æ—à–∏–±–∫–∞ ${activePollingErrorCountRef.current}/${maxErrors}):`, error);
        
        // –î–ª—è –æ—à–∏–±–æ–∫ ReadableStream —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É polling
        if (error instanceof Error && error.message.includes('ReadableStream')) {
          console.log('‚ùå useEquipment: –û—à–∏–±–∫–∞ ReadableStream, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É polling');
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
          try {
            await scaleService.current.disconnect();
            await new Promise(resolve => setTimeout(resolve, 100));
          } catch (disconnectError) {
            console.log('‚ö†Ô∏è useEquipment: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', disconnectError);
          }
          
          stopActivePolling();
          startReservePolling();
          return;
        }
        
        // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π polling
        if (activePollingErrorCountRef.current >= maxErrors) {
          console.log('‚ùå useEquipment: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É');
          stopActivePolling();
          startReservePolling();
          return;
        }
        return;
      } finally {
        isPollingRef.current = false;
      }
    }, activePollingInterval);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling
    activePollingTimeoutRef.current = setTimeout(() => {
      console.log('‚è∞ useEquipment: –¢–∞–π–º–∞—É—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling (' + String(timeout / 1000) + ' —Å–µ–∫), –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É');
      console.log('‚è∞ useEquipment: isActivePolling:', isActivePollingRef.current, 'isReservePolling:', isReservePolling);
      stopActivePolling();
      // –í—Å–µ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π polling –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
      startReservePolling();
    }, timeout);

    console.log(`‚è∞ useEquipment: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç –Ω–∞ ${timeout / 1000} —Å–µ–∫—É–Ω–¥, ID:`, activePollingTimeoutRef.current);
  }, [config, getWeight, status.isConnected, isScaleConnected]);

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling
  const stopActivePolling = useCallback(() => {
    if (!isActivePollingRef.current) {
      return;
    }

    console.log('‚èπÔ∏è useEquipment: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling');
    setIsActivePolling(false);
    isActivePollingRef.current = false;
    activePollingErrorCountRef.current = 0;
    isPollingRef.current = false;

    if (activePollingIntervalRef.current) {
      clearInterval(activePollingIntervalRef.current);
      activePollingIntervalRef.current = null;
    }

    if (activePollingTimeoutRef.current) {
      clearTimeout(activePollingTimeoutRef.current);
      activePollingTimeoutRef.current = null;
    }
  }, []);

  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π polling –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –≤–µ—Å–∞
  useEffect(() => {
    if (significantWeightDetected) {
      if (isReservePollingRef.current) {
        console.log('‚öñÔ∏è useEquipment: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π polling –∏–∑-–∑–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤–µ—Å–∞.');
        stopReservePolling();
        startActivePolling();
      }
      setSignificantWeightDetected(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
    }
  }, [significantWeightDetected, startActivePolling, stopReservePolling]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º ref —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º isActivePolling
  useEffect(() => {
    isActivePollingRef.current = isActivePolling;
  }, [isActivePolling]);

  // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π URL –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
  useEffect(() => {
    let lastPath = window.location.pathname;
    
    const handleLocationChange = () => {
      const currentPath = window.location.pathname;
      if (currentPath !== lastPath) {
        lastPath = currentPath;
        const isOnOrderPage = currentPath.includes('/orders/');
        if (!isOnOrderPage) {
          console.log('üîÑ useEquipment: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ polling');
          if (isActivePolling) {
            stopActivePolling();
          }
          if (isReservePolling) {
            stopReservePolling();
          }
        }
      }
    };

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL (–¥–ª—è SPA)
    window.addEventListener('popstate', handleLocationChange);
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ (–¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
    const interval = setInterval(handleLocationChange, 2000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 2 —Å–µ–∫—É–Ω–¥

    return () => {
      window.removeEventListener('popstate', handleLocationChange);
      clearInterval(interval);
    };
  }, [isActivePolling, isReservePolling, stopActivePolling, stopReservePolling]);

  // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (activePollingIntervalRef.current) {
        clearInterval(activePollingIntervalRef.current);
      }
      if (reservePollingIntervalRef.current) {
        clearInterval(reservePollingIntervalRef.current);
      }
      if (activePollingTimeoutRef.current) {
        clearTimeout(activePollingTimeoutRef.current);
      }
    };
  }, []);

  // –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ—ó —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
  const actions: EquipmentActions = useMemo(() => ({
    connectScale,
    disconnectScale,
    connectScanner,
    disconnectScanner,
    resetScanner,
    setConnectionType,
    getWeight,

    // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling
    startActivePolling,
    stopActivePolling,
    startReservePolling,
    stopReservePolling,

    updateConfig,
    loadConfig,
    saveConfig,
    resetConfig,
    refreshConfig
  }), [
    connectScale,
    disconnectScale,
    connectScanner,
    disconnectScanner,
    resetScanner,
    setConnectionType,
    getWeight,
    checkScaleHealth,
    attemptReconnect,
    startActivePolling,
    stopActivePolling,
    startReservePolling,
    stopReservePolling,
    updateConfig,
    loadConfig,
    saveConfig,
    resetConfig,
    refreshConfig
  ]);

  return [state, actions];
};
