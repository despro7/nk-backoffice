import { ScaleData } from './EquipmentService';
import { EQUIPMENT_DEFAULTS } from '../../shared/constants/equipmentDefaults.js';
import { LoggingService } from './LoggingService';

// –¢–∏–ø—ã –¥–ª—è Web Serial API (–µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º)
declare global {
  interface Navigator {
    serial?: {
      requestPort(options?: { filters?: Array<{ usbVendorId?: number; usbProductId?: number }> }): Promise<SerialPort>;
      getPorts(): Promise<SerialPort[]>;
    };
  }

  interface SerialPort {
    open(options: SerialOptions): Promise<void>;
    close(): Promise<void>;
    readable: ReadableStream<Uint8Array> | null;
    writable: WritableStream<Uint8Array> | null;
  }

  interface SerialOptions {
    baudRate: number;
    dataBits?: number;
    stopBits?: number;
    parity?: string;
    bufferSize?: number;
  }
}

export interface ScaleConnectionConfig {
  baudRate: number;
  dataBits: number;
  stopBits: number;
  parity: 'none' | 'even' | 'odd';
  connectionStrategy?: 'legacy' | 'reconnectOnError' | 'persistentStream';
}

export interface VTAScaleData extends ScaleData {
  price?: number;
  total?: number;
  rawData?: Uint8Array;
}

export class ScaleService {
  private static instance: ScaleService;
  private port: SerialPort | null = null;
  private isConnected: boolean = false;
  private config: ScaleConnectionConfig;
  private onWeightChange: ((data: VTAScaleData) => void) | null = null;
  private onRawData: ((data: Uint8Array) => void) | null = null;
  private reader: ReadableStreamDefaultReader<Uint8Array> | undefined;
  private isReading: boolean = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
  private readLoopPromise: Promise<void> | null = null; // –î–ª—è persistentStream
  private stopReadLoop: (() => void) | null = null; // –î–ª—è persistentStream
  private lastWeightData: VTAScaleData | null = null; // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Å–æ–≤ –¥–ª—è persistentStream
  private cancelCurrentOperation: (() => void) | null = null; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏

  private shouldLog(): boolean {
    try {
      return process.env.NODE_ENV === 'development' && localStorage.getItem('scaleDebug') === '1';
    } catch {
      return process.env.NODE_ENV === 'development';
    }
  }

  private constructor() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.config = {
      baudRate: EQUIPMENT_DEFAULTS.scale.baudRate,
      dataBits: EQUIPMENT_DEFAULTS.scale.dataBits,
      stopBits: EQUIPMENT_DEFAULTS.scale.stopBits,
      parity: EQUIPMENT_DEFAULTS.scale.parity,
      connectionStrategy: EQUIPMENT_DEFAULTS.scale.connectionStrategy,
    };
  }

  public static getInstance(): ScaleService {
    if (!ScaleService.instance) {
      ScaleService.instance = new ScaleService();
    }
    return ScaleService.instance;
  }

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≤–∞–≥ —á–µ—Ä–µ–∑ Web Serial API
  public async connect(autoConnect: boolean = false): Promise<boolean> {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É Web Serial API
      if (!('serial' in navigator)) {
        LoggingService.equipmentLog('‚ö†Ô∏è ScaleService: Web Serial API –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–∂–µ
      if (this.isConnected && this.port) {
        LoggingService.equipmentLog('üîß ScaleService: –í–∞–≥–∏ –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ');
        return true;
      }

      LoggingService.equipmentLog('üîß ScaleService: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ COM –ø–æ—Ä—Ç—É...');

      // –ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç
      if (autoConnect) {
        try {
          const ports = await navigator.serial.getPorts();
          LoggingService.equipmentLog('üîß ScaleService: –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤:', ports.length);

          if (ports.length > 0) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ—Ä—Ç
            this.port = ports[0];
            LoggingService.equipmentLog('üîß ScaleService: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç');
          } else {
            LoggingService.equipmentLog('‚ö†Ô∏è ScaleService: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä');
            return false;
          }
        } catch (error) {
          LoggingService.equipmentLog('‚ö†Ô∏è ScaleService: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã:', error);
          return false;
        }
      } else {
        // –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –ø–æ—Ä—Ç–∞
        this.port = await navigator.serial.requestPort({
          filters: [
            // { usbVendorId: 0x1a86, usbProductId: 0x7523 }, // CH340
            // { usbVendorId: 0x067b, usbProductId: 0x2303 }, // Prolific
            // { usbVendorId: 0x0403, usbProductId: 0x6001 }  // FTDI
          ]
        });
      }

      console.log(`üîß ScaleService: –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ä—Ç –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –í–¢–ê-60 (${this.config.baudRate}-${this.config.dataBits}${this.config.parity.charAt(0).toUpperCase()}${this.config.stopBits})`);

      // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ä—Ç –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –¥–ª—è –í–¢–ê-60
      try {
        if (this.port.readable || this.port.writable) {
          console.log('‚ö†Ô∏è ScaleService: –ü–æ—Ä—Ç —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, –Ω–æ –≤ –¥—Ä—É–≥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è...');
          await this.disconnect(); // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
        }
        await this.port.open({
          baudRate: this.config.baudRate,
          dataBits: this.config.dataBits,
          stopBits: this.config.stopBits,
          parity: this.config.parity,
          bufferSize: 1024
        });
      } catch (openError) {
        if (openError.message.includes('port is already open')) {
          console.log('‚ö†Ô∏è ScaleService: –ü–æ—Ä—Ç –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è');
          // –ü–æ—Ä—Ç —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        } else {
          throw openError; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        }
      }

      this.isConnected = true;
      LoggingService.equipmentLog('‚úÖ ScaleService: –í–∞–≥–∏ –í–¢–ê-60 —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º
      if (this.config.connectionStrategy === 'persistentStream') {
        this.readLoopPromise = this.startReadLoop();
      }

      return true;
    } catch (error) {
      console.log('‚ùå ScaleService: –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≤–∞–≥–∏:', error);
      this.port = null; // –û—á–∏—â–∞–µ–º –ø–æ—Ä—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.isConnected = false;
      return false;
    }
  }

  // –ü–æ–º–æ—â–Ω–∏–∫: —Å–±–æ—Ä–∫–∞ —á–∏—Å–ª–∞ –∏–∑ 6 ¬´—Ü–∏—Ñ—Ä–æ–±–∞–π—Ç—ñ–≤¬ª 0x00..0x09, –º–ª–∞–¥—à–∏–µ —Ä–∞–∑—Ä—è–¥—ã –ø–µ—Ä–≤—ã–º–∏
  private digits6ToNumber(bytes6: Uint8Array): number {
    // bytes6: [m1,m2,m3,m4,m5,m6] –≥–¥–µ m1 ‚Äî –º–ª–∞–¥—à–∏–π —Ä–∞–∑—Ä—è–¥ [2]
    let str = '';
    let validDigits = 0;
    
    for (let i = 5; i >= 0; i--) { // —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ä–∞–∑—Ä—è–¥–æ–≤: m6..m1
      const d = bytes6[i] & 0x0F;
      if (d > 9) {
        // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–µ-—Ü–∏—Ñ—Ä—É, –Ω–æ —É–∂–µ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        if (validDigits > 0) break;
        return NaN; // –∑–∞—â–∏—Ç–∞ –æ—Ç –º—É—Å–æ—Ä–∞
      }
      str += d.toString();
      validDigits++;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ü–∏—Ñ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    if (validDigits === 0) return 0;
    
    // –£–¥–∞–ª–∏–º –ª–∏–¥–∏—Ä—É—é—â–∏–µ –Ω—É–ª–∏, –Ω–æ –æ—Å—Ç–∞–≤–∏–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω
    str = str.replace(/^0+(?!$)/, '');
    return Number(str);
  }

  // –ü–æ–º–æ—â–Ω–∏–∫: —Å–±–æ—Ä–∫–∞ —á–∏—Å–ª–∞ –∏–∑ 5 ¬´—Ü–∏—Ñ—Ä–æ–±–∞–π—Ç—ñ–≤¬ª 0x00..0x09, –º–ª–∞–¥—à–∏–µ —Ä–∞–∑—Ä—è–¥—ã –ø–µ—Ä–≤—ã–º–∏
  private digits5ToNumber(bytes5: Uint8Array): number {
    // bytes5: [m1,m2,m3,m4,m5] –≥–¥–µ m1 ‚Äî –º–ª–∞–¥—à–∏–π —Ä–∞–∑—Ä—è–¥
    let str = '';
    let validDigits = 0;
    
    for (let i = 4; i >= 0; i--) { // —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ä–∞–∑—Ä—è–¥–æ–≤: m5..m1
      const d = bytes5[i] & 0x0F;
      if (d > 9) {
        // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–µ-—Ü–∏—Ñ—Ä—É, –Ω–æ —É–∂–µ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        if (validDigits > 0) break;
        return NaN; // –∑–∞—â–∏—Ç–∞ –æ—Ç –º—É—Å–æ—Ä–∞
      }
      str += d.toString();
      validDigits++;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ü–∏—Ñ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    if (validDigits === 0) return 0;
    
    // –£–¥–∞–ª–∏–º –ª–∏–¥–∏—Ä—É—é—â–∏–µ –Ω—É–ª–∏, –Ω–æ –æ—Å—Ç–∞–≤–∏–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω
    str = str.replace(/^0+(?!$)/, '');
    return Number(str);
  }

  // –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è –º–∞—Å—Å—ã (–í–¢–ê-60 –æ–±—ã—á–Ω–æ 3 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫–≥)
  private formatMassFromDigits(bytes6: Uint8Array, decimals: number = 3): number {
    const raw = this.digits6ToNumber(bytes6); // –Ω–∞–ø—Ä–∏–º–µ—Ä 1234
    const factor = Math.pow(10, decimals);
    const result = raw / factor; // –∫–≥
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ –≤–µ—Å –±–æ–ª—å—à–µ 1000 –∫–≥, –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ—á–∫–∞ —Å–¥–≤–∏–Ω—É—Ç–∞
    if (result > 1000) {
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–¥–≤–∏–Ω—É—Ç—å —Ç–æ—á–∫—É –Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑—Ä—è–¥ –≤–ª–µ–≤–æ
      const adjustedResult = raw / Math.pow(10, decimals + 1);
      if (adjustedResult < 1000 && adjustedResult > 0) {
        return adjustedResult;
      }
    }
    
    return result;
  }

  // –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è —Ü–µ–Ω—ã
  private formatPriceFromDigits(bytes6: Uint8Array, decimals: number = 2): number {
    const raw = this.digits6ToNumber(bytes6);
    const result = raw / Math.pow(10, decimals);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ü–µ–Ω–∞ –±–æ–ª—å—à–µ 999.99, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –ø–∞—Ä—Å–∏–Ω–≥–∞
    if (result > 999.99) {
      return 0;
    }
    
    return result;
  }

  // –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è —Å—É–º–º—ã
  private formatTotalFromDigits(bytes5: Uint8Array, decimals: number = 2): number {
    const raw = this.digits5ToNumber(bytes5);
    const result = raw / Math.pow(10, decimals);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å—É–º–º–∞ –±–æ–ª—å—à–µ 9999.99, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –ø–∞—Ä—Å–∏–Ω–≥–∞
    if (result > 9999.99) {
      return 0;
    }
    
    return result;
  }

  // –ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (18 –±–∞–π—Ç) –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –í–¢–ê-60 —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –æ—Ç–º–µ–Ω–æ–π
  private async readOneFrame(timeoutMs: number = 1000): Promise<Uint8Array | null> {
    if (!this.port || !this.isConnected || !this.port.readable) {
      console.log('‚ö†Ô∏è ScaleService: Port not available for reading');
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ—Ç–æ–∫
    if (this.port.readable.locked) {
      console.log('‚ö†Ô∏è ScaleService: ReadableStream is locked, attempting to recover...');
      
      // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π reader, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å
      if (this.reader) {
        try {
          // –û—Ç–º–µ–Ω—è–µ–º —á—Ç–µ–Ω–∏–µ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ç–æ–∫
          await this.reader.cancel();
          this.reader.releaseLock();
        } catch (e) {
          console.log('‚ö†Ô∏è ScaleService: Error releasing locked reader:', e);
        } finally {
          this.reader = undefined;
        }
      }
      
      // –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –≤—Å–µ –µ—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      if (this.port.readable.locked) {
        console.log('‚ö†Ô∏è ScaleService: ReadableStream still locked after recovery attempt');
        return null;
      }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π reader
    try {
      this.reader = this.port.readable.getReader();
    } catch (e) {
      console.log('‚ö†Ô∏è ScaleService: Failed to get reader:', e);
      return null;
    }
    
    // –§–ª–∞–≥ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
    let cancelled = false;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
    const cancelOperation = () => {
      cancelled = true;
      if (this.reader) {
        this.reader.cancel().catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–º–µ–Ω—ã
      }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    this.cancelCurrentOperation = cancelOperation;

    try {
      const start = performance.now();
      const buf: number[] = [];

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∏—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
      return new Promise<Uint8Array | null>((resolve, reject) => {
        // –¢–∞–π–º–µ—Ä –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
        const timeoutId = setTimeout(() => {
          console.log('‚è±Ô∏è ScaleService: Read timeout reached');
          cancelOperation();
          resolve(null);
        }, timeoutMs);

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        const readChunk = async () => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è
          if (cancelled) {
            clearTimeout(timeoutId);
            console.log('‚ÑπÔ∏è ScaleService: Read operation was cancelled');
            resolve(null);
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
          if (performance.now() - start >= timeoutMs) {
            console.log('‚è±Ô∏è ScaleService: Read operation timeout');
            cancelOperation();
            resolve(null);
            return;
          }

          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ reader
            if (!this.reader) {
              clearTimeout(timeoutId);
              console.log('‚ö†Ô∏è ScaleService: Reader is not available');
              resolve(null);
              return;
            }
            
            const { value, done } = await this.reader.read();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ await
            if (cancelled) {
              clearTimeout(timeoutId);
              console.log('‚ÑπÔ∏è ScaleService: Read operation was cancelled after await');
              resolve(null);
              return;
            }
            
            if (done) {
              clearTimeout(timeoutId);
              console.log('‚ÑπÔ∏è ScaleService: Read operation completed (done=true)');
              resolve(null);
              return;
            }
            
            if (value) {
              for (const b of value) buf.push(b);
              // –ò—â–µ–º –º–∏–Ω–∏–º—É–º 18 –±–∞–π—Ç –ø–æ–¥—Ä—è–¥ ‚Äî –≤ —ç—Ç–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–µ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞, –ø—Ä–æ—Å—Ç–æ 18 ¬´—Ü–∏—Ñ—Ä–æ–±–∞–π—Ç—ñ–≤¬ª
              while (buf.length >= 18) {
                clearTimeout(timeoutId);
                const frame = buf.splice(0, 18); // –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–µ 18
                if (this.shouldLog()) {
                  console.log('‚úÖ ScaleService: Successfully read 18-byte frame');
                }
                resolve(new Uint8Array(frame));
                return;
              }
            }
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —á—Ç–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            setTimeout(readChunk, 5);
          } catch (error) {
            clearTimeout(timeoutId);
            if (!cancelled) {
              // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
              if (!error.message?.includes('Releasing Default reader') && 
                  !error.message?.includes('reader') &&
                  error.name !== 'TypeError') {
                console.error('‚ùå ScaleService: Critical error reading frame:', error);
              }
            }
            resolve(null);
          }
        };

        // –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ
        readChunk();
      });
    } finally {
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º reader
      if (this.reader) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ reader –ø–µ—Ä–µ–¥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º
          this.reader.releaseLock();
          if (this.shouldLog()) {
            console.log('‚úÖ ScaleService: Reader successfully released');
          }
        } catch (e) {
          console.log('‚ö†Ô∏è ScaleService: Error releasing reader in finally block:', e);
        }
        this.reader = undefined;
      }
      // –û—á–∏—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–º–µ–Ω—ã
      this.cancelCurrentOperation = null;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ç–∞—Ä—É–≤–∞–Ω–∏—è ¬´00 00 01¬ª –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –í–¢–ê-60
  public async tare(): Promise<boolean> {
    if (!this.port || !this.isConnected) {
      console.log('‚ö†Ô∏è ScaleService: –í–µ—Å—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã Tare');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏
    if (this.port.writable?.locked) {
      console.log('‚ö†Ô∏è ScaleService: WritableStream –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã Tare');
      return false;
    }

    try {
      const writer = this.port.writable?.getWriter();
      if (!writer) {
        console.log('‚ö†Ô∏è ScaleService: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å writer –¥–ª—è –∫–æ–º–∞–Ω–¥—ã Tare');
        return false;
      }

      console.log('‚öñÔ∏è ScaleService: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É Tare (00 00 01)');
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏
      const writePromise = writer.write(new Uint8Array([0x00, 0x00, 0x01]));
      const timeoutPromise = new Promise<never>((_, reject) => 
        setTimeout(() => {
          try {
            writer.releaseLock();
          } catch (e) {
            console.log('‚ö†Ô∏è ScaleService: –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è writer –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ Tare:', e);
          }
          reject(new Error('–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã Tare'));
        }, 2000)
      );
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞
      await Promise.race([writePromise, timeoutPromise]);
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º writer
      writer.releaseLock();
      
      console.log('‚úÖ ScaleService: –ö–æ–º–∞–Ω–¥–∞ Tare –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      return true;
      
    } catch (error) {
      console.error('‚ùå ScaleService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã Tare:', error);
      return false;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ¬´00 00 03¬ª –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –í–¢–ê-60
  private async sendPoll(): Promise<void> {
    if (!this.port || !this.isConnected) {
      throw new Error('Scale is not connected');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏
    if (this.port.writable?.locked) {
      console.log('‚ö†Ô∏è ScaleService: WritableStream is locked, attempting to recover...');
      
      // –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
      await new Promise(resolve => setTimeout(resolve, 100));
      
      // –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –≤—Å–µ –µ—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (this.port.writable?.locked) {
        // –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å
        try {
          const writer = this.port.writable.getWriter();
          writer.releaseLock();
          console.log('‚úÖ ScaleService: WritableStream unlocked successfully');
        } catch (e) {
          console.log('‚ö†Ô∏è ScaleService: Failed to unlock WritableStream:', e);
          throw new Error('WritableStream is locked, cannot send poll request');
        }
      }
    }

    try {
      const writer = this.port.writable?.getWriter();
      if (!writer) throw new Error('Failed to get writer');

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏
      const writePromise = writer.write(new Uint8Array([0x00, 0x00, 0x03]));
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => {
          try {
            writer.releaseLock();
          } catch (e) {
            console.log('‚ö†Ô∏è ScaleService: Error releasing writer on timeout:', e);
          }
          reject(new Error('Timeout while writing to scale'));
        }, 2000)
      );
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞
      await Promise.race([writePromise, timeoutPromise]);
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º writer —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
      writer.releaseLock();
      if (this.shouldLog()) {
        console.log('‚úÖ ScaleService: Poll request sent successfully');
      }
    } catch (error) {
      console.error('Error sending poll to scale:', error);
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π, –ø—ã—Ç–∞–µ–º—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ç–æ–∫
      if (error.message.includes('locked')) {
        this.forceUnlockStreams();
      }
      
      throw error;
    }
  }

  // –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –æ–ø—Ä–æ—Å –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–¥–∞—á–∏, –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–¥—Ä–∞
  public async readScaleOnce(usePolling: boolean = true): Promise<VTAScaleData | null> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ —á—Ç–µ–Ω–∏–µ
    if (this.isReading) {
      console.log('‚ö†Ô∏è ScaleService: Read operation already in progress');
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
      await new Promise(resolve => setTimeout(resolve, 100));
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —á–∏—Ç–∞–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      if (this.isReading) {
        return null;
      }
    }

    if (!this.isConnected) {
      return null;
    }

    this.isReading = true;
    try {
      if (usePolling) {
        await this.sendPoll(); // –∑–∞–ø—Ä–æ—Å ¬´–º–∞—Å—Å–∞/—Ü–µ–Ω–∞/—Å—É–º–º–∞¬ª
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è
      const readPromise = this.readOneFrame(3000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 3 —Å–µ–∫—É–Ω–¥
      const timeoutPromise = new Promise<null>((resolve) => {
        setTimeout(() => {
          if (this.shouldLog()) {
            console.log('‚è±Ô∏è ScaleService: Global timeout for readScaleOnce reached');
          }
          // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —á—Ç–µ–Ω–∏—è
          if (this.cancelCurrentOperation) {
            this.cancelCurrentOperation();
          }
          resolve(null);
        }, 5000); // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
      });

      const frame = await Promise.race([readPromise, timeoutPromise]);
      
      if (!frame) {
        // –ü—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        return null;
      }

      // m1..m6 c1..c6 v1..v5 (–º–ª–∞–¥—à–∏–µ —Å–Ω–∞—á–∞–ª–∞, –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–π—Ç —Å–ª—É–∂–µ–±–Ω—ã–π)
      const m = frame.slice(0, 6);
      const c = frame.slice(6, 12);
      const v = frame.slice(12, 17); // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 5 –±–∞–π—Ç –¥–ª—è —Å—É–º–º—ã, –∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É–∂–µ–±–Ω—ã–π –±–∞–π—Ç

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ decimals –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Å–æ–≤)
      const massKg = this.formatMassFromDigits(m, 3);    // –∫–≥, —Ç—Ä–∏ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
      const price = this.formatPriceFromDigits(c, 2);    // –≤–∞–ª—é—Ç–∞/–∫–≥
      const total = this.formatTotalFromDigits(v, 2);    // –≤–∞–ª—é—Ç–∞

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–º–∏
      if (isNaN(massKg) || isNaN(price) || isNaN(total)) {
        console.log('‚ö†Ô∏è ScaleService: Invalid data received from scale');
        return null; // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
      }

      const scaleData: VTAScaleData = {
        weight: massKg,
        unit: 'kg',
        isStable: true, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ 0
        timestamp: new Date(),
        price: price,
        total: total,
        rawData: frame
      };

      return scaleData;
    } catch (error) {
      const now = new Date();
      const timeStr = now.toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit', second: '2-digit' });
      const uptimeSec = Math.floor((now.getTime() - performance.timeOrigin) / 1000);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
      const errorInfo = {
        timestamp: now.toISOString(),
        timeStr,
        uptimeSec,
        error: {
          message: error instanceof Error ? error.message : String(error),
          name: error instanceof Error ? error.name : 'Unknown',
          stack: error instanceof Error ? error.stack : undefined
        },
        connectionState: {
          isConnected: this.isConnected,
          portExists: !!this.port,
          readableLocked: this.port?.readable?.locked || false,
          writableLocked: this.port?.writable?.locked || false,
          isReading: this.isReading
        },
        config: this.config
      };
      
      console.error(`‚ùå ScaleService: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è [${timeStr}, +${uptimeSec}s]:`, errorInfo);

      // –î–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      return null;
    } finally {
      this.isReading = false;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  private async handleConnectionLoss(): Promise<void> {
    if (!this.isConnected) return;

    console.log('üîå ScaleService: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    await this.disconnect();

    // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    await new Promise(resolve => setTimeout(resolve, 2000));

    try {
      const reconnected = await this.connect(true); // autoConnect = true
      if (reconnected) {
        console.log('‚úÖ ScaleService: –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –≤–µ—Å–∞–º.');
      } else {
        console.log('‚ùå ScaleService: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.');
      }
    } catch (error) {
      console.error('‚ùå ScaleService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }

  // --- –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ "persistentStream" ---
  private async startReadLoop(): Promise<void> {
    console.log('üåÄ persistentStream: –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —á—Ç–µ–Ω–∏—è...');

    let shouldStop = false;
    this.stopReadLoop = () => {
      shouldStop = true;
      if (this.reader) {
        this.reader.cancel().catch(() => {});
      }
    };

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–µ—Å–∞–º
    const pollInterval = setInterval(async () => {
      if (shouldStop || !this.isConnected) return;
      
      try {
        await this.sendPoll();
      } catch (error) {
        console.error('üåÄ persistentStream: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
      }
    }, 1000); // –ó–∞–ø—Ä–æ—Å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

    while (!shouldStop && this.isConnected) {
      if (!this.port?.readable) {
        console.log('üåÄ persistentStream: Port not readable, stopping loop.');
        clearInterval(pollInterval);
        await this.handleConnectionLoss();
        continue;
      }

      this.reader = this.port.readable.getReader();
      const buffer: number[] = [];

      try {
        while (!shouldStop) {
          const { value, done } = await this.reader.read();
          if (done || shouldStop) {
            break;
          }

          if (value) {
            for (const b of value) buffer.push(b);
            this.onRawData?.(value);

            while (buffer.length >= 18) {
              const frame = new Uint8Array(buffer.splice(0, 18));
              const scaleData = this.parseFrame(frame);
              if (scaleData) {
                this.onWeightChange?.(scaleData);
              }
            }
          }
        }
      } catch (error) {
        console.error('üåÄ persistentStream: –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —á—Ç–µ–Ω–∏—è:', error);
        if (!shouldStop) {
          clearInterval(pollInterval);
          await this.handleConnectionLoss();
        }
      } finally {
        if (this.reader) {
          this.reader.releaseLock();
          this.reader = undefined;
        }
      }
    }
    
    clearInterval(pollInterval);
    console.log('üåÄ persistentStream: –¶–∏–∫–ª —á—Ç–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
  }

  private parseFrame(frame: Uint8Array): VTAScaleData | null {
    try {
      const m = frame.slice(0, 6);
      const c = frame.slice(6, 12);
      const v = frame.slice(12, 17); // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 5 –±–∞–π—Ç –¥–ª—è —Å—É–º–º—ã, –∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É–∂–µ–±–Ω—ã–π –±–∞–π—Ç

      const massKg = this.formatMassFromDigits(m, 3);
      const price = this.formatPriceFromDigits(c, 2);
      const total = this.formatTotalFromDigits(v, 2);

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞
      if (isNaN(massKg) || massKg < 0 || massKg > 1000) {
        console.warn('‚ö†Ô∏è ScaleService: Invalid weight detected:', massKg, 'from bytes:', Array.from(m));
      }

      const scaleData = {
        weight: massKg,
        unit: 'kg',
        isStable: true,
        timestamp: new Date(),
        price,
        total,
        rawData: frame,
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è persistentStream
      this.lastWeightData = scaleData;

      return scaleData;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–¥—Ä–∞:', error, frame);
      return null;
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö reader'–æ–≤ –∏ writer'–æ–≤
  private forceUnlockStreams(): void {
    try {
      if (this.port?.readable) {
        if (this.port.readable.locked) {
          console.log('üîì ScaleService: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º ReadableStream');
          try {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å reader –∏ —Å—Ä–∞–∑—É –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –µ–≥–æ
            const reader = this.port.readable.getReader();
            reader.releaseLock();
            console.log('‚úÖ ScaleService: ReadableStream successfully unlocked via get/release');
          } catch (e) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å reader, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Ç–æ–∫
            try {
              const reader = this.port.readable.getReader();
              reader.cancel().then(() => {
                try {
                  reader.releaseLock();
                  console.log('‚úÖ ScaleService: ReadableStream successfully unlocked via cancel/release');
                } catch (e3) {
                  console.log('‚ö†Ô∏è ScaleService: Error releasing reader after cancel:', e3);
                }
              }).catch((e2) => {
                console.log('‚ö†Ô∏è ScaleService: Error cancelling reader:', e2);
                // –ü—Ä–æ—Å—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å
                try {
                  const reader = this.port.readable.getReader();
                  reader.releaseLock();
                  console.log('‚úÖ ScaleService: ReadableStream unlocked via direct release');
                } catch (e4) {
                  console.log('‚ö†Ô∏è ScaleService: Error releasing reader directly:', e4);
                }
              });
            } catch (e5) {
              console.log('‚ö†Ô∏è ScaleService: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å ReadableStream:', e5);
            }
          }
        } else {
          console.log('‚ÑπÔ∏è ScaleService: ReadableStream is not locked');
        }
      } else {
        console.log('‚ÑπÔ∏è ScaleService: ReadableStream is not available');
      }
      
      if (this.port?.writable) {
        if (this.port.writable.locked) {
          console.log('üîì ScaleService: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º WritableStream');
          try {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å writer –∏ —Å—Ä–∞–∑—É –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –µ–≥–æ
            const writer = this.port.writable.getWriter();
            writer.releaseLock();
            console.log('‚úÖ ScaleService: WritableStream successfully unlocked');
          } catch (e) {
            console.log('‚ö†Ô∏è ScaleService: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å WritableStream:', e);
          }
        } else {
          console.log('‚ÑπÔ∏è ScaleService: WritableStream is not locked');
        }
      } else {
        console.log('‚ÑπÔ∏è ScaleService: WritableStream is not available');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è ScaleService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–æ–≤:', error);
    }
  }

  // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ –≤–∞–≥
  public async disconnect(): Promise<void> {
    try {
      
      // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —á—Ç–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      if (this.cancelCurrentOperation) {
        this.cancelCurrentOperation();
        this.cancelCurrentOperation = null;
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è –¥–ª—è persistentStream
      if (this.stopReadLoop) {
        console.log('üîÑ ScaleService: Stopping read loop');
        this.stopReadLoop();
        if (this.readLoopPromise) {
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞
          try {
            await Promise.race([
              this.readLoopPromise,
              new Promise(resolve => setTimeout(resolve, 1000))
            ]);
          } catch (e) {
            console.log('‚ö†Ô∏è ScaleService: Error waiting for read loop to stop:', e);
          }
        }
        this.stopReadLoop = null;
        this.readLoopPromise = null;
      }

      // –û—Ç–º–µ–Ω—è–µ–º reader, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (this.reader) {
        console.log('üîÑ ScaleService: Cancelling reader');
        try {
          // –û—Ç–º–µ–Ω—è–µ–º —á—Ç–µ–Ω–∏–µ –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–º–∏—Å–∞
          const cancelPromise = this.reader.cancel();
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è cancel()
          await Promise.race([cancelPromise, new Promise(resolve => setTimeout(resolve, 500))]);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        } finally {
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º reader
          try {
            this.reader.releaseLock();
          } catch (e) {
          }
          this.reader = undefined;
        }
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
      if (this.port) {
        console.log('üîÑ ScaleService: Closing port');
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        this.forceUnlockStreams();

        if (this.port.readable || this.port.writable) {
          try {
            await this.port.close();
          } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞
          }
        }
      }
    } catch (error) {
      console.error('‚ùå ScaleService: Error during scale disconnect:', error);
    } finally {
      this.port = null;
      this.isConnected = false;
      this.isReading = false; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–ª–∞–≥ —Å–±—Ä–æ—à–µ–Ω
      this.reader = undefined; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ reader –æ—á–∏—â–µ–Ω
      this.cancelCurrentOperation = null; // –û—á–∏—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–º–µ–Ω—ã
    }
  }


  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è callback –¥–ª—è –∑–º—ñ–Ω–∏ –≤–∞–≥–∏
  public onWeightData(callback: (data: VTAScaleData) => void): void {
    this.onWeightChange = callback;
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è callback –¥–ª—è —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö
  public onRawDataReceived(callback: (data: Uint8Array) => void): void {
    this.onRawData = callback;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∞–≥–∏
  public async getCurrentWeight(): Promise<VTAScaleData | null> {
    if (!this.isConnected) {
      console.log('‚ö†Ô∏è ScaleService: –í–∞–≥–∏ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ');
      return null;
    }

    // –í —Ä–µ–∂–∏–º–µ persistentStream –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
    if (this.config.connectionStrategy === 'persistentStream') {
      console.log('üåÄ persistentStream: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Å–æ–≤');
      return this.lastWeightData;
    }

    if (this.shouldLog()) {
      console.log('üîß ScaleService: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ—Å–æ–≤...');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
    return await this.readScaleOnce(true);
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
  public isScaleConnected(): boolean {
    return this.isConnected;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–µ—Å–æ–≤ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  public async checkScaleStatus(): Promise<{ connected: boolean; readableLocked: boolean; writableLocked: boolean }> {
    return {
      connected: this.isConnected,
      readableLocked: this.port?.readable?.locked || false,
      writableLocked: this.port?.writable?.locked || false
    };
  }
  
  // –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è
  public cancelCurrentReadOperation(): void {
    console.log('üîÑ ScaleService: Attempting to cancel current read operation');
    if (this.cancelCurrentOperation) {
      console.log('üîÑ ScaleService: –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è');
      try {
        this.cancelCurrentOperation();
        console.log('‚úÖ ScaleService: Current read operation cancelled successfully');
      } catch (e) {
        console.log('‚ö†Ô∏è ScaleService: Error during cancellation:', e);
      }
      this.cancelCurrentOperation = null;
    } else {
      console.log('‚ÑπÔ∏è ScaleService: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã');
    }
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  public updateConfig(newConfig: Partial<ScaleConnectionConfig>): void {
    const oldStrategy = this.config.connectionStrategy;
    this.config = { ...this.config, ...newConfig };

    // –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    if (newConfig.connectionStrategy && newConfig.connectionStrategy !== oldStrategy) {
      console.log(`üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${newConfig.connectionStrategy}. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.`);
      if (this.isConnected) {
        this.disconnect().then(() => this.connect(true));
      }
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  public getConfig(): ScaleConnectionConfig {
    return { ...this.config };
  }

  // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –í–¢–ê-60
  public async testConnection(): Promise<boolean> {
    try {
      const result = await this.connect();
      if (result) {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ—Å–æ–≤
        const testData = await this.readScaleOnce(true);
        // –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
        // await this.disconnect(); // ‚Üê –£–ë–†–ê–ù–û: –Ω–µ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
        return testData !== null;
      }
      return false;
    } catch (error) {
      console.error('Scale connection test failed:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const errorInfo = {
        message: error instanceof Error ? error.message : String(error),
        name: error instanceof Error ? error.name : 'UnknownError',
        stack: error instanceof Error ? error.stack : 'No stack trace',
        timestamp: new Date().toISOString(),
        connectionState: {
          isConnected: this.isConnected,
          portExists: !!this.port,
          readableLocked: this.port?.readable?.locked || false,
          writableLocked: this.port?.writable?.locked || false
        }
      };
      
      console.error('üîß –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', errorInfo);
      return false;
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≤–µ—Å–∞–º–∏
  public async forceReset(): Promise<boolean> {
    try {
      console.log('üîÑ ScaleService: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≤–µ—Å–∞–º–∏');
      
      // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —á—Ç–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      if (this.cancelCurrentOperation) {
        console.log('üîÑ ScaleService: –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º');
        this.cancelCurrentOperation();
        this.cancelCurrentOperation = null;
      }
      
      // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
      await this.disconnect();
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ
      const reconnected = await this.connect();
      
      if (reconnected) {
        console.log('‚úÖ ScaleService: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞');
        return true;
      } else {
        console.log('‚ùå ScaleService: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞');
        return false;
      }
    } catch (error) {
      console.error('‚ùå ScaleService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Å–±—Ä–æ—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      return false;
    }
  }
}

export default ScaleService;
