import { useState, useEffect } from "react";
import { Card, CardBody, CardHeader } from "@heroui/card";
import { Button, ButtonGroup } from "@heroui/button";
import { Switch } from "@heroui/switch";
import { RadioGroup, Radio } from "@heroui/radio";
import { DynamicIcon } from "lucide-react/dynamic";
import { useEquipment } from "../hooks/useEquipment";
import { EquipmentConfig } from "../services/EquipmentService";
import { Input } from "@heroui/input";
import { Select, SelectItem } from "@heroui/select";
import { addToast } from "@heroui/toast";

export const SettingsEquipment = () => {
  const [state, actions] = useEquipment();
  const [localConfig, setLocalConfig] = useState<EquipmentConfig | null>(null);

  const [isSaving, setIsSaving] = useState(false);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –ë–î
  useEffect(() => {
    if (state.config && !localConfig) {
      setLocalConfig(state.config);
    }
  }, [state.config, localConfig]);

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  const handleConfigChange = (
    section: keyof EquipmentConfig,
    field: string,
    value: any,
  ) => {
    if (!localConfig) return;

    setLocalConfig((prev) => {
      if (!prev) return prev;

      // –ï—Å–ª–∏ –ø–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "weightRange.min"), —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
      if (field.includes('.')) {
        const [nestedSection, nestedField] = field.split('.');
        return {
          ...prev,
          [section]: {
            ...(typeof prev[section] === "object" && prev[section] !== null
              ? prev[section]
              : {}),
            [nestedSection]: {
              ...(typeof prev[section]?.[nestedSection] === "object" && prev[section]?.[nestedSection] !== null
                ? prev[section][nestedSection]
                : {}),
              [nestedField]: value,
            },
          },
        };
      }

      // –û–±—ã—á–Ω–æ–µ –ø–æ–ª–µ
      return {
        ...prev,
        [section]: {
          ...(typeof prev[section] === "object" && prev[section] !== null
            ? prev[section]
            : {}),
          [field]: value,
        },
      };
    });
  };

  // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  const applyConfig = async (config?: EquipmentConfig) => {
    const configToSave = config || localConfig;
    if (!configToSave) return;

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", JSON.stringify(configToSave, null, 2));

    try {
      setIsSaving(true);
      await actions.saveConfig(configToSave);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
      addToast({
        title: "–£—Å–ø—ñ—Ö",
        description: "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!",
        color: "success",
      });
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", error);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      addToast({
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å!",
        color: "danger",
      });
    } finally {
      setIsSaving(false);
    }
  };

  // –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ onPress
  const handleApplyConfig = () => applyConfig();

  // –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const resetConfig = async () => {
    if (
      !confirm(
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º?",
      )
    ) {
      return;
    }

    try {
      setIsSaving(true);
      await actions.resetConfig();
      // –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ useEffect
      addToast({
        title: "–£—Å–ø—ñ—Ö",
        description: "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç—ñ –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º!",
        color: "success",
      });
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", error);
      addToast({
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å!",
        color: "danger",
      });
    } finally {
      setIsSaving(false);
    }
  };

  // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ç–∏–ø—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  const setConnectionType = (type: "local" | "simulation") => {
    actions.setConnectionType(type);
    // –ù–µ —Ç—Ä–æ–≥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∞
  };

  // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É —Å–∏–º—É–ª—è—Ü—ñ—ó
  const toggleSimulation = async (enabled: boolean) => {
    if (!localConfig) return;
    const newConnectionType: "local" | "simulation" = enabled ? "simulation" : "local";

    const updatedConfig: EquipmentConfig = localConfig ? {
      ...localConfig,
      connectionType: newConnectionType,
      simulation: {
        enabled: enabled,
        weightRange: {
          min: localConfig.simulation?.weightRange?.min ?? 0.1,
          max: localConfig.simulation?.weightRange?.max ?? 5.0
        },
        scanDelay: localConfig.simulation?.scanDelay ?? 800,
        weightDelay: localConfig.simulation?.weightDelay ?? 1200
      },
      websocket: localConfig.websocket || {
        url: 'ws://localhost:8080/equipment',
        autoReconnect: true,
        reconnectInterval: 5000,
        maxReconnectAttempts: 10,
        heartbeatInterval: 30000
      }
    } : localConfig;

    console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ toggleSimulation:", JSON.stringify(updatedConfig, null, 2));

    setLocalConfig(updatedConfig);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ë–î
    await applyConfig(updatedConfig);
  };

  // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ç–∏–ø—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏)
  const handleConnectionTypeChange = async (value: string) => {
    if (!localConfig) return;
    const newConnectionType: "local" | "simulation" = value as "local" | "simulation";
    const isSimulation = newConnectionType === "simulation";

    const updatedConfig: EquipmentConfig = localConfig ? {
      ...localConfig,
      connectionType: newConnectionType,
      simulation: {
        enabled: isSimulation,
        weightRange: {
          min: localConfig.simulation?.weightRange?.min ?? 0.1,
          max: localConfig.simulation?.weightRange?.max ?? 5.0
        },
        scanDelay: localConfig.simulation?.scanDelay ?? 800,
        weightDelay: localConfig.simulation?.weightDelay ?? 1200
      },
      websocket: localConfig.websocket || {
        url: 'ws://localhost:8080/equipment',
        autoReconnect: true,
        reconnectInterval: 5000,
        maxReconnectAttempts: 10,
        heartbeatInterval: 30000
      }
    } : localConfig;

    console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ handleConnectionTypeChange:", JSON.stringify(updatedConfig, null, 2));

    setLocalConfig(updatedConfig);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ë–î
    await applyConfig(updatedConfig);
  };

  // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (!localConfig) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-6 ml-auto">
          {/* –°–≤–∏—Ç—á–µ—Ä —Ä–µ–∂–∏–º—É —Å–∏–º—É–ª—è—Ü—ñ—ó */}
          <div className="flex items-center gap-3 border-1 border-r-gray-400 pr-6">
            <Switch
              isSelected={localConfig.connectionType === "simulation"}
              onValueChange={toggleSimulation}
              color="success"
              size="sm"
              classNames={{
                wrapper: "bg-secondary/50",
                thumbIcon: "bg-white/50",
              }}
            >
              –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü—ñ—ó</Switch>
          </div>

          {/* RadioGroup –¥–ª—è —Ç–∏–ø—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è */}
          <div className="flex items-center gap-3">
            <span className="text-sm font-medium text-gray-700">–¢–∏–ø –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:</span>
            <div className="flex flex-row items-center gap-2 bg-primary text-white rounded-lg px-3 py-1 text-sm">
              <DynamicIcon name="usb" size={16} />
              <span>Serial Port</span>
            </div>
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è */}
      <Card className="bg-gradient-to-r bg-neutral-50">
        <CardHeader className="border-b border-grey-200">
          <DynamicIcon
            name="activity"
            size={20}
            className="text-primary mr-2"
          />
          <h2 className="text-lg font-semibold text-primary">–°—Ç–∞—Ç—É—Å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è</h2>
        </CardHeader>
        <CardBody className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* –°–∫–∞–Ω–µ—Ä */}
            <div className="text-center">
              <div
                className={`w-16 h-16 mx-auto mb-3 rounded-full flex items-center justify-center ${
                  state.isConnected ? "bg-green-100" : "bg-red-100"
                }`}
              >
                <DynamicIcon
                  name="scan"
                  size={24}
                  className={
                    state.isConnected ? "text-green-600" : "text-red-600"
                  }
                />
              </div>
              <h3 className="font-medium text-gray-900">–°–∫–∞–Ω–µ—Ä —à—Ç—Ä–∏—Ö-–∫–æ–¥—ñ–≤</h3>
              <p
                className={`text-sm ${
                  state.isConnected ? "text-green-600" : "text-red-600"
                }`}
              >
                {state.isConnected ? "–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ" : "–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ"}
              </p>
              {state.lastBarcode && (
                <div className="mt-2 p-2 bg-gray-50 rounded text-xs">
                  <p className="font-medium">
                    –û—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ–¥: {state.lastBarcode.code}
                  </p>
                  <p className="text-gray-500">–¢–∏–ø: {state.lastBarcode.type}</p>
                </div>
              )}
            </div>

            {/* –í–∞–≥–∏ */}
            <div className="text-center">
              <div
                className={`w-16 h-16 mx-auto mb-3 rounded-full flex items-center justify-center ${
                  state.isConnected ? "bg-green-100" : "bg-red-100"
                }`}
              >
                <DynamicIcon
                  name="scale"
                  size={24}
                  className={
                    state.isConnected ? "text-green-600" : "text-red-600"
                  }
                />
              </div>
              <h3 className="font-medium text-gray-900">–í–∞–≥–∏ –í–¢–ê-60</h3>
              <p
                className={`text-sm ${
                  state.isConnected ? "text-green-600" : "text-red-600"
                }`}
              >
                {state.isConnected ? "–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ" : "–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ"}
              </p>
              {state.currentWeight && (
                <div className="mt-2 p-2 bg-gray-50 rounded text-xs">
                  <p className="font-medium">
                    –í–∞–≥–∞: {state.currentWeight.weight} –∫–≥
                  </p>
                  <p className="text-gray-500">
                    {state.currentWeight.isStable ? "–°—Ç–∞–±—ñ–ª—å–Ω–æ" : "–ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω–æ"}
                  </p>
                </div>
              )}
            </div>

            {/* –ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å */}
            <div className="text-center">
              <div
                className={`w-16 h-16 mx-auto mb-3 rounded-full flex items-center justify-center ${
                  state.status.isConnected ? "bg-green-100" : "bg-red-100"
                }`}
              >
                <DynamicIcon
                  name="wifi"
                  size={24}
                  className={
                    state.status.isConnected ? "text-green-600" : "text-red-600"
                  }
                />
              </div>
              <h3 className="font-medium text-gray-900">–ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å</h3>
              <p
                className={`text-sm ${
                  state.status.isConnected ? "text-green-600" : "text-red-600"
                }`}
              >
                {state.status.isConnected
                  ? "–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞"
                  : "–°–∏—Å—Ç–µ–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"}
              </p>
              {state.status.lastActivity && (
                <p className="text-xs text-gray-500 mt-1">
                  –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:{" "}
                  {state.status.lastActivity.toLocaleTimeString()}
                </p>
              )}
            </div>
          </div>

          {/* –ü–æ–º–∏–ª–∫–∏ */}
          {state.status.error && (
            <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
              <div className="flex items-center">
                <DynamicIcon
                  name="alert-circle"
                  size={16}
                  className="text-red-600 mr-2"
                />
                <span className="text-red-800 text-sm">
                  –ü–æ–º–∏–ª–∫–∞: {state.status.error}
                </span>
              </div>
            </div>
          )}
        </CardBody>
      </Card>

      {/* –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è */}
      <Card className="bg-gradient-to-r bg-neutral-50">
        <CardHeader className="border-b border-grey-200">
          <DynamicIcon
            name="test-tube"
            size={20}
            className="text-primary mr-2"
          />
          <h2 className="text-lg font-semibold text-primary">
            –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
          </h2>
        </CardHeader>
        <CardBody className="p-6">
          {/* –†–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è */}
          <div className="grid grid-cols-4 gap-6">
            <Button
              onPress={() => {
                console.log("üß™ === –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–£ –í–ê–ì ===");
                console.log("–í–∏–∫–æ–Ω–∞–π—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—ñ: runScaleRealTests()");
                console.log("–î–ª—è —Ç–µ—Å—Ç—É —Å–∫–∞–Ω–µ—Ä–∞: runScannerRealTests()");
                addToast({
                  title: "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
                  description: "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π!",
                  color: "primary",
                });
              }}
              color="primary"
              variant="bordered"
              className="w-full"
            >
              <DynamicIcon name="terminal" size={16} />
              –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            </Button>

            <Button
              onPress={() =>
                window.open("/client/test-serial-com.html", "_blank")
              }
              color="danger"
              variant="solid"
              className="w-full"
            >
              <DynamicIcon name="usb" size={16} />
              –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è COM –ø–æ—Ä—Ç—É
            </Button>

            <Button
              onPress={() => {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≤–∞–≥
                import("../test-scale-real.js")
                  .then(() => {
                    if (
                      typeof (window as any).runScaleRealTests ===
                      "function"
                    ) {
                      (window as any).runScaleRealTests();
                    } else {
                      addToast({
                        title: "–ü–æ–º–∏–ª–∫–∞",
                        description: "–¢–µ—Å—Ç –≤–∞–≥ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–º–∏–ª–æ–∫.",
                        color: "danger",
                      });
                    }
                  })
                  .catch((error) => {
                    console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –≤–∞–≥:", error);
                    addToast({
                      title: "–ü–æ–º–∏–ª–∫–∞",
                      description: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å.",
                      color: "danger",
                    });
                  });
              }}
              color="success"
              className="w-full text-white"
            >
              <DynamicIcon name="scale" size={16} />
              –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç –≤–∞–≥
            </Button>

            <Button
              onPress={() => {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–∫–∞–Ω–µ—Ä–∞
                import("../test-scanner-real.js")
                  .then(() => {
                    if (
                      typeof (window as any).runScannerRealTests ===
                      "function"
                    ) {
                      (window as any).runScannerRealTests();
                    } else {
                      addToast({
                        title: "–ü–æ–º–∏–ª–∫–∞",
                        description: "–¢–µ—Å—Ç —Å–∫–∞–Ω–µ—Ä–∞ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–º–∏–ª–æ–∫.",
                        color: "danger",
                      });
                    }
                  })
                  .catch((error) => {
                    console.error(
                      "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É —Å–∫–∞–Ω–µ—Ä–∞:",
                      error,
                    );
                    addToast({
                      title: "–ü–æ–º–∏–ª–∫–∞",
                      description: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å.",
                      color: "danger",
                    });
                  });
              }}
              color="primary"
              className="w-full"
            >
              <DynamicIcon name="scan" size={16} />
              –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç —Å–∫–∞–Ω–µ—Ä–∞
            </Button>
          </div>
        </CardBody>
      </Card>

      {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó */}
      <Card className="bg-gradient-to-r bg-neutral-50">
        <CardHeader className="border-b border-grey-200">
          <DynamicIcon
            name="settings"
            size={20}
            className="text-primary mr-2"
          />
          <h2 className="text-lg font-semibold text-primary">–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è</h2>
        </CardHeader>
        <CardBody className="p-6">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–≥ */}
            <div className="flex flex-col gap-6">
              <h3 className="font-medium text-gray-400">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–≥</h3>
              <Input
                id="comPort"
                label="COM-–ø–æ—Ä—Ç"
                labelPlacement="outside"
                className="block text-sm font-medium text-gray-700 mb-1"
                value={localConfig.scale?.comPort || "COM4"}
                onChange={(e) =>
                  handleConfigChange("scale", "comPort", e.target.value)
                }
              />
              <Select
                id="baudRate"
                label="–®–≤–∏–¥–∫—ñ—Å—Ç—å (–±—ñ—Ç/—Å)"
                labelPlacement="outside"
                defaultSelectedKeys={[localConfig.scale?.baudRate?.toString() || "9600"]}
                onChange={(e) =>
                  handleConfigChange(
                    "scale",
                    "baudRate",
                    parseInt(e.target.value),
                  )
                }
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                <SelectItem key="9600">9600</SelectItem>
                <SelectItem key="19200">19200</SelectItem>
                <SelectItem key="38400">38400</SelectItem>
                <SelectItem key="57600">57600</SelectItem>
                <SelectItem key="115200">115200</SelectItem>
              </Select>
              <div>
                <Select
                  id="dataBits"
                  label="–ë—ñ—Ç–∏ –¥–∞–Ω–∏—Ö"
                  labelPlacement="outside"
                  defaultSelectedKeys={[localConfig.scale?.dataBits?.toString() || "8"]}
                  onChange={(e) =>
                    handleConfigChange(
                      "scale",
                      "dataBits",
                      parseInt(e.target.value),
                    )
                  }
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  <SelectItem key="7">7</SelectItem>
                  <SelectItem key="8">8</SelectItem>
                </Select>
              </div>
            </div>

            {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∞–Ω–µ—Ä–∞ */}
            <div className="flex flex-col gap-6">
              <h3 className="font-medium text-gray-400">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∞–Ω–µ—Ä–∞</h3>
              <Input
                type="number"
                id="timeout"
                label="–¢–∞–π–º–∞—É—Ç (–º—Å)"
                labelPlacement="outside"
                className="block text-sm font-medium text-gray-700 mb-1"
                value={localConfig.scanner?.timeout?.toString() || "5000"}
                onChange={(e) =>
                  handleConfigChange(
                    "scanner",
                    "timeout",
                    parseInt(e.target.value),
                  )}
              />

              <Switch
                id="autoConnect"
                isSelected={localConfig.scanner?.autoConnect || false}
                onValueChange={(e) =>
                  handleConfigChange(
                    "scanner",
                    "autoConnect",
                    e,
                  )
                }
                color="primary"
                size="sm"
                classNames={{
                  wrapper: "bg-secondary/50",
                  thumbIcon: "bg-white/50",
                }}
              >
                –ê–≤—Ç–æ. –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è</Switch>
            </div>

            {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ—ó */}
            <div className="flex flex-col gap-6">
              <h3 className="font-medium text-gray-400">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ—ó</h3>
              <div className="flex flex-col gap-2">
                <label htmlFor="weightRangeMin" className="text-sm font-medium text-gray-700 -mt-1">–î—ñ–∞–ø–∞–∑–æ–Ω –≤–∞–≥–∏ (–∫–≥)</label>
                <div className="flex gap-2">
                  <Input
                    type="number"
                    step="0.1"
                    id="weightRangeMin"
                    aria-label="–î—ñ–∞–ø–∞–∑–æ–Ω –≤–∞–≥–∏ (–∫–≥)"
                    labelPlacement="outside"
                    className="block text-sm font-medium text-gray-700 mb-1"
                    defaultValue={localConfig.simulation?.weightRange?.min?.toString() || "0.1"}
                    onChange={(e) =>
                      handleConfigChange("simulation", "weightRange.min", parseFloat(e.target.value))
                    }
                    placeholder="–ú—ñ–Ω"
                  />
                  <Input
                    type="number"
                    step="0.1"
                    id="weightRangeMax"
                    aria-label="–î—ñ–∞–ø–∞–∑–æ–Ω –≤–∞–≥–∏"
                    labelPlacement="outside"
                    className="block text-sm font-medium text-gray-700 mb-1"
                    defaultValue={localConfig.simulation?.weightRange?.max?.toString() || "5.0"}
                    onChange={(e) =>
                      handleConfigChange("simulation", "weightRange.max", parseFloat(e.target.value))
                    }
                    placeholder="–ú–∞–∫—Å"
                  />
                </div>
              </div>

              <Input
                type="number"
                id="scanDelay"
                label="–ó–∞—Ç—Ä–∏–º–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è (–º—Å)"
                labelPlacement="outside"
                className="block text-sm font-medium text-gray-700 mb-1"
                defaultValue={localConfig.simulation?.scanDelay?.toString() || "800"}
                onChange={(e) =>
                  handleConfigChange("simulation", "scanDelay", parseInt(e.target.value))
                }
              />
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è */}
          <div className="mt-10 flex justify-end gap-4">
            <Button
              onPress={resetConfig}
              color="secondary"
              variant="bordered"
              size="md"
              disabled={isSaving}
            >
              <DynamicIcon name="refresh-cw" size={16} />
              –°–∫–∏–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            </Button>

            <Button
              onPress={handleApplyConfig}
              color="primary"
              size="md"
              disabled={isSaving}
            >
              <DynamicIcon name="save" size={16} />
              {isSaving ? "–ó–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è..." : "–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"}
            </Button>
          </div>
        </CardBody>
      </Card>

      {/* –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—é */}
      <Card className="bg-gradient-to-r from-orange-50 to-amber-50">
        <CardHeader className="border-b border-orange-200">
          <DynamicIcon
            name="help-circle"
            size={20}
            className="text-orange-800 mr-2"
          />
          <h2 className="text-lg font-semibold text-orange-800">
            –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—é
          </h2>
        </CardHeader>
        <CardBody className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <h3 className="font-medium text-gray-900 mb-3">–í–∞–≥–∏ –í–¢–ê-60</h3>
              <ul className="text-sm text-gray-600 space-y-2">
                <li>‚Ä¢ –ü—ñ–¥–∫–ª—é—á—ñ—Ç—å –≤–∞–≥–∏ –¥–æ –∫–æ–º–ø'—é—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ USB-COM –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä</li>
                <li>‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –¥—Ä–∞–π–≤–µ—Ä CH340 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</li>
                <li>‚Ä¢ –í—ñ–¥–∫—Ä–∏–π—Ç–µ –î–∏—Å–ø–µ—Ç—á–µ—Ä –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ —Ç–∞ –∑–Ω–∞–π–¥—ñ—Ç—å COM-–ø–æ—Ä—Ç</li>
                <li>‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π COM-–ø–æ—Ä—Ç —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö</li>
                <li>‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–æ—é "–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è"</li>
              </ul>
            </div>
            <div>
              <h3 className="font-medium text-gray-900 mb-3">
                –°–∫–∞–Ω–µ—Ä MC-200PT
              </h3>
              <ul className="text-sm text-gray-600 space-y-2">
                <li>‚Ä¢ –ü—ñ–¥–∫–ª—é—á—ñ—Ç—å —Å–∫–∞–Ω–µ—Ä –¥–æ USB-–ø–æ—Ä—Ç—É –∫–æ–º–ø'—é—Ç–µ—Ä–∞</li>
                <li>‚Ä¢ –°–∫–∞–Ω–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç—å—Å—è —è–∫ HID-–ø—Ä–∏—Å—Ç—Ä—ñ–π</li>
                <li>‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–∫–∞–Ω–µ—Ä —É —Ä–µ–∂–∏–º—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏</li>
                <li>‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è–º —à—Ç—Ä–∏—Ö-–∫–æ–¥—É</li>
                <li>‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å–∫–∞–Ω–µ—Ä</li>
              </ul>
            </div>
            <div>
              <h3 className="font-medium text-gray-900 mb-3">
                WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
              </h3>
              <ul className="text-sm text-gray-600 space-y-2">
                <li>
                  ‚Ä¢ –ó–∞–ø—É—Å—Ç—ñ—Ç—å WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞ –∫–æ–º–ø'—é—Ç–µ—Ä—ñ –∑ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è–º
                </li>
                <li>‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É URL –∞–¥—Ä–µ—Å—É —Å–µ—Ä–≤–µ—Ä–∞</li>
                <li>‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –ø–æ—Ä—Ç –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —Ñ–∞–π—Ä–≤–æ–ª–æ–º</li>
                <li>‚Ä¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è</li>
                <li>‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–æ—é "–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è"</li>
              </ul>
            </div>
          </div>
        </CardBody>
      </Card>
    </div>
  );
};

export default SettingsEquipment;
