import { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { shippingClientService } from '../services/ShippingService';
import { formatDate } from '../lib/formatUtils';

interface UseOrderNavigationProps {
  externalId: string | undefined;
  apiCall: (url: string, options?: RequestInit) => Promise<Response>;
  equipmentConfig: any;
}

export function useOrderNavigation({
  externalId,
  apiCall,
  equipmentConfig
}: UseOrderNavigationProps) {
  const navigate = useNavigate();
  
  const [isPrintingTTN, setIsPrintingTTN] = useState(false);
  const [showPrintTTN, setShowPrintTTN] = useState(false);
  const [isLoadingNextOrder, setIsLoadingNextOrder] = useState(false);
  const [showNextOrder, setShowNextOrder] = useState(false);
  const [nextOrderNumber, setNextOrderNumber] = useState<string | undefined>();
  const [nextOrderDate, setNextOrderDate] = useState<string | undefined>();
  const [showNoMoreOrders, setShowNoMoreOrders] = useState(false);

  /**
   * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ä–æ–∑—É–º–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é –ø–æ—à—É–∫—É
   */
  const getNextOrder = useCallback(async () => {
    if (!externalId) return null;

    try {      
      // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å –≤ —Å—Ç–∞—Ç—É—Å—ñ 2 (–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ), –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –¥–∞—Ç–æ—é (–Ω–æ–≤—ñ —Å–ø–æ—á–∞—Ç–∫—É)
      const response = await apiCall('/api/orders?limit=100&sortBy=orderDate&sortOrder=desc&status=2&fields=id,externalId,orderDate,status');
      
      if (!response.ok) {
        console.warn('‚ö†Ô∏è [useOrderNavigation] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å');
        return null;
      }

      const ordersData = await response.json();
      const orders = ordersData.data;
      
      console.log('üîç [useOrderNavigation] –û—Ç—Ä–∏–º–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', orders);
      
      if (orders.length === 0) {
        console.warn('‚ö†Ô∏è [useOrderNavigation] –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É');
        return null;
      }
      
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ–º—É —Å–ø–∏—Å–∫—É
      const currentOrderIndex = orders.findIndex((order: any) => order.externalId === externalId);

      console.log('üîç [useOrderNavigation] –ü–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', currentOrderIndex);
      
      if (currentOrderIndex === -1) {
        console.warn('‚ö†Ô∏è [useOrderNavigation] –ü–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ–º—É —Å–ø–∏—Å–∫—É');
        return null;
      }

      // –†–æ–∑—É–º–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
      // 1. –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞ –¥–∞—Ç–æ—é (–Ω–æ–≤—ñ—à–µ)
      // 2. –Ø–∫—â–æ –Ω–µ–º–∞—î, —à—É–∫–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞ –¥–∞—Ç–æ—é (—Å—Ç–∞—Ä—ñ—à–µ)
      let nextOrder = null;

      // 1. –®—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞ –¥–∞—Ç–æ—é (–Ω–æ–≤—ñ—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)
      if (currentOrderIndex > 0) {
        nextOrder = orders[currentOrderIndex - 1]; // –ù–æ–≤—ñ—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—ñ–Ω–¥–µ–∫—Å –º–µ–Ω—à–∏–π)
      } else {
        // 2. –Ø–∫—â–æ –Ω–µ–º–∞—î –Ω–æ–≤—ñ—à–∏—Ö, —à—É–∫–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞ –¥–∞—Ç–æ—é (—Å—Ç–∞—Ä—ñ—à–µ)
        if (currentOrderIndex < orders.length - 1) {
          nextOrder = orders[currentOrderIndex + 1]; // –°—Ç–∞—Ä—ñ—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—ñ–Ω–¥–µ–∫—Å –±—ñ–ª—å—à–∏–π)
        } else {
          return null;
        }
      }

		  console.log('üîç [useOrderNavigation] –ù–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', nextOrder);
      
      return {
        ...nextOrder,
        formattedDate: nextOrder.orderDate ? formatDate(nextOrder.orderDate) : null
      };
    } catch (error) {
      console.error('‚ùå [useOrderNavigation] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
      return null;
    }
  }, [externalId, apiCall]);

	/**
	 * –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ "id3" (–ì–æ—Ç–æ–≤–µ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏)
	 */
	const updateCurrentOrderStatusToReady = useCallback(async () => {
		if (!externalId) return;
		const statusPayload = { status: 'id3' };
		try {
			const statusResponse = await apiCall(`/api/orders/${externalId}/status`, {
				method: 'PUT',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify(statusPayload),
			});

			if (!statusResponse.ok) {
				const errorText = await statusResponse.text();
				console.warn('‚ö†Ô∏è [useOrderNavigation] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤ SalesDrive:', errorText);
				return;
			}

			const statusData = await statusResponse.json();
			if (statusData.success) {
				if (statusData.salesDriveUpdated) {
					console.log('‚úÖ [useOrderNavigation] –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ SalesDrive –Ω–∞ "id3" (–ì–æ—Ç–æ–≤–µ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è)');
				} else {
					console.warn('‚ö†Ô∏è [useOrderNavigation] –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –≤ SalesDrive');
				}
			} else {
				console.warn('‚ö†Ô∏è [useOrderNavigation] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É:', statusData.error);
			}
		} catch (error) {
			console.error('‚ùå [useOrderNavigation] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
		}
	}, [externalId, apiCall]);

  /**
   * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥—Ä—É–∫—É –¢–¢–ù
   */
  const handlePrintTTN = useCallback(async (order: any) => {
    if (!order?.ttn || !order?.provider) {
      alert('–¢–¢–ù –∞–±–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
      return;
    }

    if (isPrintingTTN) {
      return;
    }

    try {
      setIsPrintingTTN(true);

      // –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ –ø—Ä—è–º–∏–π –¥—Ä—É–∫ —É dev —Ä–µ–∂–∏–º—ñ
      const isDev = typeof process !== "undefined" && process.env.NODE_ENV === 'development';
      const canUseDirectPrint = equipmentConfig?.printer?.enabled && equipmentConfig?.printer?.name && !isDev;

      await shippingClientService.printTTN({
        ttn: order.ttn,
        printerName: canUseDirectPrint ? equipmentConfig.printer.name : undefined
      });

      setTimeout(() => {
        setShowNextOrder(true);
        // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–º–µ—Ä –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        fetchNextOrderNumber();
      }, 1000);

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—Ä—É–∫—É –¢–¢–ù:', error);
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
      alert(`–ü–æ–º–∏–ª–∫–∞ –¥—Ä—É–∫—É –¢–¢–ù: ${errorMessage}`);
    } finally {
      setIsPrintingTTN(false);
    }
  }, [isPrintingTTN, equipmentConfig]);

  /**
   * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   */
	const handleNextOrder = useCallback(async () => {
    if (!externalId || isLoadingNextOrder) {
      return;
    }

    try {
      setIsLoadingNextOrder(true);

      // 1. –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      const nextOrder = await getNextOrder();
      
      if (!nextOrder) {
        // –Ø–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –Ω–µ–º–∞—î ‚Äî –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ —è–∫ –≥–æ—Ç–æ–≤–µ —ñ –ø–æ–∫–∞–∑—É—î–º–æ –±–∞–Ω–µ—Ä
        setShowNoMoreOrders(true);
        throw new Error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 2 (–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ)');
        return;
      }

			// 2. –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ "id3" (–ì–æ—Ç–æ–≤–µ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏)
			await updateCurrentOrderStatusToReady();

      // 3. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
      const nextOrderUrl = `/orders/${nextOrder.externalId}`;
      navigate(nextOrderUrl);

      // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      setShowNextOrder(false);
      setNextOrderNumber(undefined);
      setNextOrderDate(undefined);
      setShowNoMoreOrders(false);

    } catch (error) {
      console.error('‚ùå [useOrderNavigation] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
      alert(`–ü–æ–º–∏–ª–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`);
    } finally {
      setIsLoadingNextOrder(false);
    }
  }, [externalId, isLoadingNextOrder, navigate, getNextOrder, apiCall]);

  /**
   * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
   */
	const fetchNextOrderNumber = useCallback(async () => {
    const nextOrder = await getNextOrder();
    if (nextOrder) {
      setNextOrderNumber(nextOrder.externalId);
      setNextOrderDate(nextOrder.formattedDate);
      setShowNoMoreOrders(false);
    } else {
      setShowNoMoreOrders(true);
      await updateCurrentOrderStatusToReady();
    }
	}, [getNextOrder, updateCurrentOrderStatusToReady]);

  return {
    isPrintingTTN,
    showPrintTTN,
    setShowPrintTTN,
    isLoadingNextOrder,
    showNextOrder,
    nextOrderNumber,
    nextOrderDate,
    showNoMoreOrders,
    handlePrintTTN,
    handleNextOrder,
    fetchNextOrderNumber,
    getNextOrder
  };
}

