import React, { useState, useEffect, useCallback, useRef } from 'react';

interface ScannedCode {
  code: string;
  timestamp: string;
  type: string;
}

const TestSerialCom: React.FC = () => {
  // –°—Ç–∞–Ω–∏ –¥–ª—è Web Serial API
  const [apiSupport, setApiSupport] = useState<string>('–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ...');
  const [apiSupportClass, setApiSupportClass] = useState<'info' | 'success' | 'error'>('info');

  // –°—Ç–∞–Ω–∏ –¥–ª—è –≤–∞–≥
  const [scaleConnected, setScaleConnected] = useState(false);
  const [scaleResult, setScaleResult] = useState('');
  const [scaleResultClass, setScaleResultClass] = useState<'info' | 'success' | 'error'>('info');
  const [baudRate, setBaudRate] = useState(9600);
  const [dataBits, setDataBits] = useState(8);
  const [parity, setParity] = useState<'none' | 'even' | 'odd'>('none');

  // –°—Ç–∞–Ω–∏ –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞
  const [scannerActive, setScannerActive] = useState(false);
  const [scannerResult, setScannerResult] = useState('');
  const [scannerResultClass, setScannerResultClass] = useState<'info' | 'success' | 'error'>('info');
  const [scannedCodes, setScannedCodes] = useState<ScannedCode[]>([]);

  // Refs –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Serial API
  const portRef = useRef<SerialPort | null>(null);
  const readerRef = useRef<ReadableStreamDefaultReader | null>(null);
  const scanBufferRef = useRef('');
  const lastScanTimeRef = useRef(0);
  const SCAN_TIMEOUT = 100;

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Web Serial API
  const checkSerialSupport = useCallback(() => {
    if ('serial' in navigator) {
      setApiSupport('‚úÖ Web Serial API –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è!');
      setApiSupportClass('success');
    } else {
      setApiSupport('‚ùå Web Serial API –ù–ï –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è!');
      setApiSupportClass('error');
    }
  }, []);

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≤–∞–≥
  const connectToScale = async () => {
    setScaleResult('üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≤–∞–≥...');
    setScaleResultClass('info');

    try {
      if (!('serial' in navigator)) {
        throw new Error('Web Serial API –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è');
      }

      const port = await (navigator as any).serial.requestPort();
      portRef.current = port;

      // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ä—Ç
      await port.open({
        baudRate,
        dataBits,
        stopBits: 1,
        parity,
        bufferSize: 1024
      });

      setScaleResult(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –≤–∞–≥!\n\n–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n- –®–≤–∏–¥–∫—ñ—Å—Ç—å: ${baudRate} –±–æ–¥\n- –ë—ñ—Ç–∏ –¥–∞–Ω–∏—Ö: ${dataBits}\n- –ü–∞—Ä–Ω—ñ—Å—Ç—å: ${parity}\n\n–¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∑—á–∏—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –≤–∞–≥.`);
      setScaleResultClass('success');
      setScaleConnected(true);

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
      startReadingScale();

    } catch (error: any) {
      setScaleResult(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${error.message}\n\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\n- –ß–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –≤–∞–≥–∏\n- –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π COM –ø–æ—Ä—Ç\n- –ß–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –¥—Ä–∞–π–≤–µ—Ä–∏`);
      setScaleResultClass('error');
    }
  };

  // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ –≤–∞–≥
  const disconnectFromScale = async () => {
    try {
      if (readerRef.current) {
        await readerRef.current.cancel();
        readerRef.current = null;
      }

      if (portRef.current) {
        await portRef.current.close();
        portRef.current = null;
      }

      setScaleResult('üîå –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ –≤–∞–≥');
      setScaleResultClass('info');
      setScaleConnected(false);

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error);
    }
  };

  // –ó–∞–ø—É—Å–∫ —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –≤–∞–≥
  const startReadingScale = async () => {
    if (!portRef.current?.readable) return;

    try {
      const textDecoder = new TextDecoder();
      readerRef.current = portRef.current.readable.getReader();

      let buffer = '';

      while (portRef.current.readable) {
        try {
          const { value, done } = await readerRef.current.read();

          if (done) break;

          if (value) {
            const chunk = textDecoder.decode(value, { stream: true });
            buffer += chunk;

            // –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            const lines = buffer.split('\r\n');
            buffer = lines.pop() || '';

            for (const line of lines) {
              if (line.trim()) {
                processWeightData(line.trim());
              }
            }
          }
        } catch (error) {
          console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è:', error);
          break;
        }
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —á–∏—Ç–∞–Ω–Ω—è:', error);
    }
  };

  // –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –∑ –≤–∞–≥
  const processWeightData = (data: string) => {
    const weightMatch = data.match(/([+-]?\d+\.?\d*)/);

    if (weightMatch) {
      const weight = parseFloat(weightMatch[1]);
      const timestamp = new Date().toLocaleTimeString();

      setScaleResult(`üìä –î–ê–ù–Ü –ó –í–ê–ì:\n\n–í–∞–≥–∞: ${weight} –∫–≥\n–ß–∞—Å: ${timestamp}\n–°–∏—Ä—ñ –¥–∞–Ω—ñ: ${data}`);
      setScaleResultClass('success');
    } else {
      console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ:', data);
    }
  };

  // –ó–∞–ø–∏—Ç –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∞–≥–∏
  const readWeight = async () => {
    if (!portRef.current?.writable) {
      alert('–°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–∫–ª—é—á—ñ—Ç—å—Å—è –¥–æ –≤–∞–≥');
      return;
    }

    try {
      const writer = portRef.current.writable.getWriter();

      const command = new TextEncoder().encode('W\r\n');
      await writer.write(command);

      writer.releaseLock();

      console.log('–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Ç—É –≤–∞–≥–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏:', error);
    }
  };

  // –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É —Å–∫–∞–Ω–µ—Ä–∞
  const startScannerTest = () => {
    setScannerResult('üîÑ –¢–µ—Å—Ç —Å–∫–∞–Ω–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–æ...\n\n–°–∫–∞–Ω–µ—Ä –ø—Ä–∞—Ü—é—î –≤ —Ä–µ–∂–∏–º—ñ –µ–º—É–ª—è—Ü—ñ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.\n–ü—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—Ç–µ –∫—É—Ä—Å–æ—Ä —Å—é–¥–∏ —ñ —Å–∫–∞–Ω—É–π—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥.');
    setScannerResultClass('info');
    setScannerActive(true);
    scanBufferRef.current = '';
  };

  // –ó—É–ø–∏–Ω–∫–∞ —Ç–µ—Å—Ç—É —Å–∫–∞–Ω–µ—Ä–∞
  const stopScannerTest = () => {
    setScannerActive(false);
    setScannerResult('‚èπÔ∏è –¢–µ—Å—Ç —Å–∫–∞–Ω–µ—Ä–∞ –∑—É–ø–∏–Ω–µ–Ω–æ');
    setScannerResultClass('info');
  };

  // –û–±—Ä–æ–±–∫–∞ –≤–≤–æ–¥—É –∑—ñ —Å–∫–∞–Ω–µ—Ä–∞
  const handleScannerInput = useCallback((event: KeyboardEvent) => {
    if (!scannerActive) return;

    const currentTime = Date.now();

    if (currentTime - lastScanTimeRef.current < SCAN_TIMEOUT) {
      if (event.key === 'Enter') {
        processScannedCode();
      } else if (event.key.length === 1) {
        scanBufferRef.current += event.key;
      }
    } else {
      scanBufferRef.current = '';
      if (event.key.length === 1) {
        scanBufferRef.current += event.key;
      }
    }

    lastScanTimeRef.current = currentTime;
  }, [scannerActive]);

  // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω–æ–≥–æ –∫–æ–¥—É
  const processScannedCode = () => {
    if (!scanBufferRef.current.trim()) return;

    const code = scanBufferRef.current.trim();
    const timestamp = new Date().toLocaleTimeString();
    const type = detectBarcodeType(code);

    const newCode: ScannedCode = { code, timestamp, type };
    setScannedCodes(prev => [newCode, ...prev]);

    setScannerResult(`‚úÖ –ö–û–î –í–Ü–î–°–ö–ê–ù–û–í–ê–ù–ò–ô!\n\n–ö–æ–¥: ${code}\n–¢–∏–ø: ${type}\n–ß–∞—Å: ${timestamp}\n\n–ó–∞–≥–∞–ª—å–Ω–∏—Ö —Å–∫–∞–Ω—É–≤–∞–Ω—å: ${scannedCodes.length + 1}`);
    setScannerResultClass('success');

    scanBufferRef.current = '';
  };


  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É —à—Ç—Ä–∏—Ö-–∫–æ–¥—É
  const detectBarcodeType = (code: string): string => {
    if (/^\d{13}$/.test(code)) return 'EAN-13';
    if (/^\d{8}$/.test(code)) return 'EAN-8';
    if (/^\d{12}$/.test(code)) return 'UPC-A';
    if (/^[A-Z0-9]+$/.test(code)) return 'Code-128';
    if (/^[A-Z0-9\-\.\/\+\s]+$/.test(code)) return 'Code-39';
    return 'Unknown';
  };

  // –ï—Ñ–µ–∫—Ç–∏
  useEffect(() => {
    checkSerialSupport();
  }, [checkSerialSupport]);

  useEffect(() => {
    if (scannerActive) {
      document.addEventListener('keydown', handleScannerInput);
      return () => document.removeEventListener('keydown', handleScannerInput);
    }
  }, [scannerActive, handleScannerInput]);


  return (
    <div className="max-w-4xl">

      <div className="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-6">
        <strong>‚ö†Ô∏è –£–≤–∞–≥–∞:</strong> –¶–µ–π —Ç–µ—Å—Ç –ø–æ—Ç—Ä–µ–±—É—î —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è (–≤–∞–≥–∏ –í–¢–ê-60, —Å–∫–∞–Ω–µ—Ä MC-200PT) —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Web Serial API.
        –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–µ —Ç–∞ –±—Ä–∞—É–∑–µ—Ä –ø—ñ–¥—Ç—Ä–∏–º—É—î Web Serial API (Chrome/Edge 89+).
        <br />
        <strong>üîß –ë–ª–æ–∫ "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è":</strong> –¥–æ–∑–≤–æ–ª—è—î –ø—ñ–¥–∫–ª—é—á–∞—Ç–∏—Å—è –¥–æ –±—É–¥—å-—è–∫–æ–≥–æ Serial Port —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ –¥–∞–Ω—ñ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ.
      </div>

      {/* –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Web Serial API */}
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <h2 className="text-2xl font-semibold mb-4">üåê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Web Serial API</h2>
        <div className={`mt-4 p-4 rounded font-mono whitespace-pre-wrap max-h-60 overflow-y-auto ${
          apiSupportClass === 'success' ? 'bg-green-100 border border-green-300 text-green-800' :
          apiSupportClass === 'error' ? 'bg-red-100 border border-red-300 text-red-800' :
          'bg-blue-100 border border-blue-300 text-blue-800'
        }`}>
          {apiSupport}
        </div>
        <button
          onClick={checkSerialSupport}
          className="mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded transition-colors"
        >
          –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É
        </button>
      </div>

      {/* –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–≥ */}
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <h2 className="text-2xl font-semibold mb-4">‚öñÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–≥ –í–¢–ê-60</h2>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <div>
            <label className="block font-medium mb-2">–®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á—ñ (–±–æ–¥):</label>
            <select
              value={baudRate}
              onChange={(e) => setBaudRate(Number(e.target.value))}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value={9600}>9600</option>
              <option value={19200}>19200</option>
              <option value={38400}>38400</option>
              <option value={57600}>57600</option>
              <option value={115200}>115200</option>
            </select>
          </div>

          <div>
            <label className="block font-medium mb-2">–ë—ñ—Ç–∏ –¥–∞–Ω–∏—Ö:</label>
            <select
              value={dataBits}
              onChange={(e) => setDataBits(Number(e.target.value))}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value={7}>7</option>
              <option value={8}>8</option>
            </select>
          </div>

          <div>
            <label className="block font-medium mb-2">–ü–∞—Ä–Ω—ñ—Å—Ç—å:</label>
            <select
              value={parity}
              onChange={(e) => setParity(e.target.value as 'none' | 'even' | 'odd')}
              className="w-full p-2 border border-gray-300 rounded"
            >
              <option value="none">–ù–µ–º–∞—î</option>
              <option value="even">–ü–∞—Ä–Ω–∞</option>
              <option value="odd">–ù–µ–ø–∞—Ä–Ω–∞</option>
            </select>
          </div>
        </div>

        <div className="border border-gray-200 rounded p-4">
          <div className="flex flex-wrap gap-2 mb-4">
            <button
              onClick={connectToScale}
              disabled={scaleConnected}
              className="bg-blue-500 hover:bg-blue-600 disabled:bg-gray-400 text-white px-4 py-2 rounded transition-colors"
            >
              –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –≤–∞–≥
            </button>
            <button
              onClick={disconnectFromScale}
              disabled={!scaleConnected}
              className="bg-red-500 hover:bg-red-600 disabled:bg-gray-400 text-white px-4 py-2 rounded transition-colors"
            >
              –í—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è
            </button>
            <button
              onClick={readWeight}
              disabled={!scaleConnected}
              className="bg-green-500 hover:bg-green-600 disabled:bg-gray-400 text-white px-4 py-2 rounded transition-colors"
            >
              –ó—á–∏—Ç–∞—Ç–∏ –≤–∞–≥—É
            </button>
          </div>

          {scaleResult && (
            <div className={`p-4 rounded font-mono whitespace-pre-wrap max-h-60 overflow-y-auto ${
              scaleResultClass === 'success' ? 'bg-green-100 border border-green-300 text-green-800' :
              scaleResultClass === 'error' ? 'bg-red-100 border border-red-300 text-red-800' :
              'bg-blue-100 border border-blue-300 text-blue-800'
            }`}>
              {scaleResult}
            </div>
          )}
        </div>
      </div>


      {/* –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∞–Ω–µ—Ä–∞ */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h2 className="text-2xl font-semibold mb-4">üì∑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∞–Ω–µ—Ä–∞ MC-200PT</h2>

        <div className="border border-gray-200 rounded p-4">
          <div className="flex gap-2 mb-4">
            <button
              onClick={startScannerTest}
              disabled={scannerActive}
              className="bg-blue-500 hover:bg-blue-600 disabled:bg-gray-400 text-white px-4 py-2 rounded transition-colors"
            >
              –ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç —Å–∫–∞–Ω–µ—Ä–∞
            </button>
            <button
              onClick={stopScannerTest}
              disabled={!scannerActive}
              className="bg-red-500 hover:bg-red-600 disabled:bg-gray-400 text-white px-4 py-2 rounded transition-colors"
            >
              –ó—É–ø–∏–Ω–∏—Ç–∏ —Ç–µ—Å—Ç
            </button>
          </div>

          {scannerResult && (
            <div className={`mb-4 p-4 rounded font-mono whitespace-pre-wrap max-h-40 overflow-y-auto ${
              scannerResultClass === 'success' ? 'bg-green-100 border border-green-300 text-green-800' :
              scannerResultClass === 'error' ? 'bg-red-100 border border-red-300 text-red-800' :
              'bg-blue-100 border border-blue-300 text-blue-800'
            }`}>
              {scannerResult}
            </div>
          )}

          <div className="mt-4">
            <h4 className="font-semibold mb-2">–í—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω—ñ –∫–æ–¥–∏:</h4>
            <ul className="space-y-1 max-h-40 overflow-y-auto">
              {scannedCodes.map((item, index) => (
                <li key={index} className="bg-gray-50 p-2 rounded">
                  <strong>{item.code}</strong> - {item.timestamp} ({item.type})
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TestSerialCom;
