import React, { useState, useEffect, useCallback } from 'react';
import { useEquipmentFromAuth } from '../contexts/AuthContext';
import { cn } from '../lib/utils';

interface ScaleWeightDisplayProps {
  currentScaleWeight: number; // –û–∂–∏–¥–∞–µ–º—ã–π –≤–µ—Å –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ
  totalOrderWeight: number; // –û–±—â–∏–π –≤–µ—Å –≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–∞ (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)
  className?: string;
}

interface WeightHistory {
  weight: number;
  timestamp: Date;
  isStable: boolean;
  rawMessage?: string;
}

export const ScaleWeightDisplay: React.FC<ScaleWeightDisplayProps> = ({
  currentScaleWeight,
  totalOrderWeight,
  className = ''
}) => {
  const [equipmentState, equipmentActions] = useEquipmentFromAuth();
  const [isConnectingScale, setIsConnectingScale] = useState(false);

  const realWeight = equipmentState.currentWeight?.weight || 0;
  const isStable = equipmentState.currentWeight?.isStable || false;
  const isConnected = equipmentState.isScaleConnected; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ —Å—Ç–∞—Ç—É—Å –≤–µ—Å–æ–≤

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∏—Å–ª–∞ –∏–∑ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const parseLastWeightFromRaw = useCallback(() => {
    if (!equipmentState.lastRawScaleData) return null;

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ Uint8Array
    const rawDataStr = typeof equipmentState.lastRawScaleData === 'string'
      ? equipmentState.lastRawScaleData
      : Array.from(equipmentState.lastRawScaleData)
          .map(b => b.toString(16).padStart(2, '0').toUpperCase())
          .join(' ');

    // –ò—â–µ–º —á–∏—Å–ª–æ —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 1.234 –∏–ª–∏ 1,234)
    const weightMatch = rawDataStr.match(/[\d]+[.,][\d]+/);
    if (weightMatch) {
      const weightStr = weightMatch[0].replace(',', '.');
      const weight = parseFloat(weightStr);
      return !isNaN(weight) && weight >= 0 ? weight : null;
    }
    return null;
  }, [equipmentState.lastRawScaleData]);

  const rawWeight = parseLastWeightFromRaw();

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤–µ—Å–∞ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏)
  useEffect(() => {
    if (equipmentState.currentWeight) {
      console.log('üìä ScaleWeightDisplay: Weight updated:', {
        weight: equipmentState.currentWeight.weight,
        isStable: equipmentState.currentWeight.isStable,
        timestamp: equipmentState.currentWeight.timestamp
      });
    }
  }, [equipmentState.currentWeight]);

  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π health check —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–æ–≤ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
  useEffect(() => {
    const healthCheck = () => {
      if (process.env.NODE_ENV === 'development') {
        console.log('üè• ScaleWeightDisplay: Connection status:', isConnected);
      }
    };

    const interval = setInterval(healthCheck, 30000); // 30 —Å–µ–∫
    return () => clearInterval(interval);
  }, [isConnected]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ—Å–∞–º
  const handleManualScaleConnect = async () => {
    if (equipmentState.isSimulationMode) {
      console.log('‚ö†Ô∏è ScaleWeightDisplay: Cannot connect in simulation mode');
      return;
    }

    setIsConnectingScale(true);
    try {
      console.log('üîß ScaleWeightDisplay: Manual scale connection attempt...');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä –ø–æ—Ä—Ç–∞ (autoConnect=false)
      const ScaleServiceClass = (await import('../services/ScaleService')).default;
      const scaleInstance = new ScaleServiceClass();
      const connected = await scaleInstance.connect(false);
      if (connected) {
        console.log('‚úÖ ScaleWeightDisplay: Scale connected successfully');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ actions
        equipmentActions.refreshConfig();
      } else {
        console.log('‚ùå ScaleWeightDisplay: Failed to connect scale');
      }
    } catch (error) {
      console.log('‚ùå ScaleWeightDisplay: Error connecting scale:', error);
    } finally {
      setIsConnectingScale(false);
    }
  };


  return (
    <div className={cn("w-full bg-white p-4 rounded-lg shadow-sm border", className)}>
      <div className="space-y-3">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-start justify-between">
          <span className="text-sm font-medium text-gray-700">–ü–æ—Ç–æ—á–Ω–∞ –≤–∞–≥–∞</span>
          <div className="flex items-center gap-2">
            <div className={cn(
              "w-2 h-2 rounded-full",
              isConnected ? "bg-green-500" : "bg-red-500"
            )} />
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling */}
            {equipmentState.isActivePolling && (
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 rounded-full bg-blue-500 animate-pulse" />
                <span className="text-xs text-blue-600">–ê–∫—Ç–∏–≤–Ω–∏–π</span>
              </div>
            )}
            {!isConnected && !equipmentState.isSimulationMode && (
              <button
                onClick={handleManualScaleConnect}
                disabled={isConnectingScale}
                className={cn(
                  "px-2 py-1 text-xs rounded-md transition-colors",
                  !isConnectingScale
                    ? "bg-red-100 text-red-700 hover:bg-red-200"
                    : "bg-gray-100 text-gray-400 cursor-not-allowed"
                )}
              >
                {isConnectingScale ? '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...' : '–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏'}
              </button>
            )}
          </div>
        </div>

        {/* –¢–µ–∫—É—â–∏–π –≤–µ—Å */}
        <div className="text-center">
          <div className="text-3xl font-bold text-gray-900">
            {isConnected && rawWeight !== null ? `${rawWeight.toFixed(3)} –∫–≥` : '--.--- –∫–≥'}
          </div>
          <div className="text-sm text-gray-500 mt-1">
            {isConnected ? '–ü–æ—Ç–æ—á–Ω–∞ –≤–∞–≥–∞' : '–í–∞–≥–∏ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ'}
          </div>
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ */}
          {isConnected && (
            <div className="flex justify-center items-center mt-2">
              <div className={cn(
                "w-2 h-2 rounded-full mr-2",
                isStable ? "bg-green-500" : "bg-yellow-500"
              )} />
              <span className="text-xs text-gray-600">
                {isStable ? '–°—Ç–∞–±—ñ–ª—å–Ω–æ' : '–ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω–æ'}
              </span>
            </div>
          )}
        </div>


        {/* –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ) */}
        {process.env.NODE_ENV === 'development' && isConnected && (
          <div className="mt-3 p-2 bg-gray-50 rounded text-xs border-t">
            <div className="text-gray-600 space-y-1">
              <div>Raw: {equipmentState.lastRawScaleData || '‚Äì'}</div>
              <div>Parsed: {rawWeight !== null ? `${rawWeight.toFixed(3)} –∫–≥` : '‚Äì'}</div>
              <div>Updated: {equipmentState.currentWeight?.timestamp?.toLocaleTimeString() || '‚Äì'}</div>
              <div className="flex justify-between items-center">
                <span>Polling:</span>
                <span className={cn(
                  "px-2 py-1 rounded text-xs",
                  equipmentState.isActivePolling 
                    ? "bg-blue-100 text-blue-700" 
                    : equipmentState.isReservePolling 
                    ? "bg-green-100 text-green-700" 
                    : "bg-gray-100 text-gray-500"
                )}>
                  {equipmentState.isActivePolling ? 'Active (500ms)' : 
                   equipmentState.isReservePolling ? 'Reserve (5s)' : 
                   'Stopped'}
                </span>
              </div>
            </div>
          </div>
        )}

        {/* –û–∂–∏–¥–∞–µ–º—ã–π –≤–µ—Å –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ) */}
        {currentScaleWeight > 0 && (
          <div className="pt-3 border-t border-gray-100">
            <div className="flex justify-between items-center text-sm text-gray-700 mb-2">
              <span>–û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∞–≥–∞:</span>
              <span className="font-medium">{currentScaleWeight.toFixed(2)} –∫–≥</span>
            </div>
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–Ω–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–µ—Å—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã) */}
            {isConnected && rawWeight !== null && (
              <div className="text-center">
                <span className={cn(
                  "text-sm px-3 py-1 rounded-full font-medium",
                  Math.abs(rawWeight - currentScaleWeight) < 0.05
                    ? "bg-green-100 text-green-800"
                    : Math.abs(rawWeight - currentScaleWeight) < 0.2
                    ? "bg-yellow-100 text-yellow-800"
                    : "bg-red-100 text-red-800"
                )}>
                  –†—ñ–∑–Ω–∏—Ü—è: {(() => {
                    const difference = rawWeight - currentScaleWeight;
                    return (difference > 0 ? '+' : '') + difference.toFixed(3);
                  })()} –∫–≥
                </span>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};
