import { ScaleData } from './EquipmentService';

// –¢–∏–ø—ã –¥–ª—è Web Serial API (–µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º)
declare global {
  interface Navigator {
    serial?: {
      requestPort(options?: { filters?: Array<{ usbVendorId?: number; usbProductId?: number }> }): Promise<SerialPort>;
      getPorts(): Promise<SerialPort[]>;
    };
  }

  interface SerialPort {
    open(options: SerialOptions): Promise<void>;
    close(): Promise<void>;
    readable: ReadableStream<Uint8Array> | null;
    writable: WritableStream<Uint8Array> | null;
  }

  interface SerialOptions {
    baudRate: number;
    dataBits?: number;
    stopBits?: number;
    parity?: string;
    bufferSize?: number;
  }
}

export interface ScaleConnectionConfig {
  baudRate: number;
  dataBits: number;
  stopBits: number;
  parity: 'none' | 'even' | 'odd';
}

export interface VTAScaleData extends ScaleData {
  price?: number;
  total?: number;
  rawData?: Uint8Array;
}

export class ScaleService {
  private port: SerialPort | null = null;
  private isConnected: boolean = false;
  private config: ScaleConnectionConfig;
  private onWeightChange: ((data: VTAScaleData) => void) | null = null;
  private onRawData: ((data: Uint8Array) => void) | null = null;

  constructor() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –í–¢–ê-60: 4800-8E1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.config = {
      baudRate: 4800,
      dataBits: 8,
      stopBits: 1,
      parity: 'even'
    };
  }

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≤–∞–≥ —á–µ—Ä–µ–∑ Web Serial API
  public async connect(autoConnect: boolean = false): Promise<boolean> {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É Web Serial API
      if (!('serial' in navigator)) {
        console.log('‚ö†Ô∏è ScaleService: Web Serial API –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–∂–µ
      if (this.isConnected && this.port) {
        console.log('üîß ScaleService: –í–∞–≥–∏ –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ');
        return true;
      }

      console.log('üîß ScaleService: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ COM –ø–æ—Ä—Ç—É...');

      // –ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç
      if (autoConnect) {
        try {
          const ports = await navigator.serial.getPorts();
          console.log('üîß ScaleService: –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤:', ports.length);

          if (ports.length > 0) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ—Ä—Ç
            this.port = ports[0];
            console.log('üîß ScaleService: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç');
          } else {
            console.log('‚ö†Ô∏è ScaleService: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä');
            return false;
          }
        } catch (error) {
          console.log('‚ö†Ô∏è ScaleService: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã:', error);
          return false;
        }
      } else {
        // –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –ø–æ—Ä—Ç–∞
        this.port = await navigator.serial.requestPort({
          filters: [
            { usbVendorId: 0x1a86, usbProductId: 0x7523 }, // CH340
            { usbVendorId: 0x067b, usbProductId: 0x2303 }, // Prolific
            { usbVendorId: 0x0403, usbProductId: 0x6001 }  // FTDI
          ]
        });
      }

      console.log(`üîß ScaleService: –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ä—Ç –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –í–¢–ê-60 (${this.config.baudRate}-${this.config.dataBits}${this.config.parity.charAt(0).toUpperCase()}${this.config.stopBits})`);

      // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ä—Ç –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –¥–ª—è –í–¢–ê-60
      await this.port.open({
        baudRate: this.config.baudRate,
        dataBits: this.config.dataBits,
        stopBits: this.config.stopBits,
        parity: this.config.parity,
        bufferSize: 1024
      });

      this.isConnected = true;
      console.log('‚úÖ ScaleService: –í–∞–≥–∏ –í–¢–ê-60 —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ');

      return true;
    } catch (error) {
      console.log('‚ùå ScaleService: –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≤–∞–≥–∏:', error);
      this.isConnected = false;
      return false;
    }
  }

  // –ü–æ–º–æ—â–Ω–∏–∫: —Å–±–æ—Ä–∫–∞ —á–∏—Å–ª–∞ –∏–∑ 6 ¬´—Ü–∏—Ñ—Ä–æ–±–∞–π—Ç—ñ–≤¬ª 0x00..0x09, –º–ª–∞–¥—à–∏–µ —Ä–∞–∑—Ä—è–¥—ã –ø–µ—Ä–≤—ã–º–∏
  private digits6ToNumber(bytes6: Uint8Array): number {
    // bytes6: [m1,m2,m3,m4,m5,m6] –≥–¥–µ m1 ‚Äî –º–ª–∞–¥—à–∏–π —Ä–∞–∑—Ä—è–¥ [2]
    let str = '';
    for (let i = 5; i >= 0; i--) { // —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ä–∞–∑—Ä—è–¥–æ–≤: m6..m1
      const d = bytes6[i] & 0x0F;
      if (d > 9) return NaN; // –∑–∞—â–∏—Ç–∞ –æ—Ç –º—É—Å–æ—Ä–∞
      str += d.toString();
    }
    // –£–¥–∞–ª–∏–º –ª–∏–¥–∏—Ä—É—é—â–∏–µ –Ω—É–ª–∏, –Ω–æ –æ—Å—Ç–∞–≤–∏–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω
    str = str.replace(/^0+(?!$)/, '');
    return Number(str);
  }

  // –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è –º–∞—Å—Å—ã (–í–¢–ê-60 –æ–±—ã—á–Ω–æ 3 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫–≥)
  private formatMassFromDigits(bytes6: Uint8Array, decimals: number = 3): number {
    const raw = this.digits6ToNumber(bytes6); // –Ω–∞–ø—Ä–∏–º–µ—Ä 1234
    const factor = Math.pow(10, decimals);
    return raw / factor; // –∫–≥
  }

  // –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è —Ü–µ–Ω—ã
  private formatPriceFromDigits(bytes6: Uint8Array, decimals: number = 2): number {
    const raw = this.digits6ToNumber(bytes6);
    return raw / Math.pow(10, decimals); // –≤–∞–ª—é—Ç–∞ –∑–∞ –∫–≥
  }

  // –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è —Å—É–º–º—ã
  private formatTotalFromDigits(bytes6: Uint8Array, decimals: number = 2): number {
    const raw = this.digits6ToNumber(bytes6);
    return raw / Math.pow(10, decimals);
  }

  // –ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (18 –±–∞–π—Ç) –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –í–¢–ê-60
  private async readOneFrame(timeoutMs: number = 1000): Promise<Uint8Array | null> {
    if (!this.port || !this.isConnected) return null;

    const reader = this.port.readable?.getReader();
    if (!reader) return null;

    try {
      const start = performance.now();
      const buf: number[] = [];

      while (performance.now() - start < timeoutMs) {
        const { value, done } = await reader.read();
        if (done) break;
        if (value) {
          for (const b of value) buf.push(b);
          // –ò—â–µ–º –º–∏–Ω–∏–º—É–º 18 –±–∞–π—Ç –ø–æ–¥—Ä—è–¥ ‚Äî –≤ —ç—Ç–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–µ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞, –ø—Ä–æ—Å—Ç–æ 18 ¬´—Ü–∏—Ñ—Ä–æ–±–∞–π—Ç—ñ–≤¬ª
          while (buf.length >= 18) {
            const frame = buf.splice(0, 18); // –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–µ 18
            return new Uint8Array(frame);
          }
        }
      }
      return null; // —Ç–∞–π–º-–∞—É—Ç
    } finally {
      reader.releaseLock();
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ¬´00 00 03¬ª –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –í–¢–ê-60
  private async sendPoll(): Promise<void> {
    if (!this.port || !this.isConnected) {
      throw new Error('Scale is not connected');
    }

    try {
      const writer = this.port.writable?.getWriter();
      if (!writer) throw new Error('Failed to get writer');

      await writer.write(new Uint8Array([0x00, 0x00, 0x03]));
      writer.releaseLock();
    } catch (error) {
      console.error('Error sending poll to scale:', error);
      throw error;
    }
  }

  // –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –æ–ø—Ä–æ—Å –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–¥–∞—á–∏, –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–¥—Ä–∞
  public async readScaleOnce(usePolling: boolean = true): Promise<VTAScaleData | null> {
    if (!this.isConnected) return null;

    try {
      if (usePolling) {
        await this.sendPoll(); // –∑–∞–ø—Ä–æ—Å ¬´–º–∞—Å—Å–∞/—Ü–µ–Ω–∞/—Å—É–º–º–∞¬ª
      }

      const frame = await this.readOneFrame(1500);
      if (!frame) throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ (—Ç–∞–π–º-–∞—É—Ç –∏–ª–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–∞—Å—Å–∞)');

      // m1..m6 c1..c6 v1..v6 (–º–ª–∞–¥—à–∏–µ —Å–Ω–∞—á–∞–ª–∞)
      const m = frame.slice(0, 6);
      const c = frame.slice(6, 12);
      const v = frame.slice(12, 18);

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ decimals –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Å–æ–≤)
      const massKg = this.formatMassFromDigits(m, 3);    // –∫–≥, —Ç—Ä–∏ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
      const price = this.formatPriceFromDigits(c, 2);    // –≤–∞–ª—é—Ç–∞/–∫–≥
      const total = this.formatTotalFromDigits(v, 2);    // –≤–∞–ª—é—Ç–∞

      const scaleData: VTAScaleData = {
        weight: massKg,
        unit: 'kg',
        isStable: true, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ 0
        timestamp: new Date(),
        price: price,
        total: total,
        rawData: frame
      };

      return scaleData;
    } catch (error) {
      console.error('‚ùå Error reading scale data:', error);
      return null;
    }
  }

  // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ –≤–∞–≥
  public async disconnect(): Promise<void> {
    try {
      if (this.port) {
        await this.port.close();
        this.port = null;
      }

      this.isConnected = false;
      console.log('Scale disconnected');
    } catch (error) {
      console.error('Error disconnecting scale:', error);
    }
  }


  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è callback –¥–ª—è –∑–º—ñ–Ω–∏ –≤–∞–≥–∏
  public onWeightData(callback: (data: VTAScaleData) => void): void {
    this.onWeightChange = callback;
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è callback –¥–ª—è —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö
  public onRawDataReceived(callback: (data: Uint8Array) => void): void {
    this.onRawData = callback;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∞–≥–∏
  public async getCurrentWeight(): Promise<VTAScaleData | null> {
    if (!this.isConnected) {
      console.log('‚ö†Ô∏è ScaleService: –í–∞–≥–∏ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ');
      return null;
    }

    console.log('üîß ScaleService: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ—Å–æ–≤...');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
    return await this.readScaleOnce(true);
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
  public isScaleConnected(): boolean {
    return this.isConnected;
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  public updateConfig(newConfig: Partial<ScaleConnectionConfig>): void {
    this.config = { ...this.config, ...newConfig };
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  public getConfig(): ScaleConnectionConfig {
    return { ...this.config };
  }

  // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –í–¢–ê-60
  public async testConnection(): Promise<boolean> {
    try {
      const result = await this.connect();
      if (result) {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ—Å–æ–≤
        const testData = await this.readScaleOnce(true);
        await this.disconnect();
        return testData !== null;
      }
      return false;
    } catch (error) {
      console.error('Scale connection test failed:', error);
      return false;
    }
  }

  // –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –í–¢–ê-60
  public async testConnectionConfigs(): Promise<{config: ScaleConnectionConfig, success: boolean, data?: VTAScaleData}[]> {
    const configs: ScaleConnectionConfig[] = [
      { baudRate: 4800, dataBits: 8, stopBits: 1, parity: 'even' },  // –í–¢–ê-60 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      { baudRate: 9600, dataBits: 8, stopBits: 1, parity: 'even' },
      { baudRate: 19200, dataBits: 8, stopBits: 1, parity: 'even' },
      { baudRate: 4800, dataBits: 8, stopBits: 1, parity: 'none' },
      { baudRate: 9600, dataBits: 8, stopBits: 1, parity: 'none' },
      { baudRate: 19200, dataBits: 8, stopBits: 1, parity: 'none' }
    ];

    const results: {config: ScaleConnectionConfig, success: boolean, data?: VTAScaleData}[] = [];

    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –í–¢–ê-60...\n');

    for (const config of configs) {
      console.log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º: ${config.baudRate} baud, ${config.parity} parity`);

      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        this.updateConfig(config);

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        const success = await this.connect();

        if (success) {
          console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');

          // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
          const scaleData = await this.readScaleOnce(true);

          if (scaleData) {
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: ${scaleData.weight} –∫–≥, —Ü–µ–Ω–∞: ${scaleData.price}, —Å—É–º–º–∞: ${scaleData.total}`);
            console.log(`   Raw: ${Array.from(scaleData.rawData!).map(b => b.toString(16).padStart(2, '0')).join(' ')}`);
          } else {
            console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã');
          }

          // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
          await this.disconnect();

          results.push({ config, success: scaleData !== null, data: scaleData || undefined });
          console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${scaleData ? '–£–°–ü–ï–•' : '–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ë–ï–ó –î–ê–ù–ù–´–•'}\n`);
        } else {
          console.log('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å\n');
          results.push({ config, success: false });
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}\n`);
        results.push({ config, success: false });
      }
    }

    return results;
  }
}

export default ScaleService;
