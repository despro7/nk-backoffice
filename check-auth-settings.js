// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkAuthSettings() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authSettings = await prisma.authSettings.findMany({
      orderBy: { key: 'asc' }
    });
    
    console.log('üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
    console.log('=====================================');
    
    if (authSettings.length === 0) {
      console.log('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:');
      console.log('‚Ä¢ access_token_expires_in: 1h');
      console.log('‚Ä¢ refresh_token_expires_in: 30d');
      console.log('‚Ä¢ middleware_refresh_threshold_seconds: 300');
      console.log('‚Ä¢ client_refresh_threshold_minutes: 10');
      console.log('‚Ä¢ middleware_auto_refresh_enabled: true');
      console.log('‚Ä¢ client_auto_refresh_enabled: true');
    } else {
      authSettings.forEach(setting => {
        console.log(`‚Ä¢ ${setting.key}: ${setting.value}${setting.description ? ' (' + setting.description + ')' : ''}`);
      });
    }

    console.log('\nüßÆ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:');
    console.log('======================');
    
    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ access —Ç–æ–∫–µ–Ω–∞
    const accessExpiresIn = authSettings.find(s => s.key === 'access_token_expires_in')?.value || '1h';
    const middlewareThreshold = parseInt(authSettings.find(s => s.key === 'middleware_refresh_threshold_seconds')?.value || '300');
    const clientThreshold = parseInt(authSettings.find(s => s.key === 'client_refresh_threshold_minutes')?.value || '10') * 60;
    const middlewareEnabled = (authSettings.find(s => s.key === 'middleware_auto_refresh_enabled')?.value || 'true') === 'true';
    const clientEnabled = (authSettings.find(s => s.key === 'client_auto_refresh_enabled')?.value || 'true') === 'true';
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥—ã
    function parseTime(timeStr) {
      const unit = timeStr.slice(-1);
      const value = parseInt(timeStr.slice(0, -1));
      switch (unit) {
        case 's': return value;
        case 'm': return value * 60;
        case 'h': return value * 60 * 60;
        case 'd': return value * 24 * 60 * 60;
        default: return 3600;
      }
    }
    
    const tokenLifetime = parseTime(accessExpiresIn);
    
    console.log(`üìä Access token –∂–∏–≤–µ—Ç: ${tokenLifetime} —Å–µ–∫—É–Ω–¥ (${accessExpiresIn})`);
    console.log(`üîÑ Middleware –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞: ${middlewareThreshold} —Å–µ–∫—É–Ω–¥ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è${middlewareEnabled ? ' (–í–ö–õ–Æ–ß–ï–ù–û)' : ' (–í–´–ö–õ–Æ–ß–ï–ù–û)'}`);
    console.log(`üíª Client –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞: ${clientThreshold} —Å–µ–∫—É–Ω–¥ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è${clientEnabled ? ' (–í–ö–õ–Æ–ß–ï–ù–û)' : ' (–í–´–ö–õ–Æ–ß–ï–ù–û)'}`);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const middlewareTriggerTime = tokenLifetime - middlewareThreshold;
    const clientTriggerTime = tokenLifetime - clientThreshold;
    
    console.log(`\n‚è∞ Timeline –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:`);
    console.log(`   0 —Å–µ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ${tokenLifetime} —Å–µ–∫ (–∏—Å—Ç–µ—á–µ–Ω–∏–µ)`);
    if (clientEnabled) {
      console.log(`   ${clientTriggerTime} —Å–µ–∫: Client –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ`);
    }
    if (middlewareEnabled) {
      console.log(`   ${middlewareTriggerTime} —Å–µ–∫: Middleware –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    if (middlewareEnabled && clientEnabled) {
      if (Math.abs(middlewareTriggerTime - clientTriggerTime) < 60) {
        console.log('\n‚ùå –ö–û–ù–§–õ–ò–ö–¢! Middleware –∏ Client –æ–±–Ω–æ–≤–ª—è—é—Ç —Ç–æ–∫–µ–Ω—ã –ø–æ—á—Ç–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!');
        console.log('üí° –†–ï–®–ï–ù–ò–ï: –õ–∏–±–æ –æ—Ç–∫–ª—é—á–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –ª–∏–±–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã');
      } else {
        console.log('\n‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è');
      }
    }
    
    if (middlewareEnabled && clientEnabled && middlewareThreshold > clientThreshold) {
      console.log('\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: Middleware –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∂–µ –∫–ª–∏–µ–Ω—Ç–∞ - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkAuthSettings();