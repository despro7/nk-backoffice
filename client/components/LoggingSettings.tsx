import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardBody, CardFooter, Switch, Button } from '@heroui/react';
import { LoggingService } from '../services/LoggingService';
import { LoggingSettingsTypes } from '../types/logging';
import { DynamicIcon } from 'lucide-react/dynamic';
import { ToastService } from '../services/ToastService';

export const LoggingSettings: React.FC = () => {
	const [settings, setSettings] = useState<LoggingSettingsTypes | null>(null);
	const [isLoading, setIsLoading] = useState(false);
	const [hasChanges, setHasChanges] = useState(false);
	const [isInitialized, setIsInitialized] = useState(false);
	const [error, setError] = useState<string | null>(null);

	// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—è
	useEffect(() => {
		loadSettings();
	}, []);

	const loadSettings = async () => {
		try {
			LoggingService.loggingSettingsLog('üîß –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è...');
			
			// –ß–µ–∫–∞—î–º–æ –Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é LoggingService (—è–∫ —É ToastSettings)
			const MAX_ATTEMPTS = 5;
			const DELAY_MS = 150;
			let attempts = 0;
			
			// –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ LoggingService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è
			while (!LoggingService.isServiceInitialized() && attempts < MAX_ATTEMPTS) {
				attempts++;
				await new Promise((r) => setTimeout(r, DELAY_MS));
			}
			
			const logSettings = LoggingService.getSettings();
			setSettings(logSettings);
			setError(null);
			setIsInitialized(true);
			LoggingService.loggingSettingsLog('üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∑ LoggingService:', logSettings);
		} catch (error) {
			console.error('üîß [LoggingSettings] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
			// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∏–¥–∏–º—É –ø–æ–º–∏–ª–∫—É —Ç–∞ –¥–æ–∑–≤–æ–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É Retry –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–∏
			setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è');
			setIsInitialized(true);
			ToastService.show({ title: '‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞', description: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚Äî —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ç–∏–ø–æ–≤—ñ', color: 'warning' });
		}
	};

	const retryLoad = () => {
		setIsInitialized(false);
		setError(null);
		loadSettings();
	};

	const saveLoggingSettings = async () => {
		if (!settings) return;
			setIsLoading(true);
		try {
			LoggingService.loggingSettingsLog('üîß –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è... –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ:', JSON.stringify(settings, null, 2));

			// –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Å–æ–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ LoggingService
			LoggingService.updateSettings({
				...settings,
			});
			// –°–ø—Ä–æ–±—É—î–º–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
			const success = await LoggingService.saveSettings({
				...settings,
			});
			

			if (success) {
				setHasChanges(false);
				ToastService.show({
					title: "‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ",
					description: "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
					color: "success"
				});
				LoggingService.loggingSettingsLog('üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
			} else {
				ToastService.show({
					title: "‚ö†Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ",
					description: "–ó–º—ñ–Ω–∏ –¥—ñ—é—Ç—å, –∞–ª–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
					color: "warning"
				});
			}
		} catch (error) {
			LoggingService.loggingSettingsLog('üîß –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è:', error);
			ToastService.show({
				title: "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è",
				description: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
				color: "danger"
			});
		} finally {
			setIsLoading(false);
		}
	};

	const updateLoggingSetting = (key: keyof LoggingSettingsTypes, value: boolean) => {
		setSettings(prev => prev ? { ...prev, [key]: value } : prev);
		setHasChanges(true);
	};

	const getLoggingDefaults = (): LoggingSettingsTypes => ({
		authContextLogs: true,
		apiCallLogs: false,
		routingLogs: false,
		equipmentLogs: true,
		debugLogs: false,
		performanceLogs: false,
		loggingSettingsLogs: false,
		orderAssemblyLogs: false,
		cookieLogs: false,
		warehouseMovementLogs: false,
		productSetsLogs: false
	});

	const resetLoggingToDefaults = () => {
		setSettings(getLoggingDefaults());
		setHasChanges(true);
	};

	// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (–∑ –ø—Ä–∏–º—É—Å–æ–≤–∏–º –≤–∏–≤–µ–¥–µ–Ω–Ω—è–º)
	const demonstrateConsoleLog = (type: keyof LoggingSettingsTypes) => {
		switch (type) {
			case 'authContextLogs':
				LoggingService.authLog('üîë –î–µ–º–æ: –¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ', { expiresIn: 120 }, true);
				break;
			case 'apiCallLogs':
				LoggingService.apiLog('üöÄ –î–µ–º–æ: API –∑–∞–ø–∏—Ç GET /api/orders -> 200 (150ms)', undefined, true);
				break;
			case 'routingLogs':
				LoggingService.routeLog('üß≠ –î–µ–º–æ: –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É /settings/logging', undefined, true);
				break;
			case 'equipmentLogs':
				LoggingService.equipmentLog('‚öñÔ∏è –î–µ–º–æ: –í–∞–≥–∏ VTA-60 –ø—ñ–¥\'—î–¥–Ω–∞–Ω–æ, –≤–∞–≥–∞: 1.25 –∫–≥', undefined, true);
				break;
			case 'debugLogs':
				LoggingService.debugLog('üêõ –î–µ–º–æ: –ù–∞–ª–∞–≥–æ–¥–∂—É–≤–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', { state: 'active', count: 5 }, true);
				break;
			case 'performanceLogs':
				LoggingService.perfLog('‚ö° –î–µ–º–æ: –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∑–∞ 15ms', undefined, true);
				break;
			case 'loggingSettingsLogs':
				LoggingService.loggingSettingsLog('‚öôÔ∏è –î–µ–º–æ: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ', undefined, true);
				break;
			case 'orderAssemblyLogs':
				LoggingService.orderAssemblyLog('üì¶ –î–µ–º–æ: –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ12345 –≥–æ—Ç–æ–≤–µ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏', undefined, true);
				break;
			case 'cookieLogs':
				LoggingService.cookieLog('üç™ –î–µ–º–æ: Cookie "user_theme" –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º "dark"', undefined, true);
				break;
			case 'warehouseMovementLogs':
				LoggingService.warehouseMovementLog('üè≠ –î–µ–º–æ: –°–∫–ª–∞–¥—Å—å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç #WM-001 —Å—Ç–≤–æ—Ä–µ–Ω–æ', undefined, true);
				break;
			case 'productSetsLogs':
				LoggingService.productSetsLog('üõí –î–µ–º–æ: –ù–∞–±—ñ—Ä —Ç–æ–≤–∞—Ä—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ', undefined, true);
				break;
		}
	};

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è UI
	const LoggingSettingsConfig: Array<{
		key: keyof LoggingSettingsTypes;
		label: string;
		description: string;
		color: 'primary' | 'success' | 'warning' | 'danger';
	}> = [
		{
			key: 'authContextLogs',
			label: '–õ–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (AuthContext)',
			description: '–õ–æ–≥–∏ —Ç–æ–∫–µ–Ω—ñ–≤, –≤—Ö–æ–¥—É/–≤–∏—Ö–æ–¥—É, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—Å–∏–π',
			color: 'primary'
		},
		{
			key: 'apiCallLogs',
			label: 'API –∑–∞–ø–∏—Ç–∏',
			description: '–õ–æ–≥–∏ HTTP –∑–∞–ø–∏—Ç—ñ–≤ —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —Å–µ—Ä–≤–µ—Ä–∞',
			color: 'success'
		},
		{
			key: 'routingLogs',
			label: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è',
			description: '–õ–æ–≥–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤ –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏',
			color: 'primary'
		},
		{
			key: 'equipmentLogs',
			label: '–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è (–≤–∞–≥–∏, –ø—Ä–∏–Ω—Ç–µ—Ä–∏)',
			description: '–õ–æ–≥–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —ñ —Ä–æ–±–æ—Ç–∏ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
			color: 'warning'
		},
		{
			key: 'debugLogs',
			label: '–í—ñ–¥–ª–∞–¥–æ—á–Ω—ñ –ª–æ–≥–∏',
			description: '–¢–µ—Ö–Ω—ñ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤',
			color: 'danger'
		},
		{
			key: 'performanceLogs',
			label: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
			description: '–õ–æ–≥–∏ —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —ñ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ',
			color: 'success'
		},
		{
			key: 'loggingSettingsLogs',
			label: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è',
			description: '–õ–æ–≥–∏ —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ª–æ–≥–∞–º–∏',
			color: 'primary'
		},
		{
			key: 'orderAssemblyLogs',
			label: '–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å',
			description: '–õ–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—É –∑–±–∏—Ä–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å',
			color: 'warning'
		},
		{
			key: 'productSetsLogs',
			label: '–ù–∞–±—ñ—Ä —Ç–æ–≤–∞—Ä—ñ–≤',
			description: '–õ–æ–≥–∏ —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∞–±–æ—Ä–∞–º–∏ —Ç–æ–≤–∞—Ä—ñ–≤',
			color: 'success'
		},
		{
			key: 'cookieLogs',
			label: '–†–æ–±–æ—Ç–∞ –∑ Cookies',
			description: '–õ–æ–≥–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ —á–∏—Ç–∞–Ω–Ω—è cookies',
			color: 'success'
		},
		{
			key: 'warehouseMovementLogs',
			label: '–°–∫–ª–∞–¥—Å—å–∫—ñ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è',
			description: '–õ–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ —Å–∫–ª–∞–¥—Å—å–∫–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ —Ç–∞ —Ä—É—Ö–æ–º —Ç–æ–≤–∞—Ä—ñ–≤',
			color: 'danger'
		}
	];

		// –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, –ø–æ–∫–∏ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
		if (!isInitialized || !settings) {
			// –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ —è–≤–Ω–∏–π –±–ª–æ–∫ –∑ Retry —Ç–∞ Use defaults
			if (error) {
				const applyDefaultsFromError = () => {
					const defaults = getLoggingDefaults();
					setSettings(defaults);
					setHasChanges(true);
					setError(null);
					ToastService.show({ title: '‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Ç–∏–ø–æ–≤—ñ', description: '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Ç–∏–ø–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è', color: 'default' });
				};

				return (
					<Card className="w-full p-2">
						<CardHeader className="text-lg font-semibold">‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å</CardHeader>
						<CardBody className="p-6">
							<div className="text-sm text-gray-700 mb-4">{error}</div>
							<div className="text-xs text-gray-500">–°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ç–∏–ø–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.</div>
						</CardBody>
						<CardFooter className="flex gap-3">
							<Button color="primary" onPress={retryLoad}>–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏</Button>
							<Button color="default" variant="light" onPress={applyDefaultsFromError}>–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç–∏–ø–æ–≤—ñ</Button>
						</CardFooter>
					</Card>
				);
			}

			return (
				<Card className="flex-1 p-2">
					<CardBody className="flex items-center justify-center p-8">
						<div className="text-center">
							<div className="text-lg">‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...</div>
						</div>
					</CardBody>
				</Card>
			);
		}

	return (
		<Card className="flex-1 p-2">
			<CardHeader className="flex items-center gap-3 text-lg font-semibold">
				–õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—ñ –±—Ä–∞—É–∑–µ—Ä–∞
			</CardHeader>

			<CardBody className="space-y-6 px-6">
				<div className="space-y-4">
					{LoggingSettingsConfig.map((config) => (
						<div key={config.key} className="flex items-start gap-3">
							<Switch
								size="sm"
								isSelected={!!settings?.[config.key]}
								onValueChange={(value) => updateLoggingSetting(config.key, value)}
								className="mt-1"
							/>
							<div className="flex-1">
								<div className="font-medium text-sm">
									{config.label}
									<Button
											size="sm"
											variant="flat"
											color="warning"
											onPress={() => {
												demonstrateConsoleLog(config.key);
												// ToastService.show({
												// 	title: 'üîî –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è',
												// 	description: '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)',
												// 	color: 'default',
												// 	timeout: 3000
												// });
											}}
											className="h-6 px-2 text-xs ml-2 gap-1"
										>
										<DynamicIcon name="bell-ring" strokeWidth={1.5} size={12} /> –¢–µ—Å—Ç—É–≤–∞—Ç–∏
										</Button>
								</div>
								<div className="text-xs text-gray-500 mb-1">{config.description}</div>
							</div>
						</div>
					))}
				</div>
			</CardBody>
			<CardFooter className="flex justify-start items-center w-full mt-3 gap-4">
				<Button
					color="primary"
					onPress={saveLoggingSettings}
					isLoading={isLoading}
					isDisabled={!hasChanges}
				>
					<DynamicIcon name="save" size={16} />
					{isLoading ? '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...' : '–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'}
				</Button>

				<Button
					color="default"
					variant="light"
					onPress={resetLoggingToDefaults}
				>
					–°–∫–∏–Ω—É—Ç–∏ –¥–æ —Ç–∏–ø–æ–≤–∏—Ö
				</Button>
			</CardFooter>
		</Card>
	);
};

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
export default LoggingSettings;