import { prisma } from '../lib/utils.js';
import { EQUIPMENT_DEFAULTS } from '../../shared/constants/equipmentDefaults.js';

// –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è SettingsBase (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Prisma)
interface SettingsBase {
  id: number;
  key: string;
  value: string;
  description?: string;
  category?: string;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º any –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π Prisma
const settingsBase = prisma.settingsBase as any;

export interface EquipmentSettings {
  connectionType: 'local' | 'simulation';
  scale: {
    comPort: string;
    baudRate: number;
    dataBits: number;
    stopBits: number;
    parity: string;
    autoConnect: boolean;
    activePollingInterval: number;
    reservePollingInterval: number;
    activePollingDuration: number;
    maxPollingErrors: number;
    weightCacheDuration: number;
    weightThresholdForActive: number;
    connectionStrategy: 'legacy' | 'reconnectOnError' | 'persistentStream';
  };
  scanner: {
    autoConnect: boolean;
    timeout: number;
  };
  simulation: {
    enabled: boolean;
    weightRange: { min: number; max: number };
    scanDelay: number;
    weightDelay: number;
  };
  printer?: {
    enabled: boolean;
    name: string;
  };
}

export class EquipmentSettingsService {
  private static instance: EquipmentSettingsService;
  private readonly SETTINGS_CATEGORY = 'equipment';

  private constructor() {}

  public static getInstance(): EquipmentSettingsService {
    if (!EquipmentSettingsService.instance) {
      EquipmentSettingsService.instance = new EquipmentSettingsService();
    }
    return EquipmentSettingsService.instance;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  async getEquipmentSettings(): Promise<EquipmentSettings> {
    try {
      const settings = await settingsBase.findMany({
        where: {
          category: this.SETTINGS_CATEGORY,
          isActive: true
        }
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const defaultSettings: EquipmentSettings = EQUIPMENT_DEFAULTS;

      if (settings.length === 0) {
        // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        console.log('üìã –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º...');
        await this.saveEquipmentSettings(defaultSettings);
        return defaultSettings;
      }

      // –ü–∞—Ä—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
      const parsedSettings: Partial<EquipmentSettings> = {};
      
      for (const setting of settings) {
        try {
          const value = JSON.parse(setting.value);
          const key = setting.key.replace('equipment_', '');
          
          if (key.includes('.')) {
            // –í–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, scale.comPort)
            const [section, field] = key.split('.');
            if (!parsedSettings[section]) {
              parsedSettings[section] = {};
            }
            parsedSettings[section][field] = value;
          } else {
            // –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            parsedSettings[key] = value;
          }
        } catch (error) {
          console.error(`Error parsing setting ${setting.key}:`, error);
        }
      }

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      return this.mergeSettings(defaultSettings, parsedSettings);
    } catch (error) {
      console.error('Error getting equipment settings:', error);
      throw new Error('Failed to get equipment settings');
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  async saveEquipmentSettings(settings: EquipmentSettings): Promise<void> {
    try {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è upsert –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const settingsToSave = [
        {
          key: 'equipment_connectionType',
          value: JSON.stringify(settings.connectionType ?? 'simulation'),
          description: '–¢–∏–ø –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è'
        },
        {
          key: 'equipment_scale.comPort',
          value: JSON.stringify(settings.scale?.comPort ?? 'COM4'),
          description: 'COM-–ø–æ—Ä—Ç –≤–∞–≥'
        },
        {
          key: 'equipment_scale.baudRate',
          value: JSON.stringify(settings.scale?.baudRate ?? 9600),
          description: '–®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á—ñ –¥–∞–Ω–∏—Ö –≤–∞–≥'
        },
        {
          key: 'equipment_scale.dataBits',
          value: JSON.stringify(settings.scale?.dataBits ?? 8),
          description: '–ë—ñ—Ç–∏ –¥–∞–Ω–∏—Ö –≤–∞–≥'
        },
        {
          key: 'equipment_scale.stopBits',
          value: JSON.stringify(settings.scale?.stopBits ?? 1),
          description: '–°—Ç–æ–ø-–±—ñ—Ç–∏ –≤–∞–≥'
        },
        {
          key: 'equipment_scale.parity',
          value: JSON.stringify(settings.scale?.parity ?? 'none'),
          description: '–ü–∞—Ä–Ω—ñ—Å—Ç—å –≤–∞–≥'
        },
        {
          key: 'equipment_scale.autoConnect',
          value: JSON.stringify(settings.scale?.autoConnect ?? false),
          description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤–∞–≥'
        },
        {
          key: 'equipment_scale.activePollingInterval',
          value: JSON.stringify(settings.scale?.activePollingInterval ?? 1000),
          description: '–ê–∫—Ç–∏–≤–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –≤–∞–≥ (–º—Å)'
        },
        {
          key: 'equipment_scale.reservePollingInterval',
          value: JSON.stringify(settings.scale?.reservePollingInterval ?? 5000),
          description: '–†–µ–∑–µ—Ä–≤–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –≤–∞–≥ (–º—Å)'
        },
        {
          key: 'equipment_scale.activePollingDuration',
          value: JSON.stringify(settings.scale?.activePollingDuration ?? 30000),
          description: '–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –≤–∞–≥ (–º—Å)'
        },
        {
          key: 'equipment_scale.maxPollingErrors',
          value: JSON.stringify(settings.scale?.maxPollingErrors ?? 5),
          description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫ –ø–µ—Ä–µ–¥ –∑—É–ø–∏–Ω–∫–æ—é –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'
        },
        {
          key: 'equipment_scale.weightCacheDuration',
          value: JSON.stringify(settings.scale?.weightCacheDuration ?? 500),
          description: '–ß–∞—Å –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤–∞–≥ (–º—Å)'
        },
        {
          key: 'equipment_scale.weightThresholdForActive',
          value: JSON.stringify(settings.scale?.weightThresholdForActive ?? 0.010),
          description: '–ü–æ—Ä—ñ–≥ –≤–∞–≥–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω–∏–π polling (–∫–≥)'
        },
        {
          key: 'equipment_scale.connectionStrategy',
          value: JSON.stringify(settings.scale?.connectionStrategy ?? 'legacy'),
          description: '–°—Ç—Ä–∞—Ç–µ–≥—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ COM-–ø–æ—Ä—Ç–æ–º –≤–∞–≥'
        },
        {
          key: 'equipment_scanner.autoConnect',
          value: JSON.stringify(settings.scanner?.autoConnect ?? true),
          description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å–∫–∞–Ω–µ—Ä–∞'
        },
        {
          key: 'equipment_scanner.timeout',
          value: JSON.stringify(settings.scanner?.timeout ?? 5000),
          description: '–¢–∞–π–º–∞—É—Ç —Å–∫–∞–Ω–µ—Ä–∞'
        },
        {
          key: 'equipment_simulation.enabled',
          value: JSON.stringify(settings.simulation?.enabled ?? true),
          description: '–†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü—ñ—ó –≤–≤—ñ–º–∫–Ω–µ–Ω–æ'
        },
        {
          key: 'equipment_simulation.weightRange.min',
          value: JSON.stringify(settings.simulation.weightRange?.min ?? 0.1),
          description: '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó'
        },
        {
          key: 'equipment_simulation.weightRange.max',
          value: JSON.stringify(settings.simulation.weightRange?.max ?? 5.0),
          description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó'
        },
        {
          key: 'equipment_simulation.scanDelay',
          value: JSON.stringify(settings.simulation.scanDelay ?? 800),
          description: '–ó–∞—Ç—Ä–∏–º–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó'
        },
        {
          key: 'equipment_simulation.weightDelay',
          value: JSON.stringify(settings.simulation.weightDelay ?? 1200),
          description: '–ó–∞—Ç—Ä–∏–º–∫–∞ –≤–∞–≥–∏ –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó'
        },
        {
          key: 'equipment_printer.enabled',
          value: JSON.stringify(settings.printer?.enabled ?? false),
          description: '–ü—Ä—è–º–∏–π –¥—Ä—É–∫ —á–µ—Ä–µ–∑ QZ Tray —É–≤—ñ–º–∫–Ω–µ–Ω–æ'
        },
        {
          key: 'equipment_printer.name',
          value: JSON.stringify(settings.printer?.name ?? ''),
          description: "–Ü–º'—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥—Ä—É–∫—É"
        }
      ];

      for (const setting of settingsToSave) {
        await settingsBase.upsert({
          where: { key: setting.key },
          update: {
            value: setting.value,
            category: this.SETTINGS_CATEGORY,
            description: setting.description,
            isActive: true,
            updatedAt: new Date()
          },
          create: {
            key: setting.key,
            value: setting.value,
            category: this.SETTINGS_CATEGORY,
            description: setting.description,
            isActive: true
          }
        });
      }
    } catch (error) {
      console.error('Error saving equipment settings:', error);
      throw new Error('Failed to save equipment settings');
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  async updateEquipmentSetting(key: string, value: any): Promise<void> {
    try {
      const dbKey = `equipment_${key}`;
      const dbValue = JSON.stringify(value);
      
      await settingsBase.upsert({
        where: { key: dbKey },
        update: {
          value: dbValue,
          updatedAt: new Date()
        },
        create: {
          key: dbKey,
          value: dbValue,
          category: this.SETTINGS_CATEGORY,
          description: `Equipment setting: ${key}`,
          isActive: true
        }
      });
    } catch (error) {
      console.error(`Error updating equipment setting ${key}:`, error);
      throw new Error(`Failed to update equipment setting: ${key}`);
    }
  }

  // –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  async resetEquipmentSettings(): Promise<EquipmentSettings> {
    try {
      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      await settingsBase.updateMany({
        where: {
          category: this.SETTINGS_CATEGORY,
          isActive: true
        },
        data: {
          isActive: false
        }
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const defaultSettings = await this.getEquipmentSettings();
      return defaultSettings;
    } catch (error) {
      console.error('Error resetting equipment settings:', error);
      throw new Error('Failed to reset equipment settings');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
  async getSettingsHistory(limit: number = 50): Promise<any[]> {
    try {
      const history = await settingsBase.findMany({
        where: {
          category: this.SETTINGS_CATEGORY
        },
        orderBy: {
          updatedAt: 'desc'
        },
        take: limit
      });

      return history.map(item => ({
        key: item.key,
        value: item.value,
        description: item.description,
        isActive: item.isActive,
        updatedAt: item.updatedAt
      }));
    } catch (error) {
      console.error('Error getting settings history:', error);
      throw new Error('Failed to get settings history');
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

  private flattenSettings(settings: any, prefix: string = ''): Record<string, any> {
    const flattened: Record<string, any> = {};
    
    for (const [key, value] of Object.entries(settings)) {
      const fullKey = prefix ? `${prefix}.${key}` : key;
      
      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
        Object.assign(flattened, this.flattenSettings(value, fullKey));
      } else {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
        if (typeof value === 'string' && (value === 'simulation' || value === 'local')) {
          // –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ç–∏–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          flattened[fullKey] = value;
        } else {
          // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          flattened[fullKey] = value;
        }
      }
    }
    
    return flattened;
  }

  private mergeSettings(defaultSettings: EquipmentSettings, userSettings: Partial<EquipmentSettings>): EquipmentSettings {
    const merged = { ...defaultSettings };
    
    for (const [section, sectionSettings] of Object.entries(userSettings)) {
      if (typeof sectionSettings === 'object' && sectionSettings !== null) {
        if (section in merged) {
          merged[section] = { ...merged[section], ...sectionSettings };
        }
      } else {
        merged[section] = sectionSettings;
      }
    }
    
    return merged;
  }
}

export default EquipmentSettingsService;
