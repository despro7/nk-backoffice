import { playSoundChoice } from '../lib/soundUtils';
import { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardBody, CardHeader, Chip, Button } from '@heroui/react';
import { useApi } from '../hooks/useApi';
import OrderChecklist from '@/components/OrderChecklist';
import { DeviationButton } from '@/components/DeviationButton';
import { RightPanel } from '@/components/RightPanel';
import { BoxSelector } from '@/components/BoxSelector';

import { useAuth } from '../contexts/AuthContext';
import { Code } from '@heroui/code';
import { DynamicIcon } from 'lucide-react/dynamic';
import { formatDateOnly, formatTimeOnly, getStatusColor, getStatusLabel } from '../lib/formatUtils';
import { useEquipmentFromAuth } from '../contexts/AuthContext';
import { useDebug } from '../contexts/DebugContext';
import { shippingClientService } from '../services/ShippingService';
import ErrorBoundary from '../components/ErrorBoundary'; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å
import { addToast } from '@heroui/toast';
import PrinterService from '../services/printerService';
import { formatTrackingNumberWithIcon } from '@/lib/formatUtilsJSX';
import { WeightDisplayWidget } from '@/components/WeightDisplayWidget';
import { LoggingService } from '@/services/LoggingService';
import { calcTolerance, calcBoxTolerance, calcCumulativeTolerance } from '@/lib/utils';
import { ToastService } from '@/services/ToastService';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ tolerance
interface ToleranceSettings {
  type: 'percentage' | 'absolute' | 'combined';
  percentage: number;
  absolute: number;
  maxTolerance: number;
  minTolerance: number;
  maxPortions: number;
  minPortions: number;
}

// –¢–∏–ø—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
interface OrderChecklistItem {
  id: string;
  name: string;
  quantity: number;
  expectedWeight: number;
  status: 'default' | 'pending' | 'success' | 'error' | 'done' | 'awaiting_confirmation' | 'confirmed';
  type: 'product' | 'box';
  boxSettings?: any;
  boxCount?: number;
  boxIndex?: number; // –ò–Ω–¥–µ–∫—Å –∫–æ—Ä–æ–±–∫–∏ (0, 1, 2...)
  portionsRange?: { start: number; end: number }; // –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ü–∏–π –¥–ª—è –∫–æ—Ä–æ–±–∫–∏
  portionsPerBox?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –Ω–∞ –∫–æ—Ä–æ–±–∫—É
  sku?: string; // SKU —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—É
  barcode?: string; // –®—Ç—Ä–∏—Ö-–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞
}

interface OrderForAssembly {
  id: string | undefined;
  shipping: {
    carrier: string;
    trackingId: string;
    provider: string;
  };
  items: OrderChecklistItem[];
  totalPortions: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
interface Product {
  id: number;
  sku: string;
  name: string;
  weight?: number; // –í–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö
  categoryId?: number; // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  set: Array<{ id: string; quantity: number }> | null;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–µ—Å–∞
const calculateExpectedWeight = (product: Product, quantity: number): number => {
  // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–µ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (product.weight && product.weight > 0) {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞–º–º—ã –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã
    return (product.weight * quantity) / 1000;
  }
  
  // Fallback –Ω–∞ –≤–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  // categoryId === 1 - –ø–µ—Ä–≤—ã–µ –±–ª—é–¥–∞ (420–≥), –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –≤—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞ (330–≥)
  const defaultWeight = product.categoryId === 1 ? 420 : 330;
  return (defaultWeight * quantity) / 1000;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞–±–æ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
const expandProductSets = async (orderItems: any[], apiCall: any): Promise<OrderChecklistItem[]> => {
  const expandedItems: { [key: string]: OrderChecklistItem } = {};
  
  // console.log('=== –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –Ω–∞–±–æ—Ä—ñ–≤ ===');
  // console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderItems.length}`);
  
  for (const item of orderItems) {
    try {
      // console.log(`\n--- –û–±—Ä–æ–±–∫–∞ –ø–æ–∑–∏—Ü—ñ—ó: ${item.productName} (SKU: ${item.sku}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${item.quantity}) ---`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ SKU
      const response = await apiCall(`/api/products/${item.sku}`);
      if (response.ok) {
        const product: Product = await response.json();
        // console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä: ${product.name}`, product);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É product.set
        if (product.set) {
          // console.log(`üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞–±–æ—Ä—É –¥–ª—è ${product.name}:`, product.set);
        }
        
        if (product.set && Array.isArray(product.set) && product.set.length > 0) {
          // –≠—Ç–æ –Ω–∞–±–æ—Ä - —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ
          // console.log(`üîç –¶–µ –Ω–∞–±—ñ—Ä –∑ ${product.set.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤:`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É set
          const validSetItems = product.set.filter(setItem => 
            setItem && typeof setItem === 'object' && setItem.id && setItem.quantity
          );
          
          if (validSetItems.length === 0) {
            console.warn(`‚ö†Ô∏è –ù–∞–±—ñ—Ä ${product.name} –Ω–µ –º–∞—î –≤–∞–ª—ñ–¥–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤:`, product.set);
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä
            const itemName = item.productName;
            if (expandedItems[itemName]) {
              expandedItems[itemName].quantity += item.quantity;
            } else {
              expandedItems[itemName] = {
                id: item.sku,
                name: itemName,
                quantity: item.quantity,
                expectedWeight: calculateExpectedWeight(product, item.quantity),
                status: 'default' as const,
                type: 'product',
                sku: item.sku,
                barcode: item.sku // –ò—Å–ø–æ–ª—å–∑—É–µ–º SKU –∫–∞–∫ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
              };
            }
            continue;
          }
                      for (const setItem of validSetItems) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É setItem –µ—Å—Ç—å id (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
              if (!setItem.id) {
                console.warn(`‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–±–æ—Ä—É –Ω–µ –º–∞—î ID:`, setItem);
                continue;
              }
            
            try {
              // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞–±–æ—Ä–∞
              const componentResponse = await apiCall(`/api/products/${setItem.id}`);
              if (componentResponse.ok) {
                const component: Product = await componentResponse.json();
                const componentName = component.name;
                const totalQuantity = item.quantity * setItem.quantity;
                
                // console.log(`  ‚úÖ ${componentName}: ${setItem.quantity} √ó ${item.quantity} = ${totalQuantity} –ø–æ—Ä—Ü—ñ–π`);
                
                // –°—É–º–º–∏—Ä—É–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
                if (expandedItems[componentName]) {
                  const oldQuantity = expandedItems[componentName].quantity;
                  expandedItems[componentName].quantity += totalQuantity;
                  // console.log(`    üîÑ –°—É–º—É—î–º–æ –∑ —ñ—Å–Ω—É—é—á–∏–º–∏: ${oldQuantity} + ${totalQuantity} = ${expandedItems[componentName].quantity}`);
                } else {
                  expandedItems[componentName] = {
                    id: `${item.sku}_${setItem.id}`,
                    name: componentName,
                    quantity: totalQuantity,
                    expectedWeight: calculateExpectedWeight(component, totalQuantity),
                    status: 'default' as const,
                    type: 'product',
                    sku: setItem.id,
                    barcode: setItem.id // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∫–∞–∫ —à—Ç—Ä–∏—Ö-–∫–æ–¥
                  };
                  // console.log(`    ‚ûï –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: ${componentName}`);
                }
              } else {
                console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–±–æ—Ä—É: ${setItem.id} (—Å—Ç–∞—Ç—É—Å: ${componentResponse.status})`);
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                const componentName = `–ù–µ–≤—ñ–¥–æ–º–∞ —Å—Ç—Ä–∞–≤–∞ (${setItem.id})`;
                const totalQuantity = item.quantity * setItem.quantity;
                
                if (expandedItems[componentName]) {
                  expandedItems[componentName].quantity += totalQuantity;
                } else {
                  expandedItems[componentName] = {
                    id: `${item.sku}_${setItem.id}`,
                    name: componentName,
                    quantity: totalQuantity,
                    expectedWeight: totalQuantity * 0.33, // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (330–≥)
                    status: 'default' as const,
                    type: 'product'
                  };
                }
              }
            } catch (componentError) {
              console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞–±–æ—Ä—É ${setItem.id}:`, componentError);
              // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
              const componentName = `–ù–µ–≤—ñ–¥–æ–º–∞ —Å—Ç—Ä–∞–≤–∞ (${setItem.id})`;
              const totalQuantity = item.quantity * setItem.quantity;
              
              if (expandedItems[componentName]) {
                expandedItems[componentName].quantity += totalQuantity;
              } else {
                  expandedItems[componentName] = {
                    id: `${item.sku}_${setItem.id}`,
                    name: componentName,
                    quantity: totalQuantity,
                    expectedWeight: totalQuantity * 0.33, // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (330–≥)
                    status: 'default' as const,
                    type: 'product',
                    sku: setItem.id,
                    barcode: setItem.id // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∫–∞–∫ —à—Ç—Ä–∏—Ö-–∫–æ–¥
                  };
              }
            }
          }
        } else {
          // –≠—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          // console.log(`üçΩÔ∏è –ó–≤–∏—á–∞–π–Ω–∏–π —Ç–æ–≤–∞—Ä (–Ω–µ –Ω–∞–±—ñ—Ä): ${item.productName}`);
          const itemName = item.productName;
          if (expandedItems[itemName]) {
            const oldQuantity = expandedItems[itemName].quantity;
            expandedItems[itemName].quantity += item.quantity;
            // console.log(`  üîÑ –°—É–º—É—î–º–æ –∑ —ñ—Å–Ω—É—é—á–∏–º–∏: ${oldQuantity} + ${item.quantity} = ${expandedItems[itemName].quantity}`);
          } else {
            expandedItems[itemName] = {
              id: item.sku,
              name: itemName,
              quantity: item.quantity,
              expectedWeight: calculateExpectedWeight(product, item.quantity),
              status: 'default' as const,
              type: 'product',
              sku: item.sku,
              barcode: item.sku // –ò—Å–ø–æ–ª—å–∑—É–µ–º SKU –∫–∞–∫ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
            };
            // console.log(`  ‚ûï –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä: ${itemName}`);
          }
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä: ${item.sku} (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
        const itemName = item.productName;
        if (expandedItems[itemName]) {
          expandedItems[itemName].quantity += item.quantity;
        } else {
          expandedItems[itemName] = {
            id: item.sku,
            name: itemName,
            quantity: item.quantity,
            expectedWeight: item.quantity * 0.33, // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (330–≥)
            status: 'default' as const,
            type: 'product',
            sku: item.sku,
            barcode: item.sku // –ò—Å–ø–æ–ª—å–∑—É–µ–º SKU –∫–∞–∫ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
          };
        }
      }
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –Ω–∞–±–æ—Ä—É –¥–ª—è ${item.sku}:`, error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –∫–∞–∫ –µ—Å—Ç—å
      const itemName = item.productName;
      if (expandedItems[itemName]) {
        expandedItems[itemName].quantity += item.quantity;
      } else {
        expandedItems[itemName] = {
          id: item.sku,
          name: itemName,
          quantity: item.quantity,
          expectedWeight: item.quantity * 0.33, // Fallback –¥–ª—è –æ—à–∏–±–∫–∏ (330–≥)
          status: 'default' as const,
          type: 'product',
          sku: item.sku,
          barcode: item.sku // –ò—Å–ø–æ–ª—å–∑—É–µ–º SKU –∫–∞–∫ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
        };
      }
    }
  }
  
  // console.log('\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è ===');
  // console.log(`–†–æ–∑–≥–æ—Ä–Ω—É—Ç–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${Object.keys(expandedItems).length}`);
  // console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä—Ü—ñ–π: ${Object.values(expandedItems).reduce((sum, item) => sum + item.quantity, 0)}`);
  
  // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
  Object.entries(expandedItems).forEach(([name, item]) => {
    // console.log(`  üìã ${name}: ${item.quantity} –ø–æ—Ä—Ü—ñ–π`);
  });
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
  return Object.values(expandedItems).map((item, index) => ({
    ...item,
    id: (index + 1).toString()
  }));
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–æ—Ä–æ–±–æ–∫ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
const combineBoxesWithItems = (boxes: any[], items: OrderChecklistItem[], isReadyToShip: boolean = false): OrderChecklistItem[] => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏
  if (!boxes || boxes.length === 0) {
    return items;
  }

  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  const boxItems: OrderChecklistItem[] = boxes.map((box, index) => ({
    id: `box_${index + 1}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ box.id –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    name: box.name || `–ö–æ—Ä–æ–±–∫–∞ ${index + 1}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ fallback
    quantity: 1, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫
    expectedWeight: Number(box.self_weight || box.weight || 0), // –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å –∫–æ—Ä–æ–±–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç self_weight)
    status: isReadyToShip ? 'confirmed' : 'awaiting_confirmation' as const, // –ö–æ—Ä–æ–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ id3
    type: 'box' as const,
    boxSettings: box,
    boxCount: 1,
    boxIndex: index, // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º boxIndex —Ä–∞–≤–Ω—ã–º –∏–Ω–¥–µ–∫—Å—É –≤ –º–∞—Å—Å–∏–≤–µ –∫–æ—Ä–æ–±–æ–∫
    portionsRange: box.portionsRange || { start: 0, end: 0 },
    portionsPerBox: box.portionsPerBox || 0
  }));
  


  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ—Ä–æ–±–∫–∏, —Ä–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–æ—Ä–æ–±–∫–∞–º
  if (boxes.length > 1 && boxes[0].portionsPerBox && boxes[0].portionsPerBox > 0 && !isReadyToShip) {
    // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–æ—Ä–æ–±–∫–∞–º —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    const portionsPerBox = boxes[0].portionsPerBox;

    const productItems: OrderChecklistItem[] = [];

    let currentPortion = 0;
    let currentBoxIndex = 0;

    for (const item of items) {
      const itemPortions = item.quantity;

      if (currentPortion + itemPortions <= portionsPerBox) {
        // –¢–æ–≤–∞—Ä –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â—É—é –∫–æ—Ä–æ–±–∫—É
        productItems.push({
          ...item,
          id: `product_${currentBoxIndex}_${item.id}`,
          type: 'product' as const,
          boxIndex: currentBoxIndex
        });
        currentPortion += itemPortions;
      } else {
        // –¢–æ–≤–∞—Ä –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ—Ä–æ–±–∫–µ
        if (currentBoxIndex < boxes.length - 1) {
          currentBoxIndex++;
          currentPortion = 0;

          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –Ω–æ–≤—É—é –∫–æ—Ä–æ–±–∫—É
          productItems.push({
            ...item,
            id: `product_${currentBoxIndex}_${item.id}`,
            type: 'product' as const,
            boxIndex: currentBoxIndex
          });
          currentPortion += itemPortions;
        } else {
          // –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ—Ä–æ–±–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          productItems.push({
            ...item,
            id: `product_${currentBoxIndex}_${item.id}`,
            type: 'product' as const,
            boxIndex: currentBoxIndex
          });

        }
      }
    }

    const result = [...boxItems, ...productItems];
    return result;
  }

  // –ï—Å–ª–∏ –∫–æ—Ä–æ–±–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –∫–æ—Ä–æ–±–æ–∫, –∏–ª–∏ –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ –æ–±—ã—á–Ω–æ
  const productItems = items.map((item, index) => ({
    ...item,
    id: `product_${index + 1}`,
    type: 'product' as const,
    boxIndex: 0 // –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –ø–µ—Ä–≤–æ–π –∫–æ—Ä–æ–±–∫–µ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ id3
  }));

  const result = [...boxItems, ...productItems];
  return result;
};


export default function OrderView() {
  const { externalId } = useParams<{ externalId: string }>();
  const { apiCall } = useApi();
  const navigate = useNavigate();
  const [equipmentState, equipmentActions] = useEquipmentFromAuth();

  const [order, setOrder] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [expandedItems, setExpandedItems] = useState<OrderChecklistItem[]>([]);
  const [expandingSets, setExpandingSets] = useState(false);
  const [selectedBoxes, setSelectedBoxes] = useState<any[]>([]);
  const [boxesTotalWeight, setBoxesTotalWeight] = useState<number>(0);
  const [activeBoxIndex, setActiveBoxIndex] = useState<number>(0);
  const [checklistItems, setChecklistItems] = useState<OrderChecklistItem[]>([]);

  // --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫/–∑—É–ø–∏–Ω–∫–∞ –≤–∞–≥–∏ ---
  const [isWeightWidgetActive, setIsWeightWidgetActive] = useState(false);
  const [isWeightWidgetPaused, setIsWeightWidgetPaused] = useState(false);
  useEffect(() => {
    // –í–∞–≥–∏ –∞–∫—Ç–∏–≤–Ω—ñ, –ø–æ–∫–∏ –Ω–µ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏/–∫–æ—Ä–æ–±–∫–∏ –∑—ñ–±—Ä–∞–Ω—ñ
    const allCollected = checklistItems.length > 0 && checklistItems.every(item =>
      item.status === 'done' || item.status === 'confirmed' || item.status === 'success'
    );
    setIsWeightWidgetActive(!allCollected && equipmentState.isScaleConnected);
    setIsWeightWidgetPaused(allCollected);
  }, [checklistItems]);

  // --- –ö–µ—Ä—É–≤–∞–Ω–Ω—è polling —Ä–µ–∂–∏–º–∞–º–∏ ---
  const [pollingMode, setPollingMode] = useState<'active' | 'reserve' | 'auto'>('auto');
  const activePollingTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const [lastWeightActivityTime, setLastWeightActivityTime] = useState<number>(Date.now());

  // --- Sound settings state ---
  type OrderSoundEvent = 'pending' | 'success' | 'error';
  const [orderSoundSettings, setOrderSoundSettings] = useState<Record<OrderSoundEvent, string>>({
    pending: 'default',
    success: 'default',
    error: 'default',
  });

  // --- Tolerance settings state ---
  const [toleranceSettings, setToleranceSettings] = useState<ToleranceSettings>({
    type: 'combined',
    percentage: 5,
    absolute: 20,
    maxTolerance: 30,
    minTolerance: 10,
    maxPortions: 12,
    minPortions: 1
  });

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–≤—É–∫—ñ–≤ –∑ API –ø—ñ–¥ —á–∞—Å –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—è
  useEffect(() => {
    fetch('/api/settings/equipment', { credentials: 'include' })
      .then(res => res.json())
      .then(data => {
        if (data?.data?.orderSoundSettings) {
          setOrderSoundSettings((prev) => ({ ...prev, ...data.data.orderSoundSettings }));
        }
      })
      .catch(() => {/* ignore */});
  }, []);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è tolerance –∑ API –ø—ñ–¥ —á–∞—Å –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—è
  useEffect(() => {
    fetch('/api/settings/weight-tolerance/values', { credentials: 'include' })
      .then(res => res.json())
      .then(data => {
        if (data) {
          setToleranceSettings(data);
        }
      })
      .catch(() => {/* ignore */});
  }, []);

  // –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è –∑–≤—É–∫—É —Å—Ç–∞—Ç—É—Å—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  const playOrderStatusSound = (status: string) => {
    // status: 'pending' | 'success' | 'done' | 'error' | ...
    if (['pending', 'success', 'error'].includes(status)) {
      playSoundChoice(orderSoundSettings[status as OrderSoundEvent], status as OrderSoundEvent);
    }
  };

  // --- Sound notification effect ---
  const prevChecklistRef = useRef<OrderChecklistItem[]>([]);
  useEffect(() => {
    const prev = prevChecklistRef.current;
    // Compare previous and current checklistItems
    checklistItems.forEach((item, idx) => {
      const prevItem = prev.find((p) => p.id === item.id);
      if (!prevItem) return;
      if (prevItem.status !== item.status) {
        // Only play for tracked statuses
        if (["pending", "success", "error"].includes(item.status)) {
          playOrderStatusSound(item.status);
        }
      }
    });
    prevChecklistRef.current = checklistItems;
  }, [checklistItems]);

  const [isPrintingTTN, setIsPrintingTTN] = useState(false); // –°—Ç–∞–Ω –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥—Ä—É–∫—É –¢–¢–ù
  const [showPrintTTN, setShowPrintTTN] = useState(false); // –°—Ç–∞–Ω –¥–ª—è –ø–æ–∫–∞–∑—É –∫–Ω–æ–ø–∫–∏ –¥—Ä—É–∫—É –¢–¢–ù
  const [isLoadingNextOrder, setIsLoadingNextOrder] = useState(false); // –°—Ç–∞–Ω –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  const [showNextOrder, setShowNextOrder] = useState(false); // –°—Ç–∞–Ω –¥–ª—è –ø–æ–∫–∞–∑—É –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
  const [nextOrderNumber, setNextOrderNumber] = useState<string | undefined>(); // –ù–æ–º–µ—Ä –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  const [nextOrderDate, setNextOrderDate] = useState<string | undefined>(); // –î–∞—Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  const [showNoMoreOrders, setShowNoMoreOrders] = useState(false); // –°—Ç–∞–Ω –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å
  const [isReadyToShip, setIsReadyToShip] = useState(false); // –°—Ç–∞–Ω –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É id3
  const { isDebugMode } = useDebug(); // –†–µ–∂–∏–º –≤—ñ–¥–ª–∞–¥–∫–∏ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É


  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ externalId
  useEffect(() => {
    if (externalId) {
      fetchOrderDetails(externalId);
    }
  }, [externalId]);


  // –û–Ω–æ–≤–ª—é—î–º–æ title —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  useEffect(() => {
    if (order) {
      const date = order.orderDate ? ` –≤—ñ–¥ ${formatDateOnly(order.orderDate)}` : '';
      const status = order.status ? ` [${getStatusLabel(order.status)}]` : '';
      document.title = `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${order.orderNumber || externalId}${date}${status} | NK Backoffice`;
    }
  }, [order, externalId]);

  // –û–±—Ä–æ–±–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —à—Ç—Ä–∏—Ö-–∫–æ–¥—ñ–≤
  const [lastScannedCode, setLastScannedCode] = useState<string>('');
  const [lastScanTimestamp, setLastScanTimestamp] = useState<number>(() => Date.now() - 3000); // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤ –º–∏–Ω—É–ª–æ–º—É
  const SCAN_COUNTDOWN = 2000; // 2 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è–º–∏ (–ø–æ–≤–∏–Ω–Ω–æ –∑–±—ñ–≥–∞—Ç–∏—Å—è –∑ BarcodeScannerService)

  // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ü—ñ—ó toast —Å–ø–æ–≤—ñ—â–µ–Ω—å
  const lastToastTimestampsRef = useRef<Record<string, number>>({});
  const activeToastsRef = useRef<Set<string>>(new Set()); // –ê–∫—Ç–∏–≤–Ω—ñ toast –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ü—ñ—ó
  const TOAST_COUNTDOWN = 3000; // 3 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏
  const [debugMode, setDebugMode] = useState<boolean>(false); // –†–µ–∂–∏–º –≤—ñ–¥–ª–∞–¥–∫–∏ - –≤–∏–º–∏–∫–∞—î —Ñ—ñ–ª—å—Ç—Ä –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤

  // Ref –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –∫–æ–¥—É (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏)
  const lastProcessedCodeRef = useRef<string>('');
  const lastProcessedTimestampRef = useRef<number>(0);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É toast –∑ –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è–º –¥—É–±–ª—ñ–∫–∞—Ü—ñ—ó
  const showToastWithCountdown = useCallback((options: Parameters<typeof addToast>[0], toastKey: string) => {
    const currentTime = Date.now();
    const lastToastTime = lastToastTimestampsRef.current[toastKey] || 0;
    const timeSinceLastToast = currentTime - lastToastTime;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –≤–∂–µ —Ç–∞–∫–∏–π toast
    if (activeToastsRef.current.has(toastKey)) {
      console.log(`üö´ Toast "${toastKey}" –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ`);
      return;
    }

    // –£ —Ä–µ–∂–∏–º—ñ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è –∞–±–æ —è–∫—â–æ –º–∏–Ω—É–ª–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∞—Å—É - –ø–æ–∫–∞–∑—É—î–º–æ toast
    if (debugMode || timeSinceLastToast >= TOAST_COUNTDOWN) {
      console.log(`üçû –ü–æ–∫–∞–∑—É—î–º–æ toast "${toastKey}" (–ø—Ä–æ–π—à–ª–æ ${timeSinceLastToast}–º—Å)`);

      // –î–æ–¥–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–æ toast, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –≤ HeroUI
      const uniqueId = `${toastKey}-${currentTime}-${Math.random().toString(36).substr(2, 9)}`;
      const toastWithId = {
        ...options,
        id: uniqueId
      };

      // –ü–æ–∑–Ω–∞—á–∞—î–º–æ toast —è–∫ –∞–∫—Ç–∏–≤–Ω–∏–π
      activeToastsRef.current.add(toastKey);

      addToast(toastWithId);
      lastToastTimestampsRef.current[toastKey] = currentTime;

      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–µ—Ä–µ–∑ timeout (—Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ —á–∞—Å –∂–∏—Ç—Ç—è toast)
      const cleanupTimeout = (options.timeout || 10000) + 1000;
      setTimeout(() => {
        activeToastsRef.current.delete(toastKey);
        console.log(`üßπ Toast "${toastKey}" –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö`);
      }, cleanupTimeout);
    } else {
      console.log(`üö´ Toast "${toastKey}" –ø—Ä–æ–ø—É—â–µ–Ω–∏–π (–∑–∞–ª–∏—à–∏–ª–æ—Å—å ${TOAST_COUNTDOWN - timeSinceLastToast}–º—Å)`);
    }
  }, [TOAST_COUNTDOWN, debugMode]);


  // useRef –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –±–µ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
  const checklistItemsRef = useRef<OrderChecklistItem[]>([]);
  const activeBoxIndexRef = useRef<number>(0);

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ ref –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
  useEffect(() => {
    checklistItemsRef.current = checklistItems;
  }, [checklistItems]);

  useEffect(() => {
    activeBoxIndexRef.current = activeBoxIndex;
  }, [activeBoxIndex]);


  // –§—É–Ω–∫—Ü—ñ—è —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
  const resetScanState = useCallback(() => {
    setLastScannedCode('');
    setLastScanTimestamp(Date.now());
    // –°–∫–∏–¥–∞—î–º–æ ref —â–æ–± –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å–∫–∞–Ω –ø—Ä–æ–π—à–æ–≤
    lastProcessedCodeRef.current = '';
    lastProcessedTimestampRef.current = 0;
    console.log('üîÑ [OrderView] –°—Ç–∞–Ω —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ');
    addToast({
      title: "–°—Ç–∞–Ω —Å–∫–∏–Ω—É—Ç–æ",
      description: "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –Ω–æ–≤–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è",
      color: "primary",
      timeout: 2000
    });
  }, []);

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è polling —Ä–µ–∂–∏–º–∞–º–∏
  const startActivePolling = useCallback(() => {
    const activePollingInterval = equipmentState.config?.scale?.activePollingInterval || 1000;
    const activePollingDuration = equipmentState.config?.scale?.activePollingDuration || 30000;
    const reservePollingInterval = equipmentState.config?.scale?.reservePollingInterval || 5000;

    // LoggingService.equipmentLog(`üîÑ [OrderView] –ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling –Ω–∞ ${activePollingDuration / 1000} —Å–µ–∫—É–Ω–¥ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${activePollingInterval}–º—Å`);
    setPollingMode('active');
    setLastWeightActivityTime(Date.now());
    
    // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–∞—É—Ç
    if (activePollingTimeoutRef.current) {
      clearTimeout(activePollingTimeoutRef.current);
      activePollingTimeoutRef.current = null;
    }
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
    activePollingTimeoutRef.current = setTimeout(() => {
      LoggingService.equipmentLog('‚è∞ [OrderView] –¢–∞–π–º–∞—É—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ');
      setPollingMode('reserve');
    }, activePollingDuration);
  }, [equipmentState.config?.scale?.activePollingDuration]);

  const handlePollingModeChange = useCallback((mode: 'active' | 'reserve') => {
    LoggingService.equipmentLog(`üîÑ [OrderView] WeightDisplayWidget –∑–º—ñ–Ω–∏–≤ —Ä–µ–∂–∏–º polling –Ω–∞: ${mode}`);
    setPollingMode(mode);
  }, []);

  // –ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ polling –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  useEffect(() => {
    if (externalId && equipmentState.config?.scale) {
      LoggingService.equipmentLog('üîÑ [OrderView] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - –∑–∞–ø—É—Å–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π polling');
      startActivePolling();
    }

    // –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–π–º–∞—É—Ç—ñ–≤ –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ
    return () => {
      if (activePollingTimeoutRef.current) {
        clearTimeout(activePollingTimeoutRef.current);
        activePollingTimeoutRef.current = null;
      }
    };
  }, [externalId, startActivePolling]);

  // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ WeightDisplayWidget
  const getCumulativeTolerance = useCallback(() => {
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π tolerance
    const currentBoxItems = checklistItems.filter(item =>
      (item.boxIndex || 0) === activeBoxIndex
    );

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ + –æ–∂–∏–¥–∞—é—â–∏–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è (pending)
    let totalPortions = 0;
    currentBoxItems.forEach(item => {
      if (item.type === 'product' && item.status !== 'default') {
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π = quantity (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ) –∏–ª–∏ 1
        totalPortions += item.quantity || 1;
      }
    });

    // console.log('‚öñÔ∏è [OrderView] –ü–æ—Ä—Ü—ñ—ó –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ (+ –æ—á—ñ–∫—É—é—Ç—å –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è):', totalPortions);

    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å –∫–æ—Ä–æ–±–∫–∏
    const boxItem = currentBoxItems.find(item => item.type === 'box');
    const boxWeight = boxItem ? boxItem.expectedWeight : 0;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é tolerance
    return calcCumulativeTolerance(
      boxWeight,
      totalPortions,
      toleranceSettings
    );
  }, [checklistItems, activeBoxIndex, toleranceSettings]);

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –≤–µ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ WeightDisplayWidget
  const getExpectedWeight = useCallback(() => {
    // 1. –ö–æ—Ä–æ–±–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ awaiting_confirmation
    const awaitingBox = checklistItems.find(item =>
      item.type === 'box' &&
      ['awaiting_confirmation', 'error', 'default'].includes(item.status) &&
      (item.boxIndex || 0) === activeBoxIndex
    );
    if (awaitingBox) {
      // LoggingService.equipmentLog(`üì¶ [getExpectedWeight] –ö–æ—Ä–æ–±–∫–∞ awaiting_confirmation: ${awaitingBox.name}, ${awaitingBox.expectedWeight}`);
      return awaitingBox.expectedWeight;
    }

    // 2. –¢–æ–≤–∞—Ä –≤ —Å—Ç–∞—Ç—É—Å–µ pending
    const pendingItem = checklistItems.find(item =>
      item.type === 'product' &&
      ['pending', 'error'].includes(item.status) &&
      (item.boxIndex || 0) === activeBoxIndex
    );

    // 3. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—É—â–µ–π –∫–æ—Ä–æ–±–∫–∏
    const currentBoxItems = checklistItems.filter(item =>
      (item.boxIndex || 0) === activeBoxIndex
    );

    let cumulativeWeight = 0;

    // 4. –í–µ—Å –∫–æ—Ä–æ–±–∫–∏: —Å—á–∏—Ç–∞–µ–º done, confirmed, success –∫–∞–∫ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ
    const boxItem = currentBoxItems.find(item => item.type === 'box');
    if (boxItem && ['done', 'confirmed', 'success'].includes(boxItem.status)) {
      cumulativeWeight += boxItem.expectedWeight;
      // LoggingService.equipmentLog(`üì¶ [getExpectedWeight] –ö–æ—Ä–æ–±–∫–∞ —É—á—Ç–µ–Ω–∞: ${boxItem.name}, ${boxItem.status}, ${boxItem.expectedWeight}`);
    }

    // 5. –í–µ—Å —Ç–æ–≤–∞—Ä–æ–≤: —Å—á–∏—Ç–∞–µ–º done –∏ success –∫–∞–∫ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ
    const doneItems = currentBoxItems.filter(item =>
      item.type === 'product' && (item.status === 'done' || item.status === 'success')
    );
    doneItems.forEach(item => {
      cumulativeWeight += item.expectedWeight;
      // LoggingService.equipmentLog(`üì¶ [getExpectedWeight] –¢–æ–≤–∞—Ä —É—á—Ç–µ–Ω: ${item.name}, ${item.status}, ${item.expectedWeight}`);
    });

    // 6. –ï—Å–ª–∏ –µ—Å—Ç—å pending, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤–µ—Å
    if (pendingItem) {
      cumulativeWeight += pendingItem.expectedWeight;
      // LoggingService.equipmentLog(`üì¶ [getExpectedWeight] –¢–µ–∫—É—â–∏–π pending: ${pendingItem.name}, ${pendingItem.expectedWeight}`);
    } else {
      // 7. –ï—Å–ª–∏ –µ—Å—Ç—å error, –æ–∂–∏–¥–∞–µ–º –∏–º–µ–Ω–Ω–æ –µ–≥–æ (–ù–ï –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É default)
      const errorItem = currentBoxItems.find(item =>
        item.type === 'product' && item.status === 'error'
      );
      if (errorItem) {
        cumulativeWeight += errorItem.expectedWeight;
        // LoggingService.equipmentLog(`üì¶ [getExpectedWeight] –û–∂–∏–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ error: ${errorItem.name}, ${errorItem.expectedWeight}`);
      } else {
        // 8. –ï—Å–ª–∏ –Ω–µ—Ç error/pending, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π default
        const nextItem = currentBoxItems.find(item =>
          item.type === 'product' && item.status === 'default'
        );
        if (nextItem) {
          cumulativeWeight += nextItem.expectedWeight;
          // LoggingService.equipmentLog(`üì¶ [getExpectedWeight] –°–ª–µ–¥—É—é—â–∏–π default: ${nextItem.name}, ${nextItem.expectedWeight}`);
        }
      }
    }

    // 8. –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (currentBoxItems.length > 0) {
      // LoggingService.equipmentLog(`üì¶ [getExpectedWeight] –ò—Ç–æ–≥: ${cumulativeWeight}`);
      return cumulativeWeight;
    } else {
      // LoggingService.equipmentLog('üì¶ [getExpectedWeight] –í –∫–æ—Ä–æ–±–∫–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤');
      return null;
    }
  }, [checklistItems, activeBoxIndex]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞ –æ—Ç WeightDisplayWidget
  const handleWeightChange = useCallback((weight: number | null) => {
    // LoggingService.equipmentLog(`üì¶ ‚öñÔ∏è [OrderView] –ü–æ–ª—É—á–µ–Ω –≤–µ—Å –æ—Ç WeightDisplayWidget: ${weight}`);
    
    if (weight === null) {
      // LoggingService.equipmentLog('üì¶ ‚öñÔ∏è [OrderView] –í–µ—Å null, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    setChecklistItems(prevItems => {
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞
      const calculateExpectedCumulativeWeight = (currentItem: any) => {
        const currentBoxItems = prevItems.filter(item => 
          (item.boxIndex || 0) === activeBoxIndex
        );

        // –°—É–º–º–∏—Ä—É–µ–º –≤–µ—Å –∫–æ—Ä–æ–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) + –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ done + —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä
        let cumulativeWeight = 0;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å –∫–æ—Ä–æ–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
        const boxItem = currentBoxItems.find(item => item.type === 'box');
        if (boxItem && (boxItem.status === 'done' || boxItem.status === 'confirmed' || boxItem.status === 'success')) {
          cumulativeWeight += boxItem.expectedWeight;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ done
        const doneItems = currentBoxItems.filter(item => 
          item.type === 'product' && item.status === 'done'
        );
        doneItems.forEach(item => {
          cumulativeWeight += item.expectedWeight;
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        if (currentItem) {
          cumulativeWeight += currentItem.expectedWeight;
        }

        return cumulativeWeight;
      };

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–æ–±–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'awaiting_confirmation'
      const awaitingBox = prevItems.find(item => 
        item.status === 'awaiting_confirmation' && 
        item.type === 'box' && 
        (item.boxIndex || 0) === activeBoxIndex
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ—Ä–æ–±–∫–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö - –µ—Å–ª–∏ –¥–∞, —Ç–æ –Ω–µ –≤–∑–≤–µ—à–∏–≤–∞–µ–º –∫–æ—Ä–æ–±–∫—É
      const completedBox = prevItems.find(item => 
        (item.status === 'done' || item.status === 'success' || item.status === 'confirmed') && 
        item.type === 'box' && 
        (item.boxIndex || 0) === activeBoxIndex
      );

      // console.log('üîç [OrderView] –ü–æ–∏—Å–∫ –∫–æ—Ä–æ–±–∫–∏ –¥–ª—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è:', {
      //   awaitingBox: awaitingBox?.name || '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      //   awaitingBoxStatus: awaitingBox?.status,
      //   completedBox: completedBox?.name || '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 
      //   completedBoxStatus: completedBox?.status,
      //   activeBoxIndex
      // });

      if (awaitingBox && !completedBox) {
        // console.log('üì¶ [OrderView] –í–∑–≤–µ—à–∏–≤–∞–µ–º –∫–æ—Ä–æ–±–∫—É:', awaitingBox.name);
        
        // –î–ª—è –∫–æ—Ä–æ–±–∫–∏ –æ–∂–∏–¥–∞–µ–º—ã–π –≤–µ—Å - —ç—Ç–æ —Ç–æ–ª—å–∫–æ –≤–µ—Å –∫–æ—Ä–æ–±–∫–∏
        const expectedWeight = awaitingBox.expectedWeight;
        const tolerance = calcBoxTolerance(expectedWeight); // 10% –∏–ª–∏ –º–∏–Ω–∏–º—É–º 10–≥
        const minWeight = expectedWeight - tolerance / 1000; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≥—Ä–∞–º–º—ã –≤ –∫–≥
        const maxWeight = expectedWeight + tolerance / 1000; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≥—Ä–∞–º–º—ã –≤ –∫–≥

        const isWeightValid = weight >= minWeight && weight <= maxWeight;

        // console.log('üì¶ [OrderView] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–∞ –∫–æ—Ä–æ–±–∫–∏:', {
        //   expected: expectedWeight,
        //   received: weight,
        //   tolerance: tolerance,
        //   min: minWeight,
        //   max: maxWeight,
        //   isValid: isWeightValid
        // });

        // –ï—Å–ª–∏ –≤–µ—Å 0, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞
        if (weight === 0) {
          // console.log('üì¶ [OrderView] –í–µ—Å –∫–æ—Ä–æ–±–∫–∏ = 0, –∂–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞');
          return prevItems;
        }

        if (isWeightValid) {
          // –ö–æ—Ä–æ–±–∫–∞ –≤–∑–≤–µ—à–µ–Ω–∞ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ success, –∑–∞—Ç–µ–º –≤ done
          // console.log('‚úÖ [OrderView] –ö–æ—Ä–æ–±–∫–∞ –≤–∑–≤–µ—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          
          const updatedItems = prevItems.map(item => {
            if (item.id === awaitingBox.id) {
              // console.log('üîÑ [OrderView] –ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å success:', awaitingBox.name);
              return { ...item, status: 'success' as const };
            }
            return item;
          });

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
          addToast({
            title: "–ö–æ—Ä–æ–±–∫–∞ –∑–≤–∞–∂–µ–Ω–∞",
            description: `${awaitingBox.name}: ${weight.toFixed(3)} –∫–≥ (–æ—á—ñ–∫—É–≤–∞–Ω–æ: ${expectedWeight.toFixed(3)} –∫–≥)`,
            color: "success",
            timeout: 3000
          });

          // –ß–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ done
          setTimeout(() => {
            // console.log('üîÑ [OrderView] –ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å done:', awaitingBox.name);
            setChecklistItems(prevItems =>
              prevItems.map(item => {
                if (item.id === awaitingBox.id) {
                  return { ...item, status: 'done' as const };
                }
                return item;
              })
            );

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–æ–±–∫–µ
            setChecklistItems(prevItems => {
              const firstProduct = prevItems.find(item => 
                item.type === 'product' && 
                (item.boxIndex || 0) === activeBoxIndex && 
                item.status === 'default'
              );

              if (firstProduct) {
                // console.log('üîÑ [OrderView] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä:', firstProduct.name);
                return prevItems.map(item => {
                  if (item.id === firstProduct.id) {
                    return { ...item, status: 'pending' as const };
                  }
                  return item;
                });
              }
              return prevItems;
            });
          }, 1500);

          return updatedItems;
        } else {
          // –í–µ—Å –∫–æ—Ä–æ–±–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ error, –∑–∞—Ç–µ–º –≤ awaiting_confirmation
          // console.log('‚ùå [OrderView] –í–µ—Å –∫–æ—Ä–æ–±–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É');
          
          const updatedItems = prevItems.map(item => {
            if (item.id === awaitingBox.id) {
              return { ...item, status: 'error' as const };
            }
            return item;
          });

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          ToastService.show({
            title: `${awaitingBox.name}: –ü–æ—Ç–æ—á–Ω–∞ –≤–∞–≥–∞ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–∞!`,
            description: `–û—á—ñ–∫—É–≤–∞–Ω–æ: ${expectedWeight.toFixed(3)}–∫–≥ ¬± ${tolerance.toFixed(0)}–≥. –§–∞–∫—Ç–∏—á–Ω–∞ –≤–∞–≥–∞: ${weight.toFixed(3)}–∫–≥`,
            color: "danger",
            timeout: 5000
          });

          // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ awaiting_confirmation –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è
          setTimeout(() => {
            // console.log('üîÑ [OrderView] –ö–æ—Ä–æ–±–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å awaiting_confirmation:', awaitingBox.name);
            setChecklistItems(prevItems =>
              prevItems.map(item => {
                if (item.id === awaitingBox.id) {
                  return { ...item, status: 'awaiting_confirmation' as const };
                }
                return item;
              })
            );
          }, 2000);

          return updatedItems;
        }
      }

      // –ï—Å–ª–∏ –∫–æ—Ä–æ–±–∫–∞ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è, –∏—â–µ–º —Ç–æ–≤–∞—Ä —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'
      const pendingItem = prevItems.find(item => 
        item.status === 'pending' && 
        item.type === 'product' && 
        (item.boxIndex || 0) === activeBoxIndex
      );

      if (!pendingItem) {
        console.log('‚öñÔ∏è [OrderView] –ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ pending –¥–ª—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è');
        console.log('üîç [OrderView] –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–æ–±–∫–µ:', 
          prevItems
            .filter(item => (item.boxIndex || 0) === activeBoxIndex)
            .map(item => ({ name: item.name, type: item.type, status: item.status }))
        );
        return prevItems;
      }

      // –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å
      const expectedCumulativeWeight = calculateExpectedCumulativeWeight(pendingItem);

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π tolerance
      const currentBoxItems = prevItems.filter(item =>
        (item.boxIndex || 0) === activeBoxIndex
      );

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
      let totalPortions = 0;

      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —É–∂–µ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏
      currentBoxItems.forEach(item => {
        if (item.type === 'product' && ['done', 'success', 'confirmed'].includes(item.status)) {
          totalPortions += item.quantity || 1;
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –º—ã –≤–∑–≤–µ—à–∏–≤–∞–µ–º
      totalPortions += pendingItem.quantity || 1;

      // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å –∫–æ—Ä–æ–±–∫–∏
      const boxItem = currentBoxItems.find(item => item.type === 'box');
      const boxWeight = boxItem && (boxItem.status === 'done' || boxItem.status === 'confirmed' || boxItem.status === 'success')
        ? boxItem.expectedWeight
        : 0;

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é tolerance
      const cumulativeTolerance = calcCumulativeTolerance(
        boxWeight,
        totalPortions,
        toleranceSettings
      );

      // console.log('‚öñÔ∏è [OrderView] –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä—Ü—ñ–π (–ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É):', totalPortions);
      // console.log('‚öñÔ∏è [OrderView] –ù–∞–∫–æ–ø–∏—á–µ–Ω–∞ –ø–æ—Ö–∏–±–∫–∞:', cumulativeTolerance);

      const minWeight = expectedCumulativeWeight - cumulativeTolerance / 1000; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≥—Ä–∞–º–º—ã –≤ –∫–≥
      const maxWeight = expectedCumulativeWeight + cumulativeTolerance / 1000; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≥—Ä–∞–º–º—ã –≤ –∫–≥

      const isWeightValid = weight >= minWeight && weight <= maxWeight;

      // console.log('‚öñÔ∏è [OrderView] –í–∑–≤–µ—à–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä:', pendingItem.name);
      // console.log('‚öñÔ∏è [OrderView] –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–∞:', {
      //   currentItem: pendingItem.name,
      //   currentItemWeight: pendingItem.expectedWeight,
      //   expectedCumulative: expectedCumulativeWeight,
      //   received: weight,
      //   tolerance: tolerance,
      //   min: minWeight,
      //   max: maxWeight,
      //   isValid: isWeightValid
      // });

      if (isWeightValid) {
        // –í–µ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ success, –∑–∞—Ç–µ–º –≤ done
        // console.log('‚úÖ [OrderView] –í–µ—Å —Ç–æ–≤–∞—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É');
        
        const updatedItems = prevItems.map(item => {
          if (item.id === pendingItem.id) {
            return { ...item, status: 'success' as const };
          }
          return item;
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        addToast({
          title: "–í–∞–≥–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î",
          description: `${pendingItem.name}: ${weight.toFixed(3)} –∫–≥ (–æ—á—ñ–∫—É–≤–∞–Ω–æ: ${expectedCumulativeWeight.toFixed(3)} –∫–≥)`,
          color: "success",
          timeout: 3000
        });

        // –ß–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ done
        setTimeout(() => {
          setChecklistItems(prevItems =>
            prevItems.map(item => {
              if (item.id === pendingItem.id) {
                return { ...item, status: 'done' as const };
              }
              return item;
            })
          );

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–æ–±–∫–µ
          setChecklistItems(prevItems => {
            const nextItem = prevItems.find(item => 
              item.type === 'product' && 
              (item.boxIndex || 0) === activeBoxIndex && 
              item.status === 'default'
            );

            if (nextItem) {
              console.log('üîÑ [OrderView] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä:', nextItem.name);
              return prevItems.map(item => {
                if (item.id === nextItem.id) {
                  return { ...item, status: 'pending' as const };
                }
                return item;
              });
            }
            return prevItems;
          });
        }, 1500);

        return updatedItems;
      } else {
        // –í–µ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ error
        console.log('‚ùå [OrderView] –í–µ—Å —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É');
        
        const updatedItems = prevItems.map(item => {
          if (item.id === pendingItem.id) {
            return { ...item, status: 'error' as const };
          }
          return item;
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        ToastService.show({
          title: "–í–∞–≥–∞ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î",
          description: `${pendingItem.name}: ${weight.toFixed(3)}–∫–≥ (–æ—á—ñ–∫—É–≤–∞–Ω–æ: ${expectedCumulativeWeight.toFixed(3)} ¬± ${(cumulativeTolerance).toFixed(0)}–≥)`,
          color: "danger",
          timeout: 5000
        });

        // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ pending –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è
        setTimeout(() => {
          console.log('üîÑ [OrderView] –¢–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å pending:', pendingItem.name);
          setChecklistItems(prevItems =>
            prevItems.map(item => {
              if (item.id === pendingItem.id) {
                return { ...item, status: 'pending' as const };
              }
              return item;
            })
          );
        }, 2000);

        return updatedItems;
      }
    });
  }, [activeBoxIndex, addToast]);

  const { user } = useAuth();

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ –¢–¢–ù
  const handlePrintTTN = useCallback(async () => {
    if (!order?.ttn || !order?.provider) {
      alert('–¢–¢–ù –∞–±–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
      return;
    }

    if (isPrintingTTN) {
      return;
    }

    try {
      setIsPrintingTTN(true);

      const canUseDirectPrint = equipmentState.config?.printer?.enabled && equipmentState.config?.printer?.name;

      await shippingClientService.printTTN({
        ttn: order.ttn,
        provider: order.provider as 'novaposhta' | 'ukrposhta',
        printerName: canUseDirectPrint ? equipmentState.config.printer.name : undefined
      });

      setTimeout(() => {
        setShowNextOrder(true);
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
        fetchNextOrderNumber();
      }, 1000);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ –¢–¢–ù:', error);
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
      alert(`–ü–æ–º–∏–ª–∫–∞ –¥—Ä—É–∫—É –¢–¢–ù: ${errorMessage}`);
    } finally {
      setIsPrintingTTN(false);
    }
  }, [order?.ttn, order?.provider, isPrintingTTN, equipmentState.config]);

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–∏—Å–∫–∞
  const getNextOrder = useCallback(async (filterByStatus: boolean = true) => {
    if (!externalId) return null;

    try {
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
      const response = await apiCall('/api/orders?limit=100&sortBy=orderDate&sortOrder=desc');
      
      if (!response.ok) {
        console.warn('‚ö†Ô∏è [GET NEXT ORDER] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤');
        return null;
      }

      const ordersData = await response.json();
      let orders = ordersData.data;
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É '2' (–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ), –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
      if (filterByStatus) {
        const originalOrders = orders.length;
        orders = orders.filter((order: any) => order.status === '2');
      }
      
      if (orders.length === 0) {
        console.warn('‚ö†Ô∏è [GET NEXT ORDER] –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞');
        return null;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
      const currentOrderIndex = orders.findIndex((order: any) => order.externalId === externalId);
      
      if (currentOrderIndex === -1) {
        console.warn('‚ö†Ô∏è [GET NEXT ORDER] –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ');
        console.warn('‚ö†Ô∏è [GET NEXT ORDER] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:', orders.map((o: any) => ({ id: o.externalId, status: o.status, number: o.orderNumber, date: o.orderDate })));
        return null;
      }

      // –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞:
      // 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ –¥–∞—Ç–µ (–±–æ–ª–µ–µ –Ω–æ–≤—ã–π)
      // 2. –ï—Å–ª–∏ –Ω–µ—Ç, –∏—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ –¥–∞—Ç–µ (–±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–π)
      let nextOrder = null;
      let searchType = '';

      // 1. –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ –¥–∞—Ç–µ (–±–æ–ª–µ–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑)
      if (currentOrderIndex > 0) {
        nextOrder = orders[currentOrderIndex - 1]; // –ë–æ–ª–µ–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ (–∏–Ω–¥–µ–∫—Å –º–µ–Ω—å—à–µ)
        searchType = '—Å–ª–µ–¥—É—é—â–∏–π –ø–æ –¥–∞—Ç–µ (–±–æ–ª–µ–µ –Ω–æ–≤—ã–π)';
      } else {
        // 2. –ï—Å–ª–∏ –Ω–µ—Ç –±–æ–ª–µ–µ –Ω–æ–≤—ã—Ö, –∏—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ –¥–∞—Ç–µ (–±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–π)
        if (currentOrderIndex < orders.length - 1) {
          nextOrder = orders[currentOrderIndex + 1]; // –ë–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–π –∑–∞–∫–∞–∑ (–∏–Ω–¥–µ–∫—Å –±–æ–ª—å—à–µ)
          searchType = '–ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ –¥–∞—Ç–µ (–±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–π)';
        } else {
          return null;
        }
      }
      return {
        ...nextOrder,
        formattedDate: nextOrder.orderDate ? new Date(nextOrder.orderDate).toLocaleDateString('uk-UA') : null
      };
    } catch (error) {
      console.error('‚ùå [GET NEXT ORDER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞:', error);
      return null;
    }
  }, [externalId, apiCall]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É
  const handleNextOrder = useCallback(async () => {
    if (!externalId || isLoadingNextOrder) {
      return;
    }

    try {
      setIsLoadingNextOrder(true);

      // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É '2' (–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ)
      const nextOrder = await getNextOrder(true); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É '2'
      
      if (!nextOrder) {
        throw new Error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 2 (–≤ –æ–±—Ä–æ–±—Ü—ñ)');
      }
      
      // 2. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞ "id3" (–ì–æ—Ç–æ–≤–µ –¥–æ –≤–∏–¥–ø—Ä–∞–≤–∫–∏)
      const statusPayload = { status: 'id3' };

      const statusResponse = await apiCall(`/api/orders/${externalId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(statusPayload),
      });


      if (!statusResponse.ok) {
        const errorText = await statusResponse.text();
        console.warn('‚ö†Ô∏è [NEXT ORDER] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ SalesDrive:', errorText);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        const statusData = await statusResponse.json();
        if (statusData.success) {
          if (statusData.salesDriveUpdated) {
            console.log('‚úÖ [NEXT ORDER] –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ SalesDrive –Ω–∞ "id3" (–ì–æ—Ç–æ–≤–µ –¥–æ –≤–∏–¥–ø—Ä–∞–≤–∫–∏)');
          } else {
            console.warn('‚ö†Ô∏è [NEXT ORDER] –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤ SalesDrive');
          }
        } else {
          console.warn('‚ö†Ô∏è [NEXT ORDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', statusData.error);
        }
      }

      // 3. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const nextOrderUrl = `/orders/${nextOrder.externalId}`;
      navigate(nextOrderUrl);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
      setShowNextOrder(false);
      setNextOrderNumber(undefined);
      setNextOrderDate(undefined);
      setShowNoMoreOrders(false);

    } catch (error) {
      console.error('‚ùå [NEXT ORDER] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É:', error);
      console.error('‚ùå [NEXT ORDER] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        stack: error instanceof Error ? error.stack : undefined
      });
      alert(`–ü–æ–º–∏–ª–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`);
    } finally {
      setIsLoadingNextOrder(false);
    }
  }, [externalId, isLoadingNextOrder, navigate, getNextOrder]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
  const fetchNextOrderNumber = useCallback(async () => {
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É '2' (–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ)
    const nextOrder = await getNextOrder(true);
    if (nextOrder) {
      setNextOrderNumber(nextOrder.orderNumber);
      setNextOrderDate(nextOrder.formattedDate);
      setShowNoMoreOrders(false); // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–∫–∞–∑–æ–≤
    } else {
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const nextOrderWithoutFilter = await getNextOrder(false);
      if (nextOrderWithoutFilter) {
        // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –∑–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É
        setShowNoMoreOrders(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
      } else {
        setShowNoMoreOrders(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–∫–∞–∑–æ–≤
      }
    }
  }, [getNextOrder]);

  // useEffect(() => {
  //   if (externalId) {
  //     fetchOrderDetails(externalId);
  //   }
  // }, [externalId]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ awaiting_confirmation –¥–ª—è –∫–æ—Ä–æ–±–∫–∏
  const setBoxAwaitingConfirmation = useCallback((boxId: string) => {
    setChecklistItems(prevItems =>
      prevItems.map(item => {
        if (item.id === boxId && item.type === 'box') {
          return { ...item, status: 'awaiting_confirmation' as const };
        }
        return item;
      })
    );

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π polling –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ awaiting_confirmation –¥–ª—è –∫–æ—Ä–æ–±–∫–∏
    startActivePolling(); 
  }, [startActivePolling]);





  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç checklistItems –∏ activeBoxIndex)
  const handleBarcodeScan = useCallback((scannedCode: string) => {
    const currentTime = Date.now();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –∫–æ–¥
    const isAlreadyProcessed = scannedCode === lastProcessedCodeRef.current &&
                               currentTime - lastProcessedTimestampRef.current < SCAN_COUNTDOWN;

    if (isAlreadyProcessed && !debugMode) {
      console.log('‚è≥ [OrderView] –ö–æ–¥ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–¥–∞–≤–Ω–æ:', scannedCode);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º ref
    lastProcessedCodeRef.current = scannedCode;
    lastProcessedTimestampRef.current = currentTime;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
    setLastScanTimestamp(currentTime);
    setLastScannedCode(scannedCode);

    console.log('üì± [OrderView] –ù–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', scannedCode);

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ref
    const currentChecklistItems = checklistItemsRef.current;
    const currentActiveBoxIndex = activeBoxIndexRef.current;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∑–≤–µ—à–µ–Ω–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è –∫–æ—Ä–æ–±–∫–∞
    const currentBox = currentChecklistItems.find(item =>
      item.type === 'box' && (item.boxIndex || 0) === currentActiveBoxIndex
    );
    const isCurrentBoxConfirmed = currentBox?.status === 'confirmed' || currentBox?.status === 'done';

    // –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ—Ä–æ–±–∫–∏
    console.log('üîç [OrderView] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ—Ä–æ–±–∫–∏:', {
      activeBoxIndex: currentActiveBoxIndex,
      currentBoxFound: !!currentBox,
      currentBoxStatus: currentBox?.status,
      currentBoxName: currentBox?.name,
      isCurrentBoxConfirmed,
      checklistItemsCount: currentChecklistItems.length,
      boxItems: currentChecklistItems.filter(item => item.type === 'box').map(item => ({
        name: item.name,
        status: item.status,
        boxIndex: item.boxIndex
      }))
    });

    // –ï—Å–ª–∏ –∫–æ—Ä–æ–±–∫–∞ –Ω–µ –≤–∑–≤–µ—à–µ–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    // –ö–æ—Ä–æ–±–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π –µ—Å–ª–∏ –æ–Ω–∞ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'done' –∏–ª–∏ 'confirmed'
    const isBoxWeighed = currentBox?.status === 'confirmed' || currentBox?.status === 'done';

    if (!isBoxWeighed) {
      console.log('üö´ [OrderView] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –∫–æ—Ä–æ–±–∫–∞ –Ω–µ –≤–∑–≤–µ—à–µ–Ω–∞');
      showToastWithCountdown({
        title: "–°–ø–æ—á–∞—Ç–∫—É –∑–≤–∞–∂—Ç–µ –∫–æ—Ä–æ–±–∫—É",
        description: "–ù–µ –º–æ–∂–Ω–∞ —Å–∫–∞–Ω—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏, –ø–æ–∫–∏ –∫–æ—Ä–æ–±–∫–∞ –Ω–µ –±—É–¥–µ –∑–≤–∞–∂–µ–Ω–∞",
        color: "warning",
        timeout: 3000
      }, "box-not-weighed");
      return;
    }

    // –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ SKU
    const foundItem = currentChecklistItems.find(item => item.sku === scannedCode);

    if (foundItem) {
      console.log('‚úÖ [OrderView] –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä:', foundItem.name);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–º–µ–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ —Å—Ç–∞—Ç—É—Å 'done' - –ó–ê–ü–†–ï–©–ê–ï–ú —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      if (foundItem.status === 'done') {
        console.log('üö´ [OrderView] –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ —Å—Ç–∞—Ç—É—Å–µ done:', foundItem.name);
        showToastWithCountdown({
          title: "–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ",
          description: `${foundItem.name} –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ`,
          color: "danger",
          timeout: 3000
        }, `scan-forbidden-${foundItem.id}`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'awaiting_confirmation' (–∫–æ—Ä–æ–±–∫–∏)
      if (foundItem.type === 'box' && foundItem.status !== 'awaiting_confirmation') {
        console.log('üö´ [OrderView] –ö–æ—Ä–æ–±–∫–∏ –Ω–µ —Å–∫–∞–Ω–∏—Ä—É—é—Ç—Å—è, –∫—Ä–æ–º–µ awaiting_confirmation:', foundItem.name);
        showToastWithCountdown({
          title: "–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ",
          description: "–ö–æ—Ä–æ–±–∫–∏ –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞–Ω—É–≤–∞—Ç–∏",
          color: "warning",
          timeout: 3000
        }, `box-scan-forbidden-${foundItem.id}`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ—Ä–æ–±–∫–µ
      if ((foundItem.boxIndex || 0) !== currentActiveBoxIndex) {
        console.log('üö´ [OrderView] –¢–æ–≤–∞—Ä –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ—Ä–æ–±–∫–µ:', foundItem.name);
        showToastWithCountdown({
          title: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫–æ—Ä–æ–±–∫–∞",
          description: `${foundItem.name} –Ω–µ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –∫–æ—Ä–æ–±—Ü—ñ`,
          color: "warning",
          timeout: 3000
        }, `wrong-box-${foundItem.id}`);
        return;
      }

      // –¢–û–ß–ù–û –¢–ê–ö–ê–Ø –ñ–ï –õ–û–ì–ò–ö–ê –ö–ê–ö –í handleItemClick:
      // 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'pending' –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      setChecklistItems(prevItems =>
        prevItems.map(item => {
          if (item.id === foundItem.id) {
            return { ...item, status: 'pending' as const };
          }
          // 2. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ default —Ç–æ–ª—å–∫–æ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ—Ä–æ–±–∫–µ
          if (item.status === 'pending' && (item.boxIndex || 0) === currentActiveBoxIndex) {
            return { ...item, status: 'default' as const };
          }
          return item;
        })
      );
      

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      addToast({
        title: "–®—Ç—Ä–∏—Ö-–∫–æ–¥ –≤—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω–æ",
        description: `${foundItem.name} –≤–∏–±—Ä–∞–Ω–æ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—ó`,
        color: "success",
        timeout: 2000
      });

    } else {
      console.log('‚ùå [OrderView] –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', scannedCode);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      showToastWithCountdown({
        title: "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
        description: `–®—Ç—Ä–∏—Ö-–∫–æ–¥ ${scannedCode} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∂–æ–¥–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É`,
        color: "warning",
        timeout: 3000
      }, `item-not-found-${scannedCode}`);
    }
  }, [debugMode, SCAN_COUNTDOWN, showToastWithCountdown, addToast, setLastScanTimestamp, setLastScannedCode]);

  // useEffect —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ lastBarcode
  useEffect(() => {
    if (equipmentState.lastBarcode) {
      handleBarcodeScan(equipmentState.lastBarcode.code);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastBarcode –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
      equipmentActions.resetScanner();
    }
  }, [equipmentState.lastBarcode, handleBarcodeScan, equipmentState.isScaleConnected]); // –£–±–∏—Ä–∞–µ–º equipmentActions

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ä–æ–±–æ–∫
  const handleBoxesChange = useCallback((boxes: any[], totalWeight: number, boxesInfo?: any) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏ –∏ —Ç–æ–≤–∞—Ä—ã
    if (!boxes || boxes.length === 0 || expandedItems.length === 0) {
      console.log('üì¶ OrderView: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–æ–±–æ–∫ - –Ω–µ—Ç –∫–æ—Ä–æ–±–æ–∫ –∏–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤');
      return;
    }

    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–æ–±–∫–∞—Ö
    let updatedBoxes = boxes;
    if (boxesInfo) {
      updatedBoxes = boxes.map((box, index) => ({
        ...box,
        boxIndex: index,
        portionsRange: boxesInfo.boxPortionsRanges[index],
        portionsPerBox: boxesInfo.portionsPerBox
      }));
    }

    setSelectedBoxes(updatedBoxes);
    setBoxesTotalWeight(totalWeight);
    setActiveBoxIndex(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ—Ä–æ–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º expandedItems –∫–∞–∫ –±–∞–∑–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∫–æ—Ä–æ–±–æ–∫
    const itemsWithoutBoxes = expandedItems.filter(item => item.type !== 'box');

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    const combinedItems = combineBoxesWithItems(updatedBoxes, itemsWithoutBoxes, isReadyToShip);

    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å—ã done –∫–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º
    const finalItems = isReadyToShip ? combinedItems.map(item => {
      if (item.type === 'product') {
        console.log(`üì¶ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å done –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–æ–±–æ–∫: ${item.name}`);
        return { ...item, status: 'done' as const };
      }
      return item;
    }) : combinedItems;

    // console.log('üì¶ –§–∏–Ω–∞–ª—å–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–æ–±–æ–∫:', finalItems.map(item => `${item.name} (${item.type}): ${item.status}`));
    setChecklistItems(finalItems);

  }, [expandedItems, isReadyToShip, equipmentState.isScaleConnected]); // –£–±–∏—Ä–∞–µ–º equipmentActions

  const fetchOrderDetails = async (id: string) => {
    try {
      setLoading(true);
      setChecklistItems([]);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
      setShowNextOrder(false);
      setNextOrderNumber(undefined);
      setNextOrderDate(undefined);
      setShowNoMoreOrders(false);
      const response = await apiCall(`/api/orders/${id}`);
      const data = await response.json();
      
      if (data.success) {
        setOrder(data.data);
        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞–±–æ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
        setExpandingSets(true);
        try {
          const expanded = await expandProductSets(data.data.items, apiCall);
          setExpandedItems(expanded);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ - –µ—Å–ª–∏ id3 (–ù–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É), –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —Å–æ–±—Ä–∞–Ω–Ω–æ–µ
          const orderIsReadyToShip = data.data.status === '3' || data.data.status === 'id3';
          setIsReadyToShip(orderIsReadyToShip);
          let processedItems = expanded;

          if (orderIsReadyToShip) {
            console.log('üì¶ –ó–∞–∫–∞–∑ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å id3 (–ù–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É) - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã–π');
            console.log('üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', expanded.length);
            processedItems = expanded.map(item => {
              console.log(`üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å done –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${item.name} (${item.type})`);
              return {
                ...item,
                status: 'done' as const
              };
            });
            console.log('üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', processedItems.length);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—á–∞—Ç–∏ –¢–¢–ù –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º id3
            setShowPrintTTN(true);
          }

          // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö —Å —Ç–æ–≤–∞—Ä–∞–º–∏
          if (selectedBoxes.length > 0) {
            const itemsWithoutBoxes = processedItems.filter(item => item.type !== 'box');
            const combinedItems = combineBoxesWithItems(selectedBoxes, itemsWithoutBoxes, orderIsReadyToShip);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ combinedItems —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (combinedItems && combinedItems.length > 0) {
              setChecklistItems(combinedItems);

            } else {
              console.log('üì¶ OrderView: combinedItems –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º processedItems');
              setChecklistItems(processedItems);
            }
          } else {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º checklistItems —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
            setChecklistItems(processedItems);
          }
        } catch (error) {
          console.error('Error expanding product sets:', error);
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
          const isReadyToShipFallback = data.data.status === '3' || data.data.status === 'id3';
          const fallbackItems = data.data.items.map((item: any, index: number) => ({
            id: (index + 1).toString(),
            name: item.productName,
            quantity: item.quantity,
            expectedWeight: item.quantity * 0.33, // Fallback –¥–ª—è –æ—à–∏–±–∫–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è (330–≥)
            status: isReadyToShipFallback ? 'done' : 'default' as const,
            type: 'product'
          }));

          setExpandedItems(fallbackItems);

          // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö —Å —Ç–æ–≤–∞—Ä–∞–º–∏
          if (selectedBoxes.length > 0) {
            const itemsWithoutBoxes = fallbackItems.filter(item => item.type !== 'box');
            const combinedItems = combineBoxesWithItems(selectedBoxes, itemsWithoutBoxes, isReadyToShipFallback);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ combinedItems —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (combinedItems && combinedItems.length > 0) {
              setChecklistItems(combinedItems);

            } else {
              console.log('üì¶ OrderView: combinedItems –ø—É—Å—Ç–æ–π (fallback), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallbackItems');
              setChecklistItems(fallbackItems);
            }
          } else {
            setChecklistItems(fallbackItems);
          }

          if (isReadyToShipFallback) {
            setShowPrintTTN(true);
          }
        } finally {
          setExpandingSets(false);
        }
      } else {
        console.error('Failed to fetch order:', data.error);
      }
    } catch (error) {
      console.error('Error fetching order details:', error);
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
  const totalPortions = useMemo(() =>
    expandedItems.reduce((sum, item) => sum + item.quantity, 0),
    [expandedItems]
  );


  const orderForAssembly: OrderForAssembly = {
    id: externalId,
    shipping: {
      carrier: order?.shippingMethod || '–ù–æ–≤–∞ –ü–æ—à—Ç–∞',
      trackingId: order?.ttn || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
      provider: order?.provider || 'novaposhta', // default provider
    },
    items: expandedItems,
    totalPortions: totalPortions,
  };

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–±–æ—Ä–∞—Ö
  const analyzeOrder = () => {
    if (!order?.items) return null;
    
    const analysis = {
      totalItems: order.items.length,
      expandedItems: expandedItems.length,
      hasSets: false,
      setsInfo: [] as Array<{name: string, quantity: number, sku: string}>,
      individualItems: [] as Array<{name: string, quantity: number, sku: string}>
    };
    
    order.items.forEach((item: any) => {
      // –ó–¥–µ—Å—å –º—ã –Ω–µ –º–æ–∂–µ–º —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–±–æ—Ä–æ–º,
      // —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      // –ù–æ –º–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (item.productName.toLowerCase().includes('–Ω–∞–±—ñ—Ä') || 
          item.productName.toLowerCase().includes('–∫–æ–º–ø–ª–µ–∫—Ç') ||
          item.productName.toLowerCase().includes('(–∫)')) {
        analysis.hasSets = true;
        analysis.setsInfo.push({
          name: item.productName,
          quantity: item.quantity,
          sku: item.sku || 'N/A'
        });
      } else {
        analysis.individualItems.push({
          name: item.productName,
          quantity: item.quantity,
          sku: item.sku || 'N/A'
        });
      }
    });
    
    return analysis;
  };

  const orderAnalysis = analyzeOrder();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
  const hasItems = order?.items && order.items.length > 0;

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!order) {
    return (
      <div className="text-center text-gray-500">
        –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <h1 className="text-primary font-inter text-3xl font-semibold leading-[100%] tracking-[-0.64px] h-10 flex items-center gap-4">
        <Button
          color="secondary"
          variant="flat"
          className="text-neutral-500 min-w-fit"
          onPress={() => navigate("/orders")}
        >
          <DynamicIcon name="arrow-left" size={20} />
        </Button>
        <span>
          –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.orderNumber || externalId}
          {order.orderDate && (
            <span className="font-normal text-xl ml-3 text-gray-500">
              –≤—ñ–¥ {formatDateOnly(order.orderDate)}
            </span>
          )}
        </span>
        {order.status && (
          <Chip
            size="md"
            variant="flat"
            classNames={{
              base: getStatusColor(order.status) + " shadow-container",
              content: "font-semibold",
            }}
          >
            {getStatusLabel(order.status)}
          </Chip>
        )}
      </h1>
      {/* –ë–ª–æ–∫ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ */}
      <div className="flex flex-col xl:flex-row items-start gap-8 w-full">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ß–µ–∫-–ª–∏—Å—Ç –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ */}
        <div className="w-full max-w-5xl">
          {/* –ß–µ–∫-–ª–∏—Å—Ç –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—ó */}
          {!hasItems ? (
            <div className="bg-white p-8 rounded-lg shadow text-center">
              <div className="text-gray-400 mb-4">
                <svg className="w-16 h-16 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                </svg>
              </div>
              <p className="text-gray-600 text-lg mb-2">–£ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤</p>
              <p className="text-gray-500">–°–∫–ª–∞–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π</p>
            </div>
          ) : expandingSets ? (
            <div className="bg-white p-8 rounded-lg shadow text-center">
              <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-600">–†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –Ω–∞–±–æ—Ä–∏ —Ç–æ–≤–∞—Ä—ñ–≤...</p>
              <p className="text-sm text-gray-500 mt-2">–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥</p>
            </div>
          ) : (
            <ErrorBoundary>
              <OrderChecklist
                key={`checklist-${equipmentState.config?.scale?.connectionStrategy}`}
                items={checklistItems}
                totalPortions={orderForAssembly.totalPortions}
                activeBoxIndex={activeBoxIndex}
                onActiveBoxChange={setActiveBoxIndex}
                onItemStatusChange={(itemId, status) => {
                  setChecklistItems(prevItems =>
                    prevItems.map(item => {
                      if (item.id === itemId) {
                        // –î–æ–∑–≤–æ–ª—è—î–º–æ –ª–∏—à–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è —É 'pending' –ø–æ –∫–ª—ñ–∫—É
                        return { ...item, status: 'pending' };
                      }
                      // –°–∫–∏–¥–∞—î–º–æ —ñ–Ω—à—ñ —Ç–æ–≤–∞—Ä–∏ —É —Ü—ñ–π –∫–æ—Ä–æ–±—Ü—ñ –∑ 'pending' —É 'default'
                      if (item.status === 'pending' && (item.boxIndex || 0) === activeBoxIndex) {
                        return { ...item, status: 'default' };
                      }
                      return item;
                    })
                  );
                  // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π polling –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ —Ç–æ–≤–∞—Ä—É –≤ pending —Å—Ç–∞—Ç—É—Å
                  // console.log('üîÑ [OrderView] –¢–æ–≤–∞—Ä –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∏–π –≤ pending - –∑–∞–ø—É—Å–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π polling');
                  startActivePolling();
                }}
                onPrintTTN={handlePrintTTN}
                showPrintTTN={showPrintTTN}
                onNextOrder={handleNextOrder}
                showNextOrder={showNextOrder}
                nextOrderNumber={nextOrderNumber}
                nextOrderDate={nextOrderDate}
                showNoMoreOrders={showNoMoreOrders}
              />
            </ErrorBoundary>
          )}
          
        </div>
          
        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="w-full xl:w-80">
          <RightPanel>
            
            {/* OrderTrackingNumber */}
            <div className="w-full">
              <div className="bg-neutral-50 p-4 rounded-lg">
                <div className="flex items-center gap-2.5 text-2xl font-mono tracking-wider text-primary">
                  {formatTrackingNumberWithIcon(orderForAssembly.shipping.trackingId, {
                    provider: orderForAssembly.shipping.provider,
                    iconSize: 'absolute',
                    iconSizeValue: '1.5rem',
                  })}
                </div>
              </div>
            </div>

            {/* –í—ñ–¥–∂–µ—Ç –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∞–≥–∏ */}
            <WeightDisplayWidget
              onWeightChange={handleWeightChange}
              expectedWeight={getExpectedWeight()}
              cumulativeTolerance={getCumulativeTolerance()}
              className="w-full"
              isActive={isWeightWidgetActive}
              isPaused={isWeightWidgetPaused}
              pollingMode={pollingMode}
              onPollingModeChange={handlePollingModeChange}
            />


            {/* –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ—Ä–æ–±–æ–∫ */}
            {hasItems && !expandingSets && (
              <BoxSelector
                totalPortions={orderForAssembly.totalPortions}
                onBoxesChange={handleBoxesChange}
                onActiveBoxChange={setActiveBoxIndex}
                activeBoxIndex={activeBoxIndex}
                className="bg-white p-6 rounded-lg shadow"
              />
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω—å */}
            <DeviationButton />

          </RightPanel>
        </div>
      </div>

      {/* –ë–ª–æ–∫ –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è */}
    {(user && ['admin', 'boss'].includes(user.role)) && (
    <>
    <h2 className="text-xl font-semibold text-gray-800 mt-20 border-t border-gray-300 pt-16 mb-4">–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.orderNumber || externalId} <Code color="danger" className="bg-danger-500 text-white text-base">–ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤</Code></h2>
    
    <div className="flex w-full gap-6">
      <div className="flex flex-1 min-w-0 flex-col gap-6">
        {/* –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
        <Card>
        <CardHeader className="border-b border-gray-200">
          <DynamicIcon name="info" size={20} className="text-gray-600 mr-2" />
          <h4 className="text-base font-semibold">–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h4>
        </CardHeader>
        <CardBody>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <p><strong>ID:</strong> {order.id}</p>
            <p><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> {order.orderNumber || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
            <p><strong>–¢–¢–ù:</strong> {order.ttn || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
            <p><strong>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä—Ü—ñ–π:</strong> {order.quantity}</p>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {order.statusText}</p>
          </div>
          <div>
            <p><strong>–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:</strong> { order.orderDate ? formatDateOnly(order.orderDate) : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'} { order.orderDate && formatTimeOnly(order.orderDate)}</p>
            <p><strong>–°—É–º–∞:</strong> {order.totalPrice} –≥—Ä–Ω</p>
            <p><strong>–°–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> {order.shippingMethod}</p>
            <p><strong>–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</strong> {order.paymentMethod}</p>
            <p><strong>–ö–æ–º–µ–Ω—Ç–∞—Ä:</strong> {order.comment || '–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è'}</p>
          </div>
          </div>
        </CardBody>
        </Card>

        {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞ */}
        <Card>
        <CardHeader className="border-b border-gray-200">
          <DynamicIcon name="user" size={20} className="text-gray-600 mr-2" />
          <h4 className="text-base font-semibold">–ö–ª—ñ—î–Ω—Ç</h4>
        </CardHeader>
        <CardBody>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <p><strong>–ü–Ü–ë:</strong> {order.customerName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {order.customerPhone || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
          </div>
          <div>
            <p><strong>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</strong></p>
            <p className="text-sm text-gray-600">{order.deliveryAddress || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
          </div>
          </div>
        </CardBody>
        </Card>

        {/* –°–∫–ª–∞–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è */}
        <Card>
        <CardHeader className="border-b border-gray-200">
          <DynamicIcon name="box" size={20} className="text-gray-600 mr-2" />
          <h4 className="text-base font-semibold">–°–∫–ª–∞–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h4>
        </CardHeader>
        <CardBody>
          {!hasItems ? (
            <p className="text-gray-500 text-center py-4">–°–∫–ª–∞–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ–π</p>
          ) : order.items && order.items.length > 0 ? (
          <div className="space-y-2">
            {order.items.map((item: any, index: number) => (
            <div key={index} className="flex justify-between items-center p-3 bg-gray-50 border-l-4 border-gray-300 rounded">
              <div>
              <p className="font-medium">{item.productName}</p>
              <p className="text-sm text-gray-600">SKU: {item.sku}</p>
              </div>
              <div className="text-right">
              <p className="font-medium">{item.quantity} —à—Ç.</p>
              <p className="text-sm text-gray-600">{item.price} –≥—Ä–Ω</p>
              </div>
            </div>
            ))}
          </div>
          ) : (
          <p className="text-gray-500">–°–∫–ª–∞–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ</p>
          )}
        </CardBody>
        </Card>

      </div>

      {/* –°–∏—Ä—ñ –¥–∞–Ω—ñ */}
      <div className="flex flex-1 min-w-0 flex-col gap-8">
        <Card className="flex-1">
        <CardHeader className="border-b border-gray-200">
                <DynamicIcon name="code" size={20} className="text-gray-600 mr-2" />
          <h4 className="text-base font-semibold">–°–∏—Ä—ñ –¥–∞–Ω—ñ –∑ SalesDrive API –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.orderNumber || externalId}</h4>
        </CardHeader>
        <CardBody>
          <pre className="bg-gray-100 p-3 rounded text-sm overflow-auto h-full font-mono">
            {JSON.stringify(order.rawData || order, null, 2)}
          </pre>
        </CardBody>
        </Card>
      </div>
    </div>
  	</>
  )}
    </div>
  );
}
