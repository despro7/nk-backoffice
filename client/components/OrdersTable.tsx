import React, { useState, useEffect, useMemo } from "react";
import { Table, TableHeader, TableBody, TableColumn, TableRow, TableCell, Pagination } from "@heroui/react";
import { useNavigate } from "react-router-dom";
import { useApi } from "../hooks/useApi";
import { TabsFilter } from "./TabsFilter";
import { cn } from "../lib/utils";

import UkrPoshtaIcon from "/icons/ukr-poshta.svg";
import NovaPoshtaIcon from "/icons/nova-poshta.svg";
import { DynamicIcon } from "lucide-react/dynamic";
import { formatRelativeDate, getStatusColor } from "../lib/formatUtils";

interface OrderItem {
  productName: string;
  quantity: number;
  price: number;
  sku: string;
}

interface Order {
  id: string;
  orderNumber: string;
  ttn: string;
  quantity: number;
  status: string;
  statusText: string;
  items: OrderItem[];
  customerName?: string;
  customerPhone?: string;
  deliveryAddress?: string;
  totalPrice?: number;
  orderDate: string;
  externalId?: string;
  shippingMethod?: string;
  paymentMethod?: string;
  cityName?: string;
  provider?: string;
  rawData: any;
}

interface OrdersTableProps {
  className?: string;
  filter?: "confirmed" | "readyToShip" | "shipped" | "all" | "all_sum";
  searchQuery?: string;
  onTabChange?: (key: "confirmed" | "readyToShip" | "shipped" | "all" | "all_sum") => void;
}

type SortDescriptor = {
  column: string;
  direction: "ascending" | "descending";
};

// –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ë–î
let ITEMS_PER_PAGE = 10;

const columns = [
  { key: "orderNumber", label: "‚Ññ –ó–∞–º–æ–≤.", className: "w-2/16" },
  { key: "orderDate", label: "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", className: "w-3/16" },
  { key: "ttn", label: "–¢–¢–ù", className: "w-6/16" },
  { key: "quantity", label: "–ö—ñ–ª-—Ç—å", className: "w-1/16" },
  { key: "status", label: "–°—Ç–∞—Ç—É—Å", className: "w-4/16" },
];

export function OrdersTable({ className, filter = "all", searchQuery = "", onTabChange }: OrdersTableProps) {
  const navigate = useNavigate();
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(false);
  const [totalOrders, setTotalOrders] = useState(0);
  const [pageSize, setPageSize] = useState<number>(10);
  const [statusCounts, setStatusCounts] = useState<{
    confirmed: number;
    readyToShip: number;
    shipped: number;
    all: number;
  }>({
    confirmed: 0,
    readyToShip: 0,
    shipped: 0,
    all: 0
  });
  const [sortDescriptor, setSortDescriptor] = useState<SortDescriptor>({
    column: "orderDate",
    direction: "ascending"
  });
  const [page, setPage] = useState(1);
  const { apiCall } = useApi();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const loadPageSize = async () => {
      try {
        const response = await apiCall('/api/settings');
        if (response.ok) {
          const allSettings = await response.json();

          // –ò—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          const pageSizeSetting = allSettings.find((s: any) => s.key === 'orders_page_size');
          if (pageSizeSetting) {
            setPageSize(parseInt(pageSizeSetting.value));
          }
        }
      } catch (error) {
        console.error('Error loading page size setting:', error);
        // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (10)
      }
    };

    loadPageSize();
  }, []);

  console.log('üéØ [CLIENT] OrdersTable: Initialized with filter:', filter, `(default: all)`);
  console.log('üìè [CLIENT] OrdersTable: Page size:', pageSize);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  const fetchOrders = async (pageNum: number = 1, currentPageSize: number = pageSize, statusFilter?: string) => {
    const startTime = Date.now();
    console.log(`üîÑ [CLIENT] OrdersTable: Starting orders fetch (page ${pageNum}, size ${currentPageSize}, status: ${statusFilter || 'all'})...`);

    setLoading(true);
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
      const queryParams = new URLSearchParams({
        limit: currentPageSize.toString(),
        offset: ((pageNum - 1) * currentPageSize).toString(),
        sortBy: 'orderDate',
        sortOrder: 'desc'
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
      if (statusFilter) {
        if (statusFilter === 'confirmed') queryParams.set('status', '2');
        else if (statusFilter === 'readyToShip') queryParams.set('status', '3');
        else if (statusFilter === 'shipped') queryParams.set('status', '4');
        else if (statusFilter === 'all_sum') queryParams.set('status', '2,3,4');
      }

      console.log('üì° [CLIENT] OrdersTable: Making API call to /api/orders?' + queryParams.toString());
      const response = await apiCall('/api/orders?' + queryParams.toString());

      console.log('üì° [CLIENT] OrdersTable: API response status:', response.status);
      const data = await response.json();

      const fetchTime = Date.now() - startTime;
      console.log('‚úÖ [CLIENT] OrdersTable: API response received in', fetchTime, 'ms');
      console.log('üìä [CLIENT] OrdersTable: Response data:', {
        success: data.success,
        ordersOnPage: data.data?.length || 0,
        totalOrders: data.metadata?.totalOrders || 0,
        hasData: !!data.data
      });

      if (data.success) {
        console.log('üì¶ [CLIENT] OrdersTable: Setting orders to state, count:', data.data?.length || 0);
        setOrders(data.data || []);
        setTotalOrders(data.metadata?.totalOrders || 0);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        if (data.metadata?.statusCounts) {
          setStatusCounts(data.metadata.statusCounts);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        const totalPages = Math.ceil((data.metadata?.totalOrders || 0) / currentPageSize);
        setPage(Math.min(pageNum, Math.max(1, totalPages)));
      } else {
        console.warn('‚ö†Ô∏è [CLIENT] OrdersTable: API returned success=false:', data);
      }
    } catch (error) {
      const errorTime = Date.now() - startTime;
      console.error('‚ùå [CLIENT] OrdersTable: Error fetching orders after', errorTime, 'ms:', error);
    } finally {
      setLoading(false);
      const totalTime = Date.now() - startTime;
      console.log('üèÅ [CLIENT] OrdersTable: Fetch completed in', totalTime, 'ms');
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–∏—Å–∫—É, —Å—Ç–∞—Ç—É—Å —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
  const filteredOrders = useMemo(() => {
    let filtered = orders;

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
    if (searchQuery) {
      filtered = filtered.filter(order =>
        order.orderNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||
        order.ttn.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    return filtered;
  }, [orders, searchQuery]); // –£–±—Ä–∞–ª–∏ filter –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤
  const sortedOrders = useMemo(() => {
    if (!sortDescriptor.column) return filteredOrders;

    return [...filteredOrders].sort((a, b) => {
      let aValue: any;
      let bValue: any;

      switch (sortDescriptor.column) {
        case "orderNumber":
          aValue = a.orderNumber;
          bValue = b.orderNumber;
          break;
        case "orderDate":
          aValue = new Date(a.orderDate).getTime();
          bValue = new Date(b.orderDate).getTime();
          break;
        case "ttn":
          aValue = a.ttn || "";
          bValue = b.ttn || "";
          break;
        case "quantity":
          aValue = a.quantity;
          bValue = b.quantity;
          break;
        case "status":
          aValue = a.status;
          bValue = b.status;
          break;
        default:
          return 0;
      }

      if (sortDescriptor.direction === "ascending") {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });
  }, [filteredOrders, sortDescriptor]);

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è
  const pages = Math.ceil(totalOrders / pageSize);
  const displayOrders = filteredOrders; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

  // –°–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    setPage(1);
  }, [filter, searchQuery]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    fetchOrders(page, pageSize, filter);
  }, [page, filter, pageSize]); // –î–æ–±–∞–≤–ª—è–µ–º filter –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  const handleRowClick = (externalId: string) => {
    navigate(`/orders/${externalId}`);
  };



  return (
    <div className="space-y-4">
      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex justify-between items-center">
        <TabsFilter
          selectedTab={filter}
          onTabChange={onTabChange || (() => {})}
          counts={statusCounts}
        />
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ */}
      <Table
        aria-label="Orders table"
        sortDescriptor={sortDescriptor}
        onSortChange={(descriptor) => setSortDescriptor(descriptor as SortDescriptor)}
        radius="lg"
        classNames={{
          base: "max-w-7xl",
          wrapper: "rounded-lg w-full",
          th: [
            "first:rounded-s-sm",
            "last:rounded-e-sm",
            "bg-neutral-100",
            "text-neutral-500", 
            "border-b-0",
            "text-[13px]",
            "font-semibold",
            "uppercase",
            "leading-5",
            "px-2.5"
          ],
          td: [
            "text-black",
            "text-base",
            "font-normal", 
            "leading-[130%]",
            "px-2.5",
            "py-6",
            "last:border-b-0",
          ],
          tbody: "divide-y divide-grey-200"
        }}
      >
        <TableHeader columns={columns}>
          {(column) => (
            <TableColumn 
              key={column.key} 
              className={column.className}
              allowsSorting={true}
            >
              {column.label}
            </TableColumn>
          )}
        </TableHeader>
        <TableBody
          items={displayOrders}
          emptyContent={<div className="text-grey-500/75">–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</div>}
          isLoading={loading}
          loadingContent={
            <div className="text-grey-500 bg-white/50 backdrop-blur-sm rounded-lg flex items-center justify-center self-start mt-5 p-10 z-10 shadow-lg">
              <DynamicIcon name="loader-2" className="animate-spin mr-2" size={16} />
              <span>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å...</span>
            </div>
          }
        >
          {(order) => (
            <TableRow 
              key={order.externalId}
              className="cursor-pointer hover:bg-gray-50"
            >
              <TableCell onClick={() => handleRowClick(order.externalId)}>
                {order.orderNumber}
              </TableCell>
              <TableCell onClick={() => handleRowClick(order.externalId)}>
                {formatRelativeDate(order.orderDate)}
              </TableCell>
              <TableCell onClick={() => handleRowClick(order.externalId)}>
                <div className="flex items-center gap-2">
                  <img src={order.provider === "novaposhta" ? NovaPoshtaIcon : UkrPoshtaIcon} alt={order.shippingMethod} className="w-5 h-5" />
                  <span>{order.ttn}</span>
                </div>
              </TableCell>
              <TableCell onClick={() => handleRowClick(order.externalId)}>
                {order.quantity}
              </TableCell>
              <TableCell>
                <div className="flex items-center gap-2">
                  <span className={cn(getStatusColor(order.status), "px-2 py-1 rounded-full text-xs whitespace-nowrap")}>
                    {order.rawData?.statusText || order.statusText}
                  </span>
                </div>
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>

      {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      {totalOrders > pageSize && (
        <div className="flex justify-center">
          <Pagination
            total={pages}
            page={page}
            onChange={(newPage) => {
              console.log(`üìÑ [CLIENT] OrdersTable: Changing to page ${newPage}`);
              setPage(newPage);
            }}
            showControls
            showShadow
            classNames={{
              cursor: "bg-neutral-500 text-white",
              item: "cursor-pointer",
              next: "cursor-pointer",
              prev: "cursor-pointer",
            }}
          />
        </div>
      )}
    </div>
  );
}
