import { Router, Request, Response } from 'express';
import crypto from 'crypto';
import fs from 'fs';
import path from 'path';

const router = Router();

/**
 * –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø—ñ–¥–ø–∏—Å—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è QZ Tray
 * 
 * –¶–µ –±—ñ–ª—å—à –±–µ–∑–ø–µ—á–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ - –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
 * —ñ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç—É
 */
router.post('/sign', async (req: Request, res: Response) => {
  console.log('üîê QZ Tray /sign endpoint called');
  console.log('  Message length:', req.body?.message?.length || 0);
  
  try {
    const { message } = req.body;

    if (!message) {
      console.error('  ‚úó No message provided');
      res.status(400).json({ 
        error: 'Message is required',
        message: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥–ø–∏—Å—É –Ω–µ –Ω–∞–¥–∞–Ω–æ' 
      });
      return;
    }

    // –®–ª—è—Ö –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    const privateKeyPath = path.join(process.cwd(), 'certificates', 'private-key.pem');

    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á–∞
    if (!fs.existsSync(privateKeyPath)) {
      console.error('Private key not found at:', privateKeyPath);
      res.status(500).json({ 
        error: 'Private key not found',
        message: '–ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç.',
        hint: '–ó–∞–ø—É—Å—Ç—ñ—Ç—å: pwsh scripts/generate-qz-certificate.ps1'
      });
      return;
    }

    // –ß–∏—Ç–∞—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á
    const privateKey = fs.readFileSync(privateKeyPath, 'utf8');

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å –∑ SHA1 (QZ Tray –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î SHA1)
    const sign = crypto.createSign('SHA1');
    sign.update(message);
    sign.end();

    // –ü—ñ–¥–ø–∏—Å—É—î–º–æ —ñ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ base64
    const signature = sign.sign(privateKey, 'base64');

    console.log('  ‚úì Signature created:', signature.substring(0, 50) + '...');

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—ñ–¥–ø–∏—Å
    res.json({ 
      signature,
      timestamp: new Date().toISOString() 
    });

  } catch (error: any) {
    console.error('Error signing message for QZ Tray:', error);
    
    res.status(500).json({ 
      error: 'Failed to sign message',
      message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
      details: error.message 
    });
  }
});

/**
 * –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∞
 * 
 * –ö–ª—ñ—î–Ω—Ç –º–æ–∂–µ –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –¥–∏–Ω–∞–º—ñ—á–Ω–æ
 */
router.get('/certificate', async (req: Request, res: Response) => {
  try {
    const certPath = path.join(process.cwd(), 'certificates', 'digital-certificate.pem');

    if (!fs.existsSync(certPath)) {
      res.status(404).json({ 
        error: 'Certificate not found',
        message: '–°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç.',
        hint: '–ó–∞–ø—É—Å—Ç—ñ—Ç—å: pwsh scripts/generate-qz-certificate.ps1'
      });
      return;
    }

    const certificate = fs.readFileSync(certPath, 'utf8');

    res.json({ 
      certificate,
      timestamp: new Date().toISOString() 
    });

  } catch (error: any) {
    console.error('Error reading certificate:', error);
    
    res.status(500).json({ 
      error: 'Failed to read certificate',
      message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç',
      details: error.message 
    });
  }
});

/**
 * –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É QZ Tray
 */
router.get('/status', async (req: Request, res: Response) => {
  try {
    const certExists = fs.existsSync(path.join(process.cwd(), 'certificates', 'digital-certificate.pem'));
    const keyExists = fs.existsSync(path.join(process.cwd(), 'certificates', 'private-key.pem'));

    res.json({
      configured: certExists && keyExists,
      certificate: certExists,
      privateKey: keyExists,
      message: certExists && keyExists 
        ? 'QZ Tray –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ' 
        : 'QZ Tray –ø–æ—Ç—Ä–µ–±—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∞'
    });

  } catch (error: any) {
    console.error('Error checking QZ status:', error);
    
    res.status(500).json({ 
      error: 'Failed to check status',
      details: error.message 
    });
  }
});

export default router;

