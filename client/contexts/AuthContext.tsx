import React, { createContext, useContext, useState, useEffect, ReactNode, useRef } from 'react';
import { UserType, LoginRequest, RegisterRequest } from '../../server/types/auth';
import { useEquipment, EquipmentState, EquipmentActions } from '../hooks/useEquipment';
import { LoggingService } from '../services/LoggingService';
import { formatDuration } from '@/lib/formatUtils';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
interface UserWithExpiry extends Omit<UserType, 'password' | 'refreshToken' | 'refreshTokenExpiresAt'> {
  expiresIn?: number; // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ access —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
}

interface AuthContextType {
  user: UserWithExpiry | null;
  isLoading: boolean;
  login: (credentials: LoginRequest) => Promise<boolean>;
  register: (userData: RegisterRequest) => Promise<boolean>;
  logout: () => Promise<void>;
  forceLogout: () => void;
  refreshToken: () => Promise<boolean>;
  checkAuthStatus: () => Promise<void>;
  equipmentState: EquipmentState;
  equipmentActions: EquipmentActions;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// –•—É–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ AuthContext
export const useEquipmentFromAuth = () => {
  const { equipmentState, equipmentActions } = useAuth();
  return [equipmentState, equipmentActions] as const;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<UserWithExpiry | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const refreshTimeoutRef = useRef<number | null>(null);

  // –ö–µ—à –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (5 –º–∏–Ω—É—Ç)
  const profileCacheRef = useRef<{ data: UserWithExpiry | null; timestamp: number } | null>(null);
  const PROFILE_CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  

  // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  const [equipmentState, equipmentActions] = useEquipment();

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –ë–î
  const [authSettings, setAuthSettings] = useState<any>(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const loadAuthSettings = async () => {
    try {
      LoggingService.authLog('üîÑ [AuthContext] –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      const response = await fetch('/api/auth/settings', {
        credentials: 'include'
      });
      
      // LoggingService.authLog(`üì° [AuthContext] –û—Ç–≤–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${response.status} ${response.statusText}`);
      
      if (response.ok) {
        const settings = await response.json();
        LoggingService.authLog('‚úÖ [AuthContext] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', settings);
        setAuthSettings(settings);
      } else {
        LoggingService.authLog(`‚ö†Ô∏è [AuthContext] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${response.status}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      LoggingService.authLog('‚ùå [AuthContext] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    }
  };

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ expiresIn –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const getRefreshDelay = (expiresIn?: number): number => {
    if (expiresIn) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const thresholdMinutes = authSettings?.clientRefreshThresholdMinutes || 10;
      const isEnabled = authSettings?.clientAutoRefreshEnabled !== false;
      
      if (!isEnabled) {
        return 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ
      }
      
      return Math.max((expiresIn * 1000) - (thresholdMinutes * 60 * 1000), 60000);
    }
    return 50 * 60 * 1000; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 50 –º–∏–Ω—É—Ç
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–≤—ã–Ω–µ—Å–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  const scheduleTokenRefresh = (expiresIn?: number) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ authSettings –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    const fallbackSettings = {
      clientRefreshThresholdMinutes: 10,
      clientAutoRefreshEnabled: true
    };
    
    const currentSettings = authSettings || fallbackSettings;
    const isEnabled = currentSettings.clientAutoRefreshEnabled !== false;
    
    // LoggingService.authLog('üîß [AuthContext] scheduleTokenRefresh', { expiresIn, currentSettings, isEnabled });
    
    if (isEnabled) {
      if (refreshTimeoutRef.current) {
        clearTimeout(refreshTimeoutRef.current);
      }
      
      const refreshDelay = getRefreshDelay(expiresIn);
      LoggingService.authLog(`‚è∞ [AuthContext] –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ ${formatDuration(refreshDelay, { unit: 'ms' })}`);
      
      refreshTimeoutRef.current = window.setTimeout(() => {
        LoggingService.authLog('üîÑ [AuthContext] –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞');
        refreshToken(); 
      }, refreshDelay);
    } else {
      // LoggingService.authLog('‚ö†Ô∏è [AuthContext] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadAuthSettings();
  }, []);

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ)
  const prevUserIdRef = useRef<number | undefined>(undefined);
  useEffect(() => {
    if (user && prevUserIdRef.current !== undefined && prevUserIdRef.current !== user.id) {
      // –†–µ–∞–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      LoggingService.authLog('üîÑ [AuthContext] –°–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
      loadAuthSettings();
    }
    prevUserIdRef.current = user?.id;
  }, [user?.id]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
  useEffect(() => {
    const timer = setTimeout(() => {
      // if (process.env.NODE_ENV === 'development') {
        // log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ');
      // }
      checkAuthStatus();
    }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

    return () => clearTimeout(timer);
  }, []);

  // –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ - –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const prevTokenRefreshKey = useRef<string>('');
  useEffect(() => {
    if (user) {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      const currentKey = `${user.id}-${user.expiresIn}-${authSettings?.clientAutoRefreshEnabled}-${authSettings?.middlewareAutoRefreshEnabled}`;
      
      if (prevTokenRefreshKey.current !== currentKey) {
        if (!authSettings) {
          // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
          LoggingService.authLog('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã...) \nüîÑ [Fallback] –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è');
        } else {
          // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
          LoggingService.authLog(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! 
üîÑ clientAutoRefresh: ${authSettings.clientAutoRefreshEnabled ? '–í–ö–õ (–∑–∞ ' + authSettings.clientRefreshThresholdMinutes + ' –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)' : '–í–´–ö–õ'}
üîÑ middlewareRefresh: ${authSettings.middlewareRefreshThresholdSeconds ? '–í–ö–õ (–∑–∞ ' + authSettings.middlewareRefreshThresholdSeconds + ' —Å–µ–∫ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)' : '–í–´–ö–õ'}
üîÑ expiresIn: ${Math.floor(user.expiresIn / 60) > 0 && (Math.floor(user.expiresIn / 60) + '–º–∏–Ω')} ${user.expiresIn % 60} —Å–µ–∫`);
        }
        
        prevTokenRefreshKey.current = currentKey;
      }
      
      scheduleTokenRefresh(user.expiresIn);

      return () => {
        if (refreshTimeoutRef.current) {
          clearTimeout(refreshTimeoutRef.current);
        }
      };
    }
  }, [user, authSettings]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    if (user) {
      let lastActivityTime = Date.now();

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const handleVisibilityChange = () => {
        if (document.visibilityState === 'visible') {
          const timeSinceLastActivity = Date.now() - lastActivityTime;
          
          // –ï—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –±—ã–ª–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
          if (timeSinceLastActivity > 30 * 60 * 1000) {
            checkAuthStatus();
          }
        }
      };

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updateActivity = () => {
        const now = Date.now();
        lastActivityTime = now;
      };

      const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];
      events.forEach(event => {
        document.addEventListener(event, updateActivity, true);
      });

      document.addEventListener('visibilitychange', handleVisibilityChange);

      return () => {
        events.forEach(event => {
          document.removeEventListener(event, updateActivity, true);
        });
        document.removeEventListener('visibilitychange', handleVisibilityChange);
      };
    }
  }, [user]);

  const checkAuthStatus = async () => {
    // LoggingService.authLog('üîç [AuthContext] checkAuthStatus called');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø—Ä–æ—Ñ–∏–ª—è
    const now = Date.now();
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–º–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç)
    const shouldUseCache = profileCacheRef.current &&
      (now - profileCacheRef.current.timestamp) < PROFILE_CACHE_DURATION &&
      (!profileCacheRef.current.data?.expiresIn || 
       profileCacheRef.current.data.expiresIn >= 300); // 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç

    if (shouldUseCache) {
      LoggingService.authLog('üìã [AuthContext] Using cached profile');
      setUser(profileCacheRef.current.data);
      setIsLoading(false);
      return;
    }

    // –ï—Å–ª–∏ –∫–µ—à –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
    if (profileCacheRef.current && 
        profileCacheRef.current.data?.expiresIn && 
        profileCacheRef.current.data.expiresIn < 300) {
      LoggingService.authLog('üö´ [AuthContext] Cache disabled for short token (expiresIn < 5min)');
    }

    try {
      const response = await fetch('/api/auth/profile', {
        credentials: 'include'
      });

      // LoggingService.authLog('üì° [AuthContext] checkAuthStatus response:', response.status);

      if (response.ok) {
        const userData = await response.json();
        LoggingService.authLog('‚úÖ [AuthContext] checkAuthStatus success');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
        const userWithExpiry = {
          ...userData,
          expiresIn: userData.expiresIn
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        profileCacheRef.current = {
          data: userWithExpiry,
          timestamp: now
        };

        setUser(userWithExpiry);
        // if (process.env.NODE_ENV === 'development') {
          // console.log('üë§ [AuthContext] User state updated');
        // }
        
        // –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, useEffect –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ setUser
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        if (response.status === 401) {
          LoggingService.authLog('‚ö†Ô∏è [AuthContext] checkAuthStatus: Got 401, attempting token refresh');
          const refreshResult = await refreshToken();
          if (refreshResult) {
            LoggingService.authLog('‚úÖ [AuthContext] checkAuthStatus: Token refreshed successfully');
            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º checkAuthStatus
            // —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return checkAuthStatus();
          } else {
            console.error('‚ùå [AuthContext] checkAuthStatus: Token refresh failed, logging out');
            setUser(null);
          }
        } else {
          console.error(`‚ùå [AuthContext] checkAuthStatus: Error ${response.status}, logging out`);
          setUser(null);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      setUser(null);
    } finally {
      setIsLoading(false);
    }
  };

  const refreshToken = async (): Promise<boolean> => {
    // log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
    try {
      const response = await fetch('/api/auth/refresh', {
        method: 'POST',
        credentials: 'include'
      });

      // log(`üì° –û—Ç–≤–µ—Ç –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: ${response.status} ${response.statusText}`);

      if (response.ok) {
        const data = await response.json();
        LoggingService.authLog('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ middleware
        const tokenRefreshed = response.headers.get('X-Token-Refreshed');
        const userEmail = response.headers.get('X-User-Email');

        if (tokenRefreshed === 'true' && userEmail) {
          LoggingService.toastTokenRefreshed(userEmail);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
        if (data.expiresIn && user) {
          const updatedUser = {
            ...user,
            expiresIn: data.expiresIn
          };
          setUser(updatedUser);
        }
        
        // –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ, useEffect –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ setUser
        
        return true;
      } else {
        const error = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞', error);
        
        if (error.message.includes('–∑–∞—Å—Ç–∞—Ä—ñ–≤') || error.message.includes('–Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π')) {
          console.error('‚ùå –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
          LoggingService.toastRefreshError();
          forceLogout();
          return false;
        }
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      console.error('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞', error);
      return false;
    }
  };

  const login = async (credentials: LoginRequest): Promise<boolean> => {
    LoggingService.authLog('üîë [AuthContext]: –ù–∞—á–∏–Ω–∞–µ–º –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...', { email: credentials.email });
    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(credentials),
      });

      LoggingService.authLog(`üì° [AuthContext]: –û—Ç–≤–µ—Ç –Ω–∞ –≤—Ö–æ–¥: ${response.status} ${response.statusText}`);

      if (response.ok) {
        const data = await response.json();
        LoggingService.authLog('‚úÖ [AuthContext]: –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', data.user);

        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LoggingService –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await LoggingService.initialize();
        LoggingService.authLog('üîÑ [AuthContext]: LoggingService –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞');

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await loadAuthSettings();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        LoggingService.toastAuthSuccess(data.user.email);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
        const userWithExpiry = {
          ...data.user,
          expiresIn: data.expiresIn
        };
        setUser(userWithExpiry);
        
        // useEffect –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ setUser
        
        return true;
      } else {
        const error = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error.message);
        throw new Error(error.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–π—Ç–∏');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
      throw error;
    }
  };

  const register = async (userData: RegisterRequest): Promise<boolean> => {
    LoggingService.authLog('üìù [AuthContext]: –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...', { email: userData.email });
    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(userData),
      });

      LoggingService.authLog(`üì° [AuthContext]: –û—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: ${response.status} ${response.statusText}`);

      if (response.ok) {
        const data = await response.json();
        LoggingService.authLog('‚úÖ [AuthContext]: –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', data.user);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        LoggingService.toastAuthSuccess(data.user.email);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
        const userWithExpiry = {
          ...data.user,
          expiresIn: data.expiresIn
        };
        setUser(userWithExpiry);
        
        // useEffect –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ setUser

        
        return true;
      } else {
        const error = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      return false;
    }
  };

  const logout = async () => {
    LoggingService.authLog('üîö [AuthContext]: –ù–∞—á–∏–Ω–∞–µ–º –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');
    try {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      if (refreshTimeoutRef.current) {
        clearTimeout(refreshTimeoutRef.current);
        refreshTimeoutRef.current = null;
      }

      await fetch('/api/auth/logout', {
        method: 'POST',
        credentials: 'include'
      });

      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–æ—Ñ–∏–ª—è
      profileCacheRef.current = null;

      LoggingService.authLog('‚úÖ [AuthContext]: –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      LoggingService.toastLogoutSuccess();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
    } finally {
      setUser(null);
    }
  };

  const forceLogout = () => {
    LoggingService.authLog('‚õî [AuthContext]: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    if (refreshTimeoutRef.current) {
      clearTimeout(refreshTimeoutRef.current);
      refreshTimeoutRef.current = null;
    }

    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–æ—Ñ–∏–ª—è
    profileCacheRef.current = null;

    setUser(null);
  };

  const value: AuthContextType = {
    user,
    isLoading,
    login,
    register,
    logout,
    forceLogout,
    refreshToken,
    checkAuthStatus,
    equipmentState,
    equipmentActions,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};