import { ScaleData } from './EquipmentService';
import { EQUIPMENT_DEFAULTS } from '../../shared/constants/equipmentDefaults.js';

// –¢–∏–ø—ã –¥–ª—è Web Serial API (–µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º)
declare global {
  interface Navigator {
    serial?: {
      requestPort(options?: { filters?: Array<{ usbVendorId?: number; usbProductId?: number }> }): Promise<SerialPort>;
      getPorts(): Promise<SerialPort[]>;
    };
  }

  interface SerialPort {
    open(options: SerialOptions): Promise<void>;
    close(): Promise<void>;
    readable: ReadableStream<Uint8Array> | null;
    writable: WritableStream<Uint8Array> | null;
  }

  interface SerialOptions {
    baudRate: number;
    dataBits?: number;
    stopBits?: number;
    parity?: string;
    bufferSize?: number;
  }
}

export interface ScaleConnectionConfig {
  baudRate: number;
  dataBits: number;
  stopBits: number;
  parity: 'none' | 'even' | 'odd';
  connectionStrategy?: 'legacy' | 'reconnectOnError' | 'persistentStream';
}

export interface VTAScaleData extends ScaleData {
  price?: number;
  total?: number;
  rawData?: Uint8Array;
}

export class ScaleService {
  private static instance: ScaleService;
  private port: SerialPort | null = null;
  private isConnected: boolean = false;
  private config: ScaleConnectionConfig;
  private onWeightChange: ((data: VTAScaleData) => void) | null = null;
  private onRawData: ((data: Uint8Array) => void) | null = null;
  private reader: ReadableStreamDefaultReader<Uint8Array> | undefined;
  private isReading: boolean = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
  private readLoopPromise: Promise<void> | null = null; // –î–ª—è persistentStream
  private stopReadLoop: (() => void) | null = null; // –î–ª—è persistentStream

  private constructor() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.config = {
      baudRate: EQUIPMENT_DEFAULTS.scale.baudRate,
      dataBits: EQUIPMENT_DEFAULTS.scale.dataBits,
      stopBits: EQUIPMENT_DEFAULTS.scale.stopBits,
      parity: EQUIPMENT_DEFAULTS.scale.parity,
      connectionStrategy: EQUIPMENT_DEFAULTS.scale.connectionStrategy,
    };
  }

  public static getInstance(): ScaleService {
    if (!ScaleService.instance) {
      ScaleService.instance = new ScaleService();
    }
    return ScaleService.instance;
  }

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≤–∞–≥ —á–µ—Ä–µ–∑ Web Serial API
  public async connect(autoConnect: boolean = false): Promise<boolean> {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É Web Serial API
      if (!('serial' in navigator)) {
        console.log('‚ö†Ô∏è ScaleService: Web Serial API –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–∂–µ
      if (this.isConnected && this.port) {
        console.log('üîß ScaleService: –í–∞–≥–∏ –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ');
        return true;
      }

      console.log('üîß ScaleService: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ COM –ø–æ—Ä—Ç—É...');

      // –ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç
      if (autoConnect) {
        try {
          const ports = await navigator.serial.getPorts();
          console.log('üîß ScaleService: –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤:', ports.length);

          if (ports.length > 0) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ—Ä—Ç
            this.port = ports[0];
            console.log('üîß ScaleService: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç');
          } else {
            console.log('‚ö†Ô∏è ScaleService: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä');
            return false;
          }
        } catch (error) {
          console.log('‚ö†Ô∏è ScaleService: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã:', error);
          return false;
        }
      } else {
        // –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –ø–æ—Ä—Ç–∞
        this.port = await navigator.serial.requestPort({
          // filters: [
            // { usbVendorId: 0x1a86, usbProductId: 0x7523 }, // CH340
            // { usbVendorId: 0x067b, usbProductId: 0x2303 }, // Prolific
            // { usbVendorId: 0x0403, usbProductId: 0x6001 }  // FTDI
          // ]
        });
      }

      console.log(`üîß ScaleService: –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ä—Ç –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –í–¢–ê-60 (${this.config.baudRate}-${this.config.dataBits}${this.config.parity.charAt(0).toUpperCase()}${this.config.stopBits})`);

      // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ä—Ç –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –¥–ª—è –í–¢–ê-60
      try {
        if (this.port.readable || this.port.writable) {
          console.log('‚ö†Ô∏è ScaleService: –ü–æ—Ä—Ç —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, –Ω–æ –≤ –¥—Ä—É–≥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è...');
          await this.disconnect(); // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
        }
        await this.port.open({
          baudRate: this.config.baudRate,
          dataBits: this.config.dataBits,
          stopBits: this.config.stopBits,
          parity: this.config.parity,
          bufferSize: 1024
        });
      } catch (openError) {
        if (openError.message.includes('port is already open')) {
          console.log('‚ö†Ô∏è ScaleService: –ü–æ—Ä—Ç –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è');
          // –ü–æ—Ä—Ç —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        } else {
          throw openError; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        }
      }

      this.isConnected = true;
      console.log('‚úÖ ScaleService: –í–∞–≥–∏ –í–¢–ê-60 —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º
      if (this.config.connectionStrategy === 'persistentStream') {
        this.readLoopPromise = this.startReadLoop();
      }

      return true;
    } catch (error) {
      console.log('‚ùå ScaleService: –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≤–∞–≥–∏:', error);
      this.port = null; // –û—á–∏—â–∞–µ–º –ø–æ—Ä—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.isConnected = false;
      return false;
    }
  }

  // –ü–æ–º–æ—â–Ω–∏–∫: —Å–±–æ—Ä–∫–∞ —á–∏—Å–ª–∞ –∏–∑ 6 ¬´—Ü–∏—Ñ—Ä–æ–±–∞–π—Ç—ñ–≤¬ª 0x00..0x09, –º–ª–∞–¥—à–∏–µ —Ä–∞–∑—Ä—è–¥—ã –ø–µ—Ä–≤—ã–º–∏
  private digits6ToNumber(bytes6: Uint8Array): number {
    // bytes6: [m1,m2,m3,m4,m5,m6] –≥–¥–µ m1 ‚Äî –º–ª–∞–¥—à–∏–π —Ä–∞–∑—Ä—è–¥ [2]
    let str = '';
    for (let i = 5; i >= 0; i--) { // —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ä–∞–∑—Ä—è–¥–æ–≤: m6..m1
      const d = bytes6[i] & 0x0F;
      if (d > 9) return NaN; // –∑–∞—â–∏—Ç–∞ –æ—Ç –º—É—Å–æ—Ä–∞
      str += d.toString();
    }
    // –£–¥–∞–ª–∏–º –ª–∏–¥–∏—Ä—É—é—â–∏–µ –Ω—É–ª–∏, –Ω–æ –æ—Å—Ç–∞–≤–∏–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω
    str = str.replace(/^0+(?!$)/, '');
    return Number(str);
  }

  // –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è –º–∞—Å—Å—ã (–í–¢–ê-60 –æ–±—ã—á–Ω–æ 3 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫–≥)
  private formatMassFromDigits(bytes6: Uint8Array, decimals: number = 3): number {
    const raw = this.digits6ToNumber(bytes6); // –Ω–∞–ø—Ä–∏–º–µ—Ä 1234
    const factor = Math.pow(10, decimals);
    return raw / factor; // –∫–≥
  }

  // –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è —Ü–µ–Ω—ã
  private formatPriceFromDigits(bytes6: Uint8Array, decimals: number = 2): number {
    const raw = this.digits6ToNumber(bytes6);
    return raw / Math.pow(10, decimals); // –≤–∞–ª—é—Ç–∞ –∑–∞ –∫–≥
  }

  // –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è —Å—É–º–º—ã
  private formatTotalFromDigits(bytes6: Uint8Array, decimals: number = 2): number {
    const raw = this.digits6ToNumber(bytes6);
    return raw / Math.pow(10, decimals);
  }

  // –ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (18 –±–∞–π—Ç) –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –í–¢–ê-60
  private async readOneFrame(timeoutMs: number = 1000): Promise<Uint8Array | null> {
    if (!this.port || !this.isConnected || !this.port.readable) return null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ—Ç–æ–∫
    if (this.port.readable.locked) {
      console.log('‚ö†Ô∏è ScaleService: ReadableStream is locked, skipping read');
      return null;
    }

    this.reader = this.port.readable.getReader();

    try {
      const start = performance.now();
      const buf: number[] = [];

      while (performance.now() - start < timeoutMs) {
        const { value, done } = await this.reader.read();
        if (done) break;
        if (value) {
          for (const b of value) buf.push(b);
          // –ò—â–µ–º –º–∏–Ω–∏–º—É–º 18 –±–∞–π—Ç –ø–æ–¥—Ä—è–¥ ‚Äî –≤ —ç—Ç–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–µ –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞, –ø—Ä–æ—Å—Ç–æ 18 ¬´—Ü–∏—Ñ—Ä–æ–±–∞–π—Ç—ñ–≤¬ª
          while (buf.length >= 18) {
            const frame = buf.splice(0, 18); // –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–µ 18
            return new Uint8Array(frame);
          }
        }
      }
      return null; // —Ç–∞–π–º-–∞—É—Ç
    } finally {
      if (this.reader) {
        this.reader.releaseLock();
        this.reader = undefined;
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ¬´00 00 03¬ª –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –í–¢–ê-60
  private async sendPoll(): Promise<void> {
    if (!this.port || !this.isConnected) {
      throw new Error('Scale is not connected');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏
    if (this.port.writable?.locked) {
      console.log('‚ö†Ô∏è ScaleService: WritableStream is locked, skipping write');
      return;
    }

    try {
      const writer = this.port.writable?.getWriter();
      if (!writer) throw new Error('Failed to get writer');

      await writer.write(new Uint8Array([0x00, 0x00, 0x03]));
      writer.releaseLock();
    } catch (error) {
      console.error('Error sending poll to scale:', error);
      throw error;
    }
  }

  // –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –æ–ø—Ä–æ—Å –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–¥–∞—á–∏, –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–¥—Ä–∞
  public async readScaleOnce(usePolling: boolean = true): Promise<VTAScaleData | null> {
    if (!this.isConnected || this.isReading) return null;

    this.isReading = true;
    try {
      if (usePolling) {
        await this.sendPoll(); // –∑–∞–ø—Ä–æ—Å ¬´–º–∞—Å—Å–∞/—Ü–µ–Ω–∞/—Å—É–º–º–∞¬ª
      }

      const frame = await this.readOneFrame(1500);
      if (!frame) throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ (—Ç–∞–π–º-–∞—É—Ç –∏–ª–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–∞—Å—Å–∞)');

      // m1..m6 c1..c6 v1..v6 (–º–ª–∞–¥—à–∏–µ —Å–Ω–∞—á–∞–ª–∞)
      const m = frame.slice(0, 6);
      const c = frame.slice(6, 12);
      const v = frame.slice(12, 18);

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ decimals –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Å–æ–≤)
      const massKg = this.formatMassFromDigits(m, 3);    // –∫–≥, —Ç—Ä–∏ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
      const price = this.formatPriceFromDigits(c, 2);    // –≤–∞–ª—é—Ç–∞/–∫–≥
      const total = this.formatTotalFromDigits(v, 2);    // –≤–∞–ª—é—Ç–∞

      const scaleData: VTAScaleData = {
        weight: massKg,
        unit: 'kg',
        isStable: true, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ 0
        timestamp: new Date(),
        price: price,
        total: total,
        rawData: frame
      };

      return scaleData;
    } catch (error) {
      const now = new Date();
      const timeStr = now.toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit', second: '2-digit' });
      const uptimeSec = Math.floor((now.getTime() - performance.timeOrigin) / 1000);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
      const errorInfo = {
        timestamp: now.toISOString(),
        timeStr,
        uptimeSec,
        error: {
          message: error instanceof Error ? error.message : String(error),
          name: error instanceof Error ? error.name : 'Unknown',
          stack: error instanceof Error ? error.stack : undefined
        },
        connectionState: {
          isConnected: this.isConnected,
          portExists: !!this.port,
          readableLocked: this.port?.readable?.locked || false,
          writableLocked: this.port?.writable?.locked || false,
          isReading: this.isReading
        },
        config: this.config
      };
      
      console.error(`‚ùå ScaleService: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è [${timeStr}, +${uptimeSec}s]:`, errorInfo);

      // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      if (error instanceof Error) {
        const msg = error.message.toLowerCase();
        if (msg.includes('device has been lost')) {
          console.log('üîå ScaleService: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
        } else if (msg.includes('closed stream')) {
          console.log('üîå ScaleService: –ü–æ—Ç–æ–∫ –±—ã–ª –∑–∞–∫—Ä—ã—Ç');
        } else if (msg.includes('timeout') || msg.includes('—Ç–∞–π–º-–∞—É—Ç')) {
          console.log('‚è±Ô∏è ScaleService: –¢–∞–π–º–∞—É—Ç - –≤–µ—Å—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç');
        } else if (msg.includes('locked')) {
          console.log('üîí ScaleService: –ü–æ—Ç–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º');
        } else if (msg.includes('not connected')) {
          console.log('üîå ScaleService: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        } else if (msg.includes('permission denied')) {
          console.log('üö´ ScaleService: –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ä—Ç—É');
        } else if (msg.includes('busy')) {
          console.log('üîÑ ScaleService: –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º');
        } else {
          console.log('‚ùì ScaleService: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
        }
      }

      // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ "reconnectOnError"
      if (this.config.connectionStrategy === 'reconnectOnError') {
        const errorMessage = error instanceof Error ? error.message : '';
        if (errorMessage.includes('device has been lost') || errorMessage.includes('closed stream')) {
          console.log('üîÑ reconnectOnError: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
          this.handleConnectionLoss();
        }
      }

      return null;
    } finally {
      this.isReading = false;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  private async handleConnectionLoss(): Promise<void> {
    if (!this.isConnected) return;

    console.log('üîå ScaleService: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    await this.disconnect();

    // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    await new Promise(resolve => setTimeout(resolve, 2000));

    try {
      const reconnected = await this.connect(true); // autoConnect = true
      if (reconnected) {
        console.log('‚úÖ ScaleService: –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –≤–µ—Å–∞–º.');
      } else {
        console.log('‚ùå ScaleService: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.');
      }
    } catch (error) {
      console.error('‚ùå ScaleService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }

  // --- –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ "persistentStream" ---
  private async startReadLoop(): Promise<void> {
    console.log('üåÄ persistentStream: –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —á—Ç–µ–Ω–∏—è...');

    let shouldStop = false;
    this.stopReadLoop = () => {
      shouldStop = true;
      if (this.reader) {
        this.reader.cancel().catch(() => {});
      }
    };

    while (!shouldStop && this.isConnected) {
      if (!this.port?.readable) {
        console.log('üåÄ persistentStream: Port not readable, stopping loop.');
        await this.handleConnectionLoss();
        continue;
      }

      this.reader = this.port.readable.getReader();
      const buffer: number[] = [];

      try {
        while (!shouldStop) {
          const { value, done } = await this.reader.read();
          if (done || shouldStop) {
            break;
          }

          if (value) {
            for (const b of value) buffer.push(b);
            this.onRawData?.(value);

            while (buffer.length >= 18) {
              const frame = new Uint8Array(buffer.splice(0, 18));
              const scaleData = this.parseFrame(frame);
              if (scaleData) {
                this.onWeightChange?.(scaleData);
              }
            }
          }
        }
      } catch (error) {
        console.error('üåÄ persistentStream: –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —á—Ç–µ–Ω–∏—è:', error);
        if (!shouldStop) {
          await this.handleConnectionLoss();
        }
      } finally {
        if (this.reader) {
          this.reader.releaseLock();
          this.reader = undefined;
        }
      }
    }
    console.log('üåÄ persistentStream: –¶–∏–∫–ª —á—Ç–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
  }

  private parseFrame(frame: Uint8Array): VTAScaleData | null {
    try {
      const m = frame.slice(0, 6);
      const c = frame.slice(6, 12);
      const v = frame.slice(12, 18);

      const massKg = this.formatMassFromDigits(m, 3);
      const price = this.formatPriceFromDigits(c, 2);
      const total = this.formatTotalFromDigits(v, 2);

      return {
        weight: massKg,
        unit: 'kg',
        isStable: true,
        timestamp: new Date(),
        price,
        total,
        rawData: frame,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–¥—Ä–∞:', error, frame);
      return null;
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö reader'–æ–≤ –∏ writer'–æ–≤
  private forceUnlockStreams(): void {
    try {
      if (this.port?.readable?.locked) {
        console.log('üîì ScaleService: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º ReadableStream');
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å reader –∏ —Å—Ä–∞–∑—É –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –µ–≥–æ
        const reader = this.port.readable.getReader();
        reader.releaseLock();
      }
      if (this.port?.writable?.locked) {
        console.log('üîì ScaleService: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º WritableStream');
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å writer –∏ —Å—Ä–∞–∑—É –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –µ–≥–æ
        const writer = this.port.writable.getWriter();
        writer.releaseLock();
      }
    } catch (error) {
      console.log('‚ö†Ô∏è ScaleService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–æ–≤:', error);
    }
  }

  // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ –≤–∞–≥
  public async disconnect(): Promise<void> {
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è –¥–ª—è persistentStream
      if (this.stopReadLoop) {
        this.stopReadLoop();
        if (this.readLoopPromise) {
          await this.readLoopPromise;
        }
        this.stopReadLoop = null;
        this.readLoopPromise = null;
      }

      if (this.reader) {
        try {
          // –û—Ç–º–µ–Ω—è–µ–º —á—Ç–µ–Ω–∏–µ –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–º–∏—Å–∞
          const cancelPromise = this.reader.cancel();
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è cancel()
          await Promise.race([cancelPromise, new Promise(resolve => setTimeout(resolve, 500))]);
        } catch (error) {
          console.log('ScaleService: Error cancelling reader on disconnect.', error);
        } finally {
          this.reader = undefined;
        }
      }

      if (this.port) {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        this.forceUnlockStreams();

        if (this.port.readable || this.port.writable) {
          try {
            await this.port.close();
            console.log('üîß ScaleService: –ü–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç');
          } catch (error) {
            console.log('ScaleService: Error closing port on disconnect.', error);
          }
        } else {
          console.log('üîß ScaleService: –ü–æ—Ä—Ç —É–∂–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç');
        }
      }
    } catch (error) {
      console.error('Error during scale disconnect:', error);
    } finally {
      this.port = null;
      this.isConnected = false;
      console.log('Scale disconnected');
    }
  }


  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è callback –¥–ª—è –∑–º—ñ–Ω–∏ –≤–∞–≥–∏
  public onWeightData(callback: (data: VTAScaleData) => void): void {
    this.onWeightChange = callback;
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è callback –¥–ª—è —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö
  public onRawDataReceived(callback: (data: Uint8Array) => void): void {
    this.onRawData = callback;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –≤–∞–≥–∏
  public async getCurrentWeight(): Promise<VTAScaleData | null> {
    if (!this.isConnected) {
      console.log('‚ö†Ô∏è ScaleService: –í–∞–≥–∏ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ');
      return null;
    }

    // –í —Ä–µ–∂–∏–º–µ persistentStream –º—ã –Ω–µ —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é, –∞ —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    if (this.config.connectionStrategy === 'persistentStream') {
      try {
        console.log('üåÄ persistentStream: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–µ—Å...');
        await this.sendPoll();
        // –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–¥—É—Ç —á–µ—Ä–µ–∑ onWeightChange, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        // –∏–ª–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è
        return null;
      } catch (error) {
        console.error('üåÄ persistentStream: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
        await this.handleConnectionLoss();
        return null;
      }
    }

    console.log('üîß ScaleService: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ—Å–æ–≤...');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
    return await this.readScaleOnce(true);
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
  public isScaleConnected(): boolean {
    return this.isConnected;
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  public updateConfig(newConfig: Partial<ScaleConnectionConfig>): void {
    const oldStrategy = this.config.connectionStrategy;
    this.config = { ...this.config, ...newConfig };

    // –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    if (newConfig.connectionStrategy && newConfig.connectionStrategy !== oldStrategy) {
      console.log(`üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${newConfig.connectionStrategy}. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.`);
      if (this.isConnected) {
        this.disconnect().then(() => this.connect(true));
      }
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  public getConfig(): ScaleConnectionConfig {
    return { ...this.config };
  }

  // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –í–¢–ê-60
  public async testConnection(): Promise<boolean> {
    try {
      const result = await this.connect();
      if (result) {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ—Å–æ–≤
        const testData = await this.readScaleOnce(true);
        // –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
        // await this.disconnect(); // ‚Üê –£–ë–†–ê–ù–û: –Ω–µ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
        return testData !== null;
      }
      return false;
    } catch (error) {
      console.error('Scale connection test failed:', error);
      return false;
    }
  }

}

export default ScaleService;
