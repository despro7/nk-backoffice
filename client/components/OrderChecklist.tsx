import { useState, useMemo, useEffect, useCallback, useRef } from 'react';
import { Button } from '@heroui/button';
import OrderChecklistItem from './OrderChecklistItem';
import { Progress } from './ui/progress';
import { DynamicIcon } from 'lucide-react/dynamic';
import { useEquipmentFromAuth } from '../contexts/AuthContext';
import { useDebug } from '../contexts/DebugContext';


// –£–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é handlePrintTTN - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ OrderView
// –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∏–º–ø–æ—Ä—Ç—ã

interface OrderItem {
  id: string;
  name: string;
  quantity: number;
  expectedWeight: number;
  status: 'default' | 'pending' | 'success' | 'error' | 'done' | 'awaiting_confirmation' | 'confirmed';
  type: 'box' | 'product';
  boxSettings?: any;
  boxCount?: number;
  boxIndex?: number; // –ò–Ω–¥–µ–∫—Å –∫–æ—Ä–æ–±–∫–∏ (0, 1, 2...)
  portionsRange?: { start: number; end: number }; // –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ü–∏–π –¥–ª—è –∫–æ—Ä–æ–±–∫–∏
  portionsPerBox?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –Ω–∞ –∫–æ—Ä–æ–±–∫—É
}

interface OrderChecklistProps {
  items: OrderItem[];
  totalPortions: number;
  activeBoxIndex: number;
  onActiveBoxChange?: (activeBoxIndex: number) => void;
  onItemStatusChange?: (itemId: string, status: OrderItem['status']) => void;
  onPrintTTN?: () => void; // Callback –¥–ª—è –ø–µ—á–∞—Ç–∏ –¢–¢–ù
  showPrintTTN?: boolean;
  onNextOrder?: () => void; // Callback –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É
  showNextOrder?: boolean;
  isDebugMode?: boolean; // –§–ª–∞–≥ –¥–µ–±–∞–≥-—Ä–µ–∂–∏–º–∞
}

const OrderChecklist = ({ items, totalPortions, activeBoxIndex, onActiveBoxChange, onItemStatusChange, onPrintTTN, showPrintTTN, onNextOrder, showNextOrder }: OrderChecklistProps) => {
  const [activeItemId, setActiveItemId] = useState<string | null>(null);
  const [equipmentState] = useEquipmentFromAuth(); // <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  const { isDebugMode } = useDebug(); // <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–µ–±–∞–≥–∞

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ items
  useEffect(() => {
    // console.log('üîÑ [OrderChecklist] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', {
    //   activeBoxIndex,
    //   items: items
    //     .filter(item => (item.boxIndex || 0) === activeBoxIndex)
    //     .map(item => ({ name: item.name, type: item.type, status: item.status }))
    // });

    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending' –≤ —Ç–µ–∫—É—â–µ–π –∫–æ—Ä–æ–±–∫–µ
    let newActiveItem = items.find((item) => 
      item.status === 'pending' && 
      (item.boxIndex || 0) === activeBoxIndex
    );

    // –ï—Å–ª–∏ –Ω–µ—Ç pending, –∏—â–µ–º –∫–æ—Ä–æ–±–∫—É —Ç–µ–∫—É—â–µ–π –∫–æ—Ä–æ–±–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if (!newActiveItem) {
      newActiveItem = items.find((item) =>
        item.type === 'box' &&
        (item.boxIndex || 0) === activeBoxIndex &&
        item.status === 'awaiting_confirmation'
      );
    }

    // –ï—Å–ª–∏ –∫–æ—Ä–æ–±–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –∏—â–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–æ–±–∫–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'default'
    if (!newActiveItem) {
      newActiveItem = items.find((item) =>
        item.type === 'product' &&
        (item.boxIndex || 0) === activeBoxIndex &&
        item.status === 'default'
      );
    }

    // console.log('üéØ [OrderChecklist] –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç:', newActiveItem?.name || '–Ω–µ—Ç');
    // console.log('üìã [OrderChecklist] –°—Ç–∞—Ç—É—Å—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–æ–±–∫–µ:', 
    //   items
    //     .filter(item => (item.boxIndex || 0) === activeBoxIndex && item.type === 'product')
    //     .map(item => ({ name: item.name, status: item.status }))
    // );

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω –∏ –≤–∞–ª–∏–¥–µ–Ω
    if (newActiveItem && newActiveItem.id) {
      setActiveItemId(newActiveItem.id);
    } else {
      setActiveItemId(null);
    }
  }, [items, activeBoxIndex]);



  const packedPortions = useMemo(() => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º items –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
    const currentBoxItems = items.filter(item => 
      item.type === 'product' && (item.boxIndex || 0) === activeBoxIndex
    );
    
    const packed = currentBoxItems.reduce((acc, item) => {
      if (item.status === 'done') {
        return acc + item.quantity;
      }
      return acc;
    }, 0);
    
    return packed;
  }, [items, activeBoxIndex]);

  // –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Å –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏ –∏ –æ–±—â–∏–π –≤–µ—Å –∑–∞–∫–∞–∑–∞
  const weightInfo = useMemo(() => {
    // –í–µ—Å –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏
    const currentBoxItems = items.filter(item =>
      (item.boxIndex || 0) === activeBoxIndex
    );

    const currentBoxWeight = currentBoxItems.reduce((acc, item) => {
      const itemTotalWeight = item.expectedWeight;
      return acc + itemTotalWeight;
    }, 0);

    // –¢–µ–∫—É—â–∏–π –≤–µ—Å –Ω–∞ –≤–µ—Å–∞—Ö (–≤–µ—Å –∫–æ—Ä–æ–±–∫–∏ + –≤–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤)
    const currentScaleWeight = currentBoxItems.reduce((acc, item) => {
      if (item.type === 'box' || item.status === 'done') {
        return acc + item.expectedWeight;
      }
      return acc;
    }, 0);

    // –û–±—â–∏–π –≤–µ—Å –≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–∞ (—Ç–æ–≤–∞—Ä—ã + –∫–æ—Ä–æ–±–∫–∏)
    const allProductItems = items.filter(item => item.type === 'product');
    const allBoxItems = items.filter(item => item.type === 'box');

    const productsWeight = allProductItems.reduce((acc, item) => {
      const itemTotalWeight = item.expectedWeight;
      return acc + itemTotalWeight;
    }, 0);

    const boxesWeight = allBoxItems.reduce((acc, item) => {
      return acc + item.expectedWeight;
    }, 0);

    const totalOrderWeight = productsWeight + boxesWeight;

    return {
      currentBoxWeight,
      currentScaleWeight,
      totalOrderWeight
    };
  }, [items, activeBoxIndex]);

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ—Ä–æ–±–∫–∏
  const currentBoxTotalPortions = useMemo(() => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º items –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å packedPortions
    const currentBoxItems = items.filter(item => 
      item.type === 'product' && (item.boxIndex || 0) === activeBoxIndex
    );
    
    const total = currentBoxItems.reduce((acc, item) => {
      return acc + item.quantity;
    }, 0);
    
    return total;
  }, [items, activeBoxIndex]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è –∫–æ—Ä–æ–±–∫–∞
  const isCurrentBoxComplete = useMemo(() => {
    const currentBoxItems = items.filter(item => 
      item.type === 'product' && (item.boxIndex || 0) === activeBoxIndex
    );
    
    // –ö–æ—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –µ—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–µ–π —Å–æ–±—Ä–∞–Ω—ã
    return currentBoxItems.length > 0 && currentBoxItems.every(item => item.status === 'done');
  }, [items, activeBoxIndex]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∑–≤–µ—à–µ–Ω–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è –∫–æ—Ä–æ–±–∫–∞
  const isCurrentBoxConfirmed = useMemo(() => {
    const currentBox = items.find(item =>
      item.type === 'box' && (item.boxIndex || 0) === activeBoxIndex
    );

    // –ö–æ—Ä–æ–±–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π –µ—Å–ª–∏ –æ–Ω–∞ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'confirmed' –∏–ª–∏ 'done'
    return currentBox?.status === 'confirmed' || currentBox?.status === 'done';
  }, [items, activeBoxIndex]);

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ü–∏–π –ø–æ –≤—Å–µ–º—É –∑–∞–∫–∞–∑—É
  const totalPackedPortions = useMemo(() => {
    return items
      .filter(item => item.type === 'product' && item.status === 'done')
      .reduce((acc, item) => acc + item.quantity, 0);
  }, [items]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –≤–µ—Å—å –∑–∞–∫–∞–∑
  const isOrderComplete = useMemo(() => {
    const allProductItems = items.filter(item => item.type === 'product');
    return allProductItems.length > 0 && allProductItems.every(item => item.status === 'done');
  }, [items]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –∫–æ—Ä–æ–±–∫–∞
  const hasNextBox = useMemo(() => {
    const totalBoxes = items.filter(item => item.type === 'box').length;
    return activeBoxIndex < totalBoxes - 1;
  }, [items, activeBoxIndex]);

  const handleItemClick = (itemId: string) => {
    const clickedItem = items.find(item => item.id === itemId);

    // –ö–æ—Ä–æ–±–∫–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã, –∫—Ä–æ–º–µ awaiting_confirmation
    // –ö–æ—Ä–æ–±–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'done' –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è
    if (clickedItem?.type === 'box' && clickedItem?.status !== 'awaiting_confirmation') {
      return;
    }

    // –¢–æ–≤–∞—Ä—ã –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã, –ø–æ–∫–∞ –∫–æ—Ä–æ–±–∫–∞ –Ω–µ –≤–∑–≤–µ—à–µ–Ω–∞
    if (clickedItem?.type === 'product' && !isCurrentBoxConfirmed) {
      return;
    }

    setActiveItemId(itemId);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ callback
    if (onItemStatusChange) {
        onItemStatusChange(itemId, 'pending');
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ default
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ boxIndex
        const currentItem = items.find(item => item.id === itemId);
        const currentBoxIndex = currentItem?.boxIndex || 0;

        items.forEach(item => {
          if (item.id !== itemId && item.status === 'pending' && (item.boxIndex || 0) === currentBoxIndex) {
            onItemStatusChange(item.id, 'default');
          }
        });

      }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ—Ä–æ–±–∫–∏
  const handleBoxComplete = (itemId: string) => {
    if (onItemStatusChange) {
      onItemStatusChange(itemId, 'done');
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–æ–±–∫–µ
      // –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–æ–±–∫—É –ø–æ itemId, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—ë boxIndex
      const boxItem = items.find(item => item.id === itemId);
      const boxIndex = boxItem?.boxIndex || 0;
      
      const firstProduct = items.find((item) => 
        item.type === 'product' && 
        (item.boxIndex || 0) === boxIndex && 
        item.status === 'default'
      );
      
      if (firstProduct) {
        handleItemClick(firstProduct.id);
      } else {
        setActiveItemId(null);
      }
    }
  };



  // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–∞–±–æ–≤
  const CustomBoxTabs = ({ 
    items, 
    activeBoxIndex, 
    onActiveBoxChange, 
    totalPortions 
  }: {
    items: OrderItem[];
    activeBoxIndex: number;
    onActiveBoxChange: (index: number) => void;
    totalPortions: number;
  }) => {
    const boxCount = items.filter((item) => item.type === "box").length;
    
    if (boxCount <= 1) return null;

    return (
      <div className="mb-4">
        <div className="flex gap-3 overflow-x-auto pb-2">
          {Array.from({ length: boxCount }, (_, index) => {
            const boxItems = items.filter(
              (item) =>
                (item.boxIndex || 0) === index && item.type === "product",
            );
            const boxPortions = boxItems.reduce(
              (sum, item) => sum + item.quantity,
              0,
            );
            const boxItem = items.find(item => item.type === "box" && (item.boxIndex || 0) === index);
            const boxName = boxItem?.name || `–ö–æ—Ä–æ–±–∫–∞ ${index + 1}`;
            const isActive = index === activeBoxIndex;

            return (
              <button
                key={index}
                onClick={() => onActiveBoxChange(index)}
                className={`flex-1 min-w-0 p-3 bg-white border rounded-lg transition-all duration-200 ${
                  isActive 
                    ? 'border-blue-500 ring-2 ring-blue-500/20 bg-blue-50' 
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                <div className="flex items-center justify-between gap-2">
                  <span className={`text-base font-semibold px-1 py-0 flex items-center gap-2 ${
                    isActive ? 'text-blue-700' : 'text-gray-700'
                  }`}>
                    <DynamicIcon name="package" size={20} strokeWidth={1.5} /> 
                    {boxName}
                  </span>
                  <div className={`text-sm px-1 ${
                    isActive ? 'text-blue-600' : 'text-gray-600'
                  }`}>
                    {boxPortions} –ø–æ—Ä—Ü–∏–π
                  </div>
                </div>
              </button>
            );
          })}
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-4 bg-white p-4 rounded-lg shadow">
      {/* –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∞–±—ã, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ BoxSelector */}
      {/* {items.filter((item) => item.type === "box").length > 1 && (
        <Tabs
          selectedKey={activeBoxIndex.toString()}
          onSelectionChange={(key) => onActiveBoxChange?.(Number(key))}
          variant="solid"
          color="default"
          size="lg"
          classNames={{
          tabList: "gap-2 p-[6px] bg-gray-100 rounded-lg w-full",
          cursor: "bg-blue-500 text-white shadow-sm rounded-md",
          tab: "px-3 py-1.5 text-sm font-normal flex-1 data-[hover-unselected=true]:opacity-100 text-neutral-500",
          tabContent: "group-data-[selected=true]:text-white text-neutral-400"
        }}
      >
        {Array.from(
          { length: items.filter((item) => item.type === "box").length },
          (_, index) => {
            // ... existing tab logic ...
          }
        )}
      </Tabs>
    )} */}

      {/* –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∑–∞–∫–∞–∑–∞ */}
      <div className="bg-success-100 p-4 rounded-sm mb-4">
        <div className="flex justify-between items-center text-success-700 text-lg font-medium">
          <span>–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä—Ü—ñ–π</span>
          <div className="flex items-center gap-8">
            {weightInfo.totalOrderWeight > 0 && (
              <span className="text-base leading-[100%] border-1 border-success-700/10 bg-success-700/5 rounded p-1">
                ~{weightInfo.totalOrderWeight.toFixed(3)} –∫–≥
              </span>
            )}
            <span>
              {totalPackedPortions} / {totalPortions}
            </span>
          </div>
        </div>

        <Progress
          value={(totalPackedPortions / totalPortions) * 100}
          className="mt-2"
        />
      </div>

             {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ç–µ–∫—É—â–µ–π –∫–æ—Ä–æ–±–∫–∏ */}
       {/* {items.filter((item) => item.type === "box").length > 1 && (
         <div className="bg-success-100 p-4 rounded-sm mb-4">
           <div className="flex justify-between items-center text-success-700 text-lg font-medium">
             <span>
               {(() => {
                 const boxItem = items.find(item => item.type === "box" && (item.boxIndex || 0) === activeBoxIndex);
                 return boxItem?.name || `–ö–æ—Ä–æ–±–∫–∞ ${activeBoxIndex + 1}`;
               })()} - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä—Ü—ñ–π
             </span>
             <div className="flex items-center gap-8">
               {weightInfo.currentBoxWeight > 0 && (
                 <span className="text-base leading-[100%] border-1 border-success-700/10 bg-success-700/5 rounded p-1">
                   ~{weightInfo.currentBoxWeight.toFixed(3)} –∫–≥
                 </span>
               )}
               <span>
                 {packedPortions} / {currentBoxTotalPortions}
               </span>
             </div>
           </div>

           {currentBoxTotalPortions > 0 ? (
             <Progress
               value={(packedPortions / currentBoxTotalPortions) * 100}
               className="mt-2"
             />
           ) : (
             <div className="mt-2 text-center text-sm text-gray-500">
               –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ —É –ø–æ—Ç–æ—á–Ω—ñ–π –∫–æ—Ä–æ–±—Ü—ñ
             </div>
           )}
         </div>
       )} */}


      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö) */}
      {currentBoxTotalPortions === 0 && (
        <div className="text-xs text-orange-600 mt-1">
          ‚ö†Ô∏è –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ —É –ø–æ—Ç–æ—á–Ω—ñ–π –∫–æ—Ä–æ–±—Ü—ñ
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ */}
      <div className="space-y-2 mb-0">
        {items
          .filter((item) => {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ç–µ–∫—É—â–µ–π –∫–æ—Ä–æ–±–∫–µ
            const boxIndex = item.boxIndex || 0;
            return boxIndex === activeBoxIndex;
          })
          .map((item) => (
            <div key={item.id} className="relative">
              <OrderChecklistItem
                item={item}
                isActive={activeItemId === item.id}
                isBoxConfirmed={isCurrentBoxConfirmed}
                onClick={() => handleItemClick(item.id)}
              />
            </div>
          ))}
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
      <div className="space-y-3">
        {/* –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è –∫–æ—Ä–æ–±–∫–∞" */}
        {isCurrentBoxComplete && hasNextBox && (
          <Button
            onPress={() => onActiveBoxChange && onActiveBoxChange(activeBoxIndex + 1)}
            className="mt-6 w-full bg-blue-600 text-white p-8 rounded-md text-lg font-medium hover:bg-blue-700 shadow-sm flex items-center justify-center gap-2"
          >
            –ù–∞—Å—Ç—É–ø–Ω–∞ –∫–æ—Ä–æ–±–∫–∞ <DynamicIcon name="arrow-right" size={20} strokeWidth={1.5} />
          </Button>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ "–†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –¢–¢–ù" */}
        {(isOrderComplete || showPrintTTN || isDebugMode) && (
          <Button
            onPress={onPrintTTN}
            disabled={false} // –£–±–∏—Ä–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –∏–∑ OrderView
            className="mt-6 w-full bg-danger text-white p-8 rounded-md text-lg font-medium hover:bg-danger-500 shadow-sm flex items-center justify-center gap-2 disabled:opacity-50"
          >
            –†–æ–∑–¥—Ä—É–∫—É–≤–∞—Ç–∏ –¢–¢–ù <DynamicIcon name="printer" size={20} strokeWidth={1.5} />
          </Button>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" */}
        {showNextOrder && (
          <Button
            onPress={onNextOrder}
            className="mt-3 w-full bg-primary text-white p-8 rounded-md text-lg font-medium shadow-sm flex items-center justify-center gap-2"
          >
            –ù–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è <DynamicIcon name="arrow-right-circle" size={20} strokeWidth={1.5} />
          </Button>
        )}
      </div>
    </div>
  );
};

export default OrderChecklist;
