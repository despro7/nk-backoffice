import { prisma } from '../lib/utils.js';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import crypto from 'crypto';
import { Request, Response } from 'express';
import { UserType, LoginRequest, RegisterRequest, UpdateProfileRequest, AuthResponse, RefreshTokenRequest, RefreshTokenResponse, sanitizeUser } from "../types/auth.js";

// –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
let loggingSettings: any = {
  console: {
    logAccessToken: true,
    logRefreshToken: true,
    logTokenExpiry: true,
    logFrequency: 5
  },
  toast: {
    logLoginLogout: true,
    logTokenGenerated: false,
    logTokenRefreshed: true,
    logTokenRemoved: true,
    logTokenExpired: true,
    logAuthError: true,
    logRefreshError: true
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
export function updateLoggingSettings(newSettings: any) {
  loggingSettings = newSettings;
}


export class AuthService {
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
  private static readonly ACCESS_TOKEN_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '1h'; // 1 —á–∞—Å
  private static readonly REFRESH_TOKEN_EXPIRES_IN = process.env.JWT_REFRESH_EXPIRES_IN || '30d'; // 30 –¥–Ω–µ–π
  private static readonly USER_ACTIVITY_THRESHOLD = 30 * 24 * 60 * 60 * 1000; // 30 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ access token –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è cookies
  private static getAccessTokenCookieMaxAge(): number {
    return this.parseExpiryTime(this.ACCESS_TOKEN_EXPIRES_IN) * 1000;
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ (–±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
  static {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
  }

  static async register(userData: RegisterRequest): Promise<AuthResponse> {
    const existingUser = await prisma.user.findUnique({
      where: {
        email: userData.email
      }
    });

    if (existingUser) {
      throw new Error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î');
    }

    const hashedPassword = await bcrypt.hash(userData.password, 10);
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const newUser = await prisma.user.create({
      data: {
        name: userData.name || "",
        email: userData.email,
        password: hashedPassword,
        role: userData.role || "user",
        roleName: userData.roleName || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
        lastLoginAt: new Date(),
        lastActivityAt: new Date(),
        isActive: true,
        // –ü–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º refresh token
        refreshToken: null,
        refreshTokenExpiresAt: null,
      },
    });

    // –¢–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º user.id
    const { accessToken, refreshToken, expiresIn } = await this.generateTokenPair(newUser as UserType);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ö–µ—à–µ–º refresh token
    const refreshExpiryDate = new Date(Date.now() + this.getRefreshTokenExpiryMs());
    await prisma.user.update({
      where: { id: newUser.id },
      data: {
        refreshToken: this.hashToken(refreshToken),
        refreshTokenExpiresAt: refreshExpiryDate,
      },
    });

    // –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ refresh —Ç–æ–∫–µ–Ω–∞

    return { 
      token: accessToken, 
      refreshToken, 
      user: sanitizeUser(newUser),
      expiresIn
    };
  }

  static async login(credentials: LoginRequest): Promise<AuthResponse> {
    const user = await prisma.user.findUnique({
      where: {
        email: credentials.email
      }
    });

    if (!user) {
      throw new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ');
    }

    const isValidPassword = await bcrypt.compare(credentials.password, user.password);
    if (!isValidPassword) {
      throw new Error('–ù–µ–≤—ñ—Ä–Ω—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (!user.isActive) {
      throw new Error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π');
    }

    const { accessToken, refreshToken, expiresIn } = await this.generateTokenPair(user as UserType);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ refresh token
    const refreshExpiryDate = new Date(Date.now() + this.getRefreshTokenExpiryMs());
    await prisma.user.update({
      where: { id: user.id },
      data: {
        lastLoginAt: new Date(),
        lastActivityAt: new Date(),
        refreshToken: this.hashToken(refreshToken),
        refreshTokenExpiresAt: refreshExpiryDate,
      }
    });

    // –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ refresh —Ç–æ–∫–µ–Ω–∞

    return { 
      token: accessToken, 
      refreshToken, 
      user: sanitizeUser(user),
      expiresIn
    };
  }

  static async refreshToken(refreshTokenData: RefreshTokenRequest): Promise<RefreshTokenResponse> {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ refresh —Ç–æ–∫–µ–Ω—É
      const hashedToken = this.hashToken(refreshTokenData.refreshToken);

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      // console.log('üîç [RefreshToken] –ü–æ–ª—É—á–µ–Ω refresh —Ç–æ–∫–µ–Ω:', refreshTokenData.refreshToken.substring(0, 50) + '...');
      // console.log('üîç [RefreshToken] –•–µ—à —Ç–æ–∫–µ–Ω–∞:', hashedToken);
      // console.log('üîç [RefreshToken] –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:', new Date().toISOString());

      const user = await prisma.user.findFirst({
        where: {
          refreshToken: hashedToken,
          refreshTokenExpiresAt: { gt: new Date() }
        }
      });

      if (!user) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ - –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        const userWithoutExpiry = await prisma.user.findFirst({
          where: {
            refreshToken: hashedToken
          }
        });

        if (userWithoutExpiry) {
          // console.log('üîç [RefreshToken] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
          // console.log('üîç [RefreshToken] refreshTokenExpiresAt:', userWithoutExpiry.refreshTokenExpiresAt);
          // console.log('üîç [RefreshToken] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω:', userWithoutExpiry.isActive);
          // console.log('üîç [RefreshToken] –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:', userWithoutExpiry.lastActivityAt);
        } else {
          // console.log('üîç [RefreshToken] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ö–µ—à–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π refresh —Ç–æ–∫–µ–Ω');
      }

      // console.log('üîç [RefreshToken] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email);
      // console.log('üîç [RefreshToken] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω:', user.isActive);
      // console.log('üîç [RefreshToken] refreshTokenExpiresAt:', user.refreshTokenExpiresAt);

      if (!user.isActive) {
        console.log('‚ùå [RefreshToken] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
        throw new Error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–∞–≤–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
      const lastActivity = user.lastActivityAt || user.lastLoginAt || user.createdAt;
      const timeSinceLastActivity = Date.now() - lastActivity.getTime();

      // console.log('üîç [RefreshToken] –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:', lastActivity);
      // console.log('üîç [RefreshToken] –î–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', daysSinceLastActivity);
      // console.log('üîç [RefreshToken] –ü–æ—Ä–æ–≥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–¥–Ω–µ–π):', Math.round(this.USER_ACTIVITY_THRESHOLD / (1000 * 60 * 60 * 24)));

      if (timeSinceLastActivity > this.USER_ACTIVITY_THRESHOLD) {
        console.log('‚ùå [RefreshToken] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞, –±–ª–æ–∫–∏—Ä—É–µ–º
        await prisma.user.update({
          where: { id: user.id },
          data: {
            isActive: false,
            refreshToken: null,
            refreshTokenExpiresAt: null
          }
        });
        throw new Error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤
      const { accessToken, refreshToken, expiresIn } = await this.generateTokenPair(user as UserType);

      // –û–±–Ω–æ–≤–ª—è–µ–º refresh token –≤ –±–∞–∑–µ
      const refreshExpiryDate = new Date(Date.now() + this.getRefreshTokenExpiryMs());
      await prisma.user.update({
        where: { id: user.id },
        data: {
          refreshToken: this.hashToken(refreshToken),
          refreshTokenExpiresAt: refreshExpiryDate,
        }
      });

      // –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ refresh —Ç–æ–∫–µ–Ω–∞

      return { token: accessToken, refreshToken, expiresIn };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ refreshToken:', error);
      throw error;
    }
  }

  static async logout(userId: number): Promise<void> {
    // –û—á–∏—â–∞–µ–º refresh —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.user.update({
      where: { id: userId },
      data: {
        refreshToken: null,
        refreshTokenExpiresAt: null
      }
    });

    console.log(`‚úÖ [AuthService] –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  }

  static async updateUserActivity(userId: number): Promise<void> {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.user.update({
      where: { id: userId },
      data: { lastActivityAt: new Date() }
    });
  }

  private static async generateTokenPair(user: UserType): Promise<{ accessToken: string, refreshToken: string, expiresIn: number }> {
    const secret = process.env.JWT_SECRET || 'fallback_secret';

    if (!secret) {
      throw new Error('JWT_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    // console.log('üîç [TokenGen] ACCESS_TOKEN_EXPIRES_IN:', this.ACCESS_TOKEN_EXPIRES_IN);
    // console.log('üîç [TokenGen] REFRESH_TOKEN_EXPIRES_IN:', this.REFRESH_TOKEN_EXPIRES_IN);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º access —Ç–æ–∫–µ–Ω
    const accessToken = (jwt as any).sign(
      {
        userId: user.id,
        role: user.role,
        email: user.email,
        name: user.name,
        roleName: user.roleName,
        tokenType: 'access'
      },
      secret,
      { expiresIn: this.ACCESS_TOKEN_EXPIRES_IN }
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º refresh —Ç–æ–∫–µ–Ω
    const refreshToken = (jwt as any).sign(
      {
        userId: user.id,
        role: user.role,
        email: user.email,
        name: user.name,
        roleName: user.roleName,
        tokenType: 'refresh'
      },
      secret,
      { expiresIn: this.REFRESH_TOKEN_EXPIRES_IN }
    );

    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ access —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    const expiresIn = this.parseExpiryTime(this.ACCESS_TOKEN_EXPIRES_IN);
    const accessExpiryDate = new Date(Date.now() + expiresIn * 1000);
    const refreshExpiryMs = this.getRefreshTokenExpiryMs();
    const refreshExpiryDate = new Date(Date.now() + refreshExpiryMs);

    // console.log('üîç [TokenGen] Access token expires in:', expiresIn, 'seconds');
    // console.log('üîç [TokenGen] Refresh token expires in:', refreshExpiryMs, 'ms');
    // console.log('üîç [TokenGen] Refresh token expiry date:', refreshExpiryDate.toISOString());

    // –õ–æ–≥–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫

    return { accessToken, refreshToken, expiresIn };
  }

  private static hashToken(token: string): string {
    return crypto.createHash('sha256').update(token).digest('hex');
  }

  private static parseExpiryTime(expiryTime: string): number {
    const unit = expiryTime.slice(-1);
    const value = parseInt(expiryTime.slice(0, -1));
    
    switch (unit) {
      case 's': return value;
      case 'm': return value * 60;
      case 'h': return value * 60 * 60;
      case 'd': return value * 24 * 60 * 60;
      default: return 3600; // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }

  private static getRefreshTokenExpiryMs(): number {
    const expiryTime = this.REFRESH_TOKEN_EXPIRES_IN;
    const unit = expiryTime.slice(-1);
    const value = parseInt(expiryTime.slice(0, -1));
    
    switch (unit) {
      case 's': return value * 1000;
      case 'm': return value * 60 * 1000;
      case 'h': return value * 60 * 60 * 1000;
      case 'd': return value * 24 * 60 * 60 * 1000;
      default: return 30 * 24 * 60 * 60 * 1000; // 30 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }

  static async getUserById(id: number): Promise<UserType | null> {
    const user = await prisma.user.findUnique({
      where: { id: typeof id === "string" ? Number(id) : id },
    });
    return user as UserType;
  }

  static async updateProfile(userId: number, updateData: UpdateProfileRequest): Promise<Omit<UserType, "password">> {
    const user = await prisma.user.findUnique({
      where: { id: userId }
    });

    if (!user) {
      throw new Error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ email –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if (updateData.email && updateData.email !== user.email) {
      const existingUser = await prisma.user.findUnique({
        where: { email: updateData.email }
      });
      if (existingUser) {
        throw new Error('Email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è');
      }
    }

    // –ï—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
    if (updateData.newPassword) {
      if (!updateData.currentPassword) {
        throw new Error('–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—é');
      }
      
      const isValidPassword = await bcrypt.compare(updateData.currentPassword, user.password);
      if (!isValidPassword) {
        throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å');
      }
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateFields: any = {};
    
    if (updateData.name !== undefined) {
      updateFields.name = updateData.name;
    }
    
    if (updateData.email !== undefined) {
      updateFields.email = updateData.email;
    }
    
    if (updateData.newPassword) {
      updateFields.password = await bcrypt.hash(updateData.newPassword, 10);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await prisma.user.update({
      where: { id: userId },
      data: updateFields
    });

    return sanitizeUser(updatedUser) as Omit<UserType, "password">;
  }

  static async setAuthCookies(res: Response, accessToken: string, refreshToken: string) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const isProduction = process.env.NODE_ENV === 'production';
    const isHTTPS = process.env.HTTPS === 'true' || isProduction;

    // –î–ª—è cross-site –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ SameSite=None –∏ Secure=true (HTTPS)
    // –î–ª—è localhost –≤ dev ‚Äî Secure=false
    const cookieOptions = {
      httpOnly: true,
      secure: isHTTPS,
      sameSite: isHTTPS ? 'none' as const : 'lax' as const, // none –¥–ª—è HTTPS, lax –¥–ª—è dev
      path: '/'
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º access token cookie (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    const accessTokenMaxAge = this.getAccessTokenCookieMaxAge();
    res.cookie('accessToken', accessToken, {
      ...cookieOptions,
      maxAge: accessTokenMaxAge,
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º refresh token cookie (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –≤—Ä–µ–º—è —á—Ç–æ –∏ –≤ JWT —Ç–æ–∫–µ–Ω–µ)
    const refreshTokenMaxAge = this.getRefreshTokenExpiryMs();
    // console.log('üîç [Cookies] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º refresh token cookie —Å maxAge:', refreshTokenMaxAge, 'ms');

    res.cookie('refreshToken', refreshToken, {
      ...cookieOptions,
      maxAge: refreshTokenMaxAge,
    });
  }

  static async clearAuthCookies(res: Response) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ)
    const isProduction = process.env.NODE_ENV === 'production';
    const isHTTPS = process.env.HTTPS === 'true' || isProduction;
    
    const cookieOptions = {
      httpOnly: true,
      secure: isHTTPS,
      sameSite: isHTTPS ? 'none' as const : 'lax' as const,
      path: '/'
    };
    
    res.clearCookie('accessToken', cookieOptions);
    res.clearCookie('refreshToken', cookieOptions);
  }

  static async getTokenFromCookies(req: Request): Promise<{ accessToken?: string, refreshToken?: string }> {
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ parsed cookies
    let accessToken = req.cookies?.accessToken;
    let refreshToken = req.cookies?.refreshToken;

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    // console.log('üîç [Cookies] Raw accessToken –∏–∑ cookie-parser:', accessToken ? accessToken.substring(0, 30) + '...' : 'null');
    // console.log('üîç [Cookies] Raw refreshToken –∏–∑ cookie-parser:', refreshToken ? refreshToken.substring(0, 30) + '...' : 'null');

    // –ï—Å–ª–∏ cookie-parser –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è, –ø–∞—Ä—Å–∏–º –≤—Ä—É—á–Ω—É—é
    if (!accessToken || !refreshToken) {
      const cookieHeader = req.headers.cookie;
      // console.log('üîç [Cookies] Cookie header:', cookieHeader);
      if (cookieHeader) {
        const cookies = cookieHeader.split(';').reduce((acc, cookie) => {
          const [key, value] = cookie.trim().split('=');
          if (key && value) {
            acc[key] = decodeURIComponent(value); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded –∑–Ω–∞—á–µ–Ω–∏—è
          }
          return acc;
        }, {} as Record<string, string>);

        // console.log('üîç [Cookies] Parsed cookies:', Object.keys(cookies));

        accessToken = accessToken || cookies.accessToken;
        refreshToken = refreshToken || cookies.refreshToken;

        // console.log('üîç [Cookies] –ü–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ accessToken:', accessToken ? accessToken.substring(0, 30) + '...' : 'null');
        // console.log('üîç [Cookies] –ü–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ refreshToken:', refreshToken ? refreshToken.substring(0, 30) + '...' : 'null');
      }
    }

    return { accessToken, refreshToken };
  }
}
