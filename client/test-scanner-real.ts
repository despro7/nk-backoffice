import BarcodeScannerService from './services/BarcodeScannerService';

/**
 * –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∞–Ω–µ—Ä–∞ MC-200PT —á–µ—Ä–µ–∑ BarcodeScannerService
 * –í–ê–ñ–ù–û: –î–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π —Å–∫–∞–Ω–µ—Ä MC-200PT, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –ø–æ USB
 */

class ScannerRealTest {
  private scannerService: BarcodeScannerService;
  private testResults: { [key: string]: boolean } = {};
  private scannedCodes: { code: string; type: string; timestamp: Date }[] = [];

  constructor() {
    this.scannerService = new BarcodeScannerService();
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∫–∞–Ω–µ—Ä—É
  async testScannerConnection(): Promise<boolean> {
    console.log('üß™ === –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –°–ö–ê–ù–ï–†–£ MC-200PT ===\n');

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∫–∞–Ω–µ—Ä–∞
      console.log('1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∫–∞–Ω–µ—Ä—É...');
      const connected = await this.scannerService.connect();
      
      if (!connected) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∫–∞–Ω–µ—Ä—É');
        this.testResults['connection'] = false;
        return false;
      }
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–∫–∞–Ω–µ—Ä—É (—Ä–µ–∂–∏–º —ç–º—É–ª—è—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)');
      this.testResults['connection'] = true;

      // 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
      console.log('\n2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
      this.setupEventHandlers();
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      this.testResults['eventHandlers'] = true;

      // 3. –¢–µ—Å—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–¥–æ–≤
      console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–æ–≤...');
      await this.testBarcodeScanning();

      // 4. –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
      await this.testScanningQuality();

      // 5. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∫–∞–Ω–µ—Ä–∞
      console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
      await this.testScannerPerformance();

      // 6. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–∫–∞–Ω–µ—Ä–∞
      console.log('\n6Ô∏è‚É£ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–∫–∞–Ω–µ—Ä–∞...');
      await this.scannerService.disconnect();
      console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–∫–∞–Ω–µ—Ä–∞');
      this.testResults['disconnection'] = true;

      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
      return false;
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  private setupEventHandlers(): void {
    this.scannerService.addEventListener((event) => {
      switch (event.type) {
        case 'connected':
          console.log('üîó –°–∫–∞–Ω–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω');
          break;
        case 'disconnected':
          console.log('üîå –°–∫–∞–Ω–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω');
          break;
        case 'data':
          if (event.data) {
            this.handleScannedCode(event.data);
          }
          break;
        case 'error':
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞:', event.error);
          break;
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
  private handleScannedCode(barcodeData: any): void {
    this.scannedCodes.push({
      code: barcodeData.code,
      type: barcodeData.type,
      timestamp: barcodeData.timestamp
    });

    console.log(`üì∑ –ö–æ–¥ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω: ${barcodeData.code} (${barcodeData.type})`);
  }

  // –¢–µ—Å—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–¥–æ–≤
  private async testBarcodeScanning(): Promise<void> {
    return new Promise((resolve) => {
      const expectedTypes = ['EAN-13', 'EAN-8', 'Code-128', 'Code-39', 'QR-Code'];
      const foundTypes = new Set<string>();
      const initialCount = this.scannedCodes.length;

      console.log('   –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤:');
      console.log('   - EAN-13 (13 —Ü–∏—Ñ—Ä)');
      console.log('   - EAN-8 (8 —Ü–∏—Ñ—Ä)');
      console.log('   - Code-128 (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)');
      console.log('   - Code-39 (—Å –¥–µ—Ñ–∏—Å–∞–º–∏)');
      console.log('   - QR-–∫–æ–¥');
      console.log('   –£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥...\n');

      const timeout = setTimeout(() => {
        const scannedCount = this.scannedCodes.length - initialCount;
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
        for (let i = initialCount; i < this.scannedCodes.length; i++) {
          foundTypes.add(this.scannedCodes[i].type);
        }

        console.log(`‚úÖ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ${scannedCount} –∫–æ–¥–æ–≤`);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤: ${Array.from(foundTypes).join(', ')}`);
        
        this.testResults['barcodeScanning'] = scannedCount > 0;
        this.testResults['diverseTypes'] = foundTypes.size >= 2;
        
        resolve();
      }, 30000);

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const progressInterval = setInterval(() => {
        const currentCount = this.scannedCodes.length - initialCount;
        if (currentCount > 0) {
          console.log(`   –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${currentCount} –∫–æ–¥–æ–≤...`);
        }
      }, 5000);

      setTimeout(() => clearInterval(progressInterval), 30000);
    });
  }

  // –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  private async testScanningQuality(): Promise<void> {
    return new Promise((resolve) => {
      const testCode = '1234567890123'; // –¢–µ—Å—Ç–æ–≤—ã–π EAN-13 –∫–æ–¥
      const attempts: { success: boolean; time: number }[] = [];
      const initialCount = this.scannedCodes.length;

      console.log(`   –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–æ–¥ 5 —Ä–∞–∑: ${testCode}`);
      console.log('   –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞–Ω–µ—Ä–∞...\n');

      const timeout = setTimeout(() => {
        const relevantScans = this.scannedCodes.slice(initialCount)
          .filter(scan => scan.code === testCode);

        const successRate = relevantScans.length >= 3 ? 1 : relevantScans.length / 3;
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫–æ–¥–∞: ${relevantScans.length}/5`);
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${(successRate * 100).toFixed(1)}%`);
        
        if (relevantScans.length > 1) {
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
          const times = relevantScans.map((scan, index) => {
            if (index === 0) return 0;
            return scan.timestamp.getTime() - relevantScans[index - 1].timestamp.getTime();
          }).filter(time => time > 0);

          if (times.length > 0) {
            const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
            console.log(`‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏: ${avgTime.toFixed(0)}–º—Å`);
          }
        }
        
        this.testResults['scanningQuality'] = successRate >= 0.6; // 60% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        resolve();
      }, 25000);
    });
  }

  // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∫–∞–Ω–µ—Ä–∞
  private async testScannerPerformance(): Promise<void> {
    return new Promise((resolve) => {
      const startTime = Date.now();
      const initialCount = this.scannedCodes.length;

      console.log('   –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: —Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∫–æ–¥–æ–≤ –∑–∞ 15 —Å–µ–∫—É–Ω–¥...\n');

      const timeout = setTimeout(() => {
        const endTime = Date.now();
        const duration = (endTime - startTime) / 1000;
        const scannedCount = this.scannedCodes.length - initialCount;
        const rate = scannedCount / duration;

        console.log(`‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:`);
        console.log(`   –í—Ä–µ–º—è: ${duration.toFixed(1)} —Å–µ–∫—É–Ω–¥`);
        console.log(`   –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${scannedCount} –∫–æ–¥–æ–≤`);
        console.log(`   –°–∫–æ—Ä–æ—Å—Ç—å: ${rate.toFixed(1)} –∫–æ–¥–æ–≤/—Å–µ–∫`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–æ–≤
        const uniqueCodes = new Set(
          this.scannedCodes.slice(initialCount).map(scan => scan.code)
        );
        console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: ${uniqueCodes.size}`);
        
        this.testResults['performance'] = rate > 0.5; // –ë–æ–ª—å—à–µ 0.5 –∫–æ–¥–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
        this.testResults['uniqueness'] = uniqueCodes.size >= Math.min(3, scannedCount);
        
        resolve();
      }, 15000);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
      const progressInterval = setInterval(() => {
        const currentCount = this.scannedCodes.length - initialCount;
        console.log(`   –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${currentCount} –∫–æ–¥–æ–≤...`);
      }, 3000);

      setTimeout(() => clearInterval(progressInterval), 15000);
    });
  }

  // –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∫–∞–Ω–µ—Ä–∞
  async testDifferentSettings(): Promise<void> {
    console.log('\nüß™ === –¢–ï–°–¢ –†–ê–ó–õ–ò–ß–ù–´–• –ù–ê–°–¢–†–û–ï–ö –°–ö–ê–ù–ï–†–ê ===\n');

    const settings = [
      { autoConnect: true, timeout: 5000, continuousMode: true },
      { autoConnect: true, timeout: 2000, continuousMode: false },
      { autoConnect: false, timeout: 10000, continuousMode: true }
    ];

    for (let i = 0; i < settings.length; i++) {
      const config = settings[i];
      console.log(`${i + 1}Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${JSON.stringify(config)}`);
      
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        this.scannerService.updateConfig(config);
        
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        await this.scannerService.disconnect();
        const connected = await this.scannerService.connect();
        
        if (connected) {
          console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å —ç—Ç–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏');
          
          // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          await this.waitForScanActivity(5000);
          
        } else {
          console.log('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å —ç—Ç–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏');
        }
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: ${error.message}`);
      }
      
      console.log('');
    }
  }

  // –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å–∫–∞–Ω–µ—Ä–∞
  async testScannerStability(): Promise<void> {
    console.log('\nüß™ === –¢–ï–°–¢ –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –°–ö–ê–ù–ï–†–ê ===\n');

    try {
      console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∫–∞–Ω–µ—Ä—É...');
      const connected = await this.scannerService.connect();
      
      if (!connected) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –¥–ª—è —Ç–µ—Å—Ç–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏');
        return;
      }

      let scanCount = 0;
      let errorCount = 0;
      const startTime = Date.now();
      const initialCount = this.scannedCodes.length;
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
      const testDuration = 60000;
      
      console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ ${testDuration / 1000} —Å–µ–∫—É–Ω–¥...`);
      console.log('–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∫–æ–¥—ã –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ...\n');
      
      const progressInterval = setInterval(() => {
        const currentScanCount = this.scannedCodes.length - initialCount;
        if (currentScanCount !== scanCount) {
          scanCount = currentScanCount;
          console.log(`   –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${scanCount} –∫–æ–¥–æ–≤...`);
        }
      }, 10000);

      await new Promise(resolve => setTimeout(resolve, testDuration));
      
      clearInterval(progressInterval);
      
      const endTime = Date.now();
      const actualDuration = endTime - startTime;
      const finalScanCount = this.scannedCodes.length - initialCount;
      const scanRate = (finalScanCount / (actualDuration / 1000)).toFixed(2);
      
      console.log(`‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:`);
      console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${actualDuration / 1000} —Å–µ–∫—É–Ω–¥`);
      console.log(`   –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${finalScanCount} –∫–æ–¥–æ–≤`);
      console.log(`   –û—à–∏–±–æ–∫: ${errorCount}`);
      console.log(`   –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${scanRate} –∫–æ–¥–æ–≤/—Å–µ–∫`);
      
      await this.scannerService.disconnect();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏:', error);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∫–∞–Ω–µ—Ä–∞
  private async waitForScanActivity(timeout: number): Promise<boolean> {
    return new Promise((resolve) => {
      const initialCount = this.scannedCodes.length;
      let activityDetected = false;
      
      const timer = setTimeout(() => {
        resolve(activityDetected);
      }, timeout);
      
      const checkActivity = setInterval(() => {
        if (this.scannedCodes.length > initialCount && !activityDetected) {
          activityDetected = true;
          clearTimeout(timer);
          clearInterval(checkActivity);
          resolve(true);
        }
      }, 100);
      
      setTimeout(() => clearInterval(checkActivity), timeout);
    });
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
  analyzeScannedCodes(): void {
    console.log('\nüìä === –ê–ù–ê–õ–ò–ó –û–¢–°–ö–ê–ù–ò–†–û–í–ê–ù–ù–´–• –ö–û–î–û–í ===\n');
    
    if (this.scannedCodes.length === 0) {
      console.log('‚ùå –ö–æ–¥—ã –Ω–µ –±—ã–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã');
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    const typeGroups = this.scannedCodes.reduce((groups, scan) => {
      groups[scan.type] = (groups[scan.type] || 0) + 1;
      return groups;
    }, {} as { [key: string]: number });

    console.log('–¢–∏–ø—ã –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤:');
    Object.entries(typeGroups).forEach(([type, count]) => {
      console.log(`  ${type}: ${count} –∫–æ–¥–æ–≤`);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–¥—ã
    console.log('\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤:');
    this.scannedCodes.slice(-5).forEach((scan, index) => {
      console.log(`  ${index + 1}. ${scan.code} (${scan.type}) - ${scan.timestamp.toLocaleTimeString()}`);
    });
  }

  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  printResults(): void {
    console.log('\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ö–ê–ù–ï–†–ê ===\n');
    
    const tests = [
      { key: 'connection', name: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∫–∞–Ω–µ—Ä—É' },
      { key: 'eventHandlers', name: '–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π' },
      { key: 'barcodeScanning', name: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤' },
      { key: 'diverseTypes', name: '–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–∏–ø–æ–≤ –∫–æ–¥–æ–≤' },
      { key: 'scanningQuality', name: '–ö–∞—á–µ—Å—Ç–≤–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' },
      { key: 'performance', name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' },
      { key: 'uniqueness', name: '–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–æ–≤' },
      { key: 'disconnection', name: '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–∫–∞–Ω–µ—Ä–∞' }
    ];
    
    let passedTests = 0;
    
    tests.forEach(test => {
      const result = this.testResults[test.key];
      const status = result ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${test.name}: ${result ? 'PASSED' : 'FAILED'}`);
      if (result) passedTests++;
    });
    
    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${tests.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    console.log(`üì∑ –í—Å–µ–≥–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–¥–æ–≤: ${this.scannedCodes.length}`);
    
    if (passedTests >= tests.length * 0.75) {
      console.log('üéâ –°–ö–ê–ù–ï–† –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!');
    } else if (passedTests >= tests.length * 0.5) {
      console.log('‚ö†Ô∏è –°–∫–∞–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã');
    } else {
      console.log('‚ùå –°–∫–∞–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–ª–æ—Ö–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
async function runScannerRealTests() {
  const tester = new ScannerRealTest();
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∫–∞–Ω–µ—Ä–∞ MC-200PT...\n');
  console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫–∞–Ω–µ—Ä MC-200PT –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n');
  console.log('üìã –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n');
  
  try {
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    await tester.testScannerConnection();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã (–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é)
    // await tester.testDifferentSettings();
    // await tester.testScannerStability();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    tester.analyzeScannedCodes();
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    tester.printResults();
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
  (window as any).runScannerRealTests = runScannerRealTests;
  console.log('üîß –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ runScannerRealTests() –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤.');
}

export { ScannerRealTest, runScannerRealTests };
