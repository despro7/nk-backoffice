import { addToast } from "@heroui/react";
import * as Icons from 'lucide-react';
import React from 'react';

export interface ToastOptions {
  title: string;
  description?: string;
  hideIcon?: boolean;
  variant?: "flat" | "solid" | "bordered";
  color?: "default" | "primary" | "secondary" | "success" | "warning" | "danger";
  timeout?: number;
  shouldShowTimeoutProgress?: boolean;
  placement?: "top-left" | "top-center" | "top-right" | "bottom-left" | "bottom-center" | "bottom-right";
}

export interface LoggingSettings {
  console: {
    logAccessToken: boolean;
    logRefreshToken: boolean;
    logTokenExpiry: boolean;
    logFrequency: number;
  };
  toast: {
    logLoginLogout: boolean;
    logTokenGenerated: boolean;
    logTokenRefreshed: boolean;
    logTokenRemoved: boolean;
    logTokenExpired: boolean;
    logAuthError: boolean;
    logRefreshError: boolean;
  };
}

export class ToastService {
  private static defaultOptions: Partial<ToastOptions> = {
	variant: "flat",
	color: "default",
	hideIcon: true,
    timeout: 10000,
    shouldShowTimeoutProgress: true
  };

  private static settings: LoggingSettings | null = null;

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
  static async loadSettings(): Promise<void> {
    try {
      const response = await fetch('/api/settings/logging', {
        credentials: 'include'
      });
      if (response.ok) {
        this.settings = await response.json() as LoggingSettings;
      } else if (response.status === 401) {
        // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        console.log('üîß [ToastService] User not authenticated, using default settings');
        this.settings = null; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —á–µ—Ä–µ–∑ shouldShowToast
      } else {
        console.error(`üîß [ToastService] Failed to load settings: ${response.status}`);
        this.settings = null;
      }
    } catch (error) {
      console.error('üîß [ToastService] Error loading logging settings:', error);
      this.settings = null;
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
  private static shouldShowToast(type: keyof LoggingSettings['toast']): boolean {
    if (!this.settings) return true; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–∫–∞–∑—É—î–º–æ
    return this.settings.toast[type];
  }

  static show(options: ToastOptions) {
    const mergedOptions = { ...this.defaultOptions, ...options };

    addToast({
      title: mergedOptions.title,
      description: mergedOptions.description,
      variant: mergedOptions.variant,
	  hideIcon: mergedOptions.hideIcon,
      color: mergedOptions.color,
      timeout: mergedOptions.timeout,
      shouldShowTimeoutProgress: mergedOptions.shouldShowTimeoutProgress,
    });
  }

  // –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  static tokenGenerated(userEmail: string) {
    if (!this.shouldShowToast('logTokenGenerated')) return;
    this.show({
      title: "üîë –ù–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ",
      description: `–¢–æ–∫–µ–Ω–∏ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userEmail}`,
      color: "success"
    });
  }

  static tokenRefreshed(userEmail: string) {
    if (!this.shouldShowToast('logTokenRefreshed')) return;
    this.show({
      title: "üîÑ –¢–æ–∫–µ–Ω–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ",
      description: `–°–µ—Å—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${userEmail}`,
      color: "success"
    });
  }

  static tokenRemoved(userEmail: string) {
    if (!this.shouldShowToast('logTokenRemoved')) return;
    this.show({
      title: "üóëÔ∏è –¢–æ–∫–µ–Ω–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ",
      description: `–°–µ—Å—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userEmail}`,
      color: "default"
    });
  }

  static tokenExpired() {
    if (!this.shouldShowToast('logTokenExpired')) return;
    this.show({
      title: "‚è∞ –°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è",
      description: "–í–∞—à–∞ —Å–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...",
      color: "default"
    });
  }

  static loginSuccess(userEmail: string) {
    if (!this.shouldShowToast('logLoginLogout')) return;
    this.show({
      title: "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞",
      description: `–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${userEmail}`,
      color: "success"
    });
  }

  static logoutSuccess() {
    if (!this.shouldShowToast('logLoginLogout')) return;
    this.show({
      title: "üëã –í–∏—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ",
      description: "–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏",
      color: "default"
    });
  }

  static authError(message: string) {
    if (!this.shouldShowToast('logAuthError')) return;
    this.show({
      title: "‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó",
      description: message,
      color: "danger"
    });
  }

  static refreshError() {
    if (!this.shouldShowToast('logRefreshError')) return;
    this.show({
      title: "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó",
      description: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–Ω–æ–≤—É.",
      color: "danger"
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  static updateSettings(newSettings: LoggingSettings) {
    this.settings = newSettings;
    console.log('üîß [ToastService] –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—ñ:', this.settings);
  }

}
