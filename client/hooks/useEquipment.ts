import { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import EquipmentService, { 
  EquipmentStatus, 
  ScaleData, 
  BarcodeData, 
  EquipmentConfig 
} from '../services/EquipmentService';
import ScaleService from '../services/ScaleService';
import BarcodeScannerService, { ScannerEvent } from '../services/BarcodeScannerService'; 


export interface EquipmentState {
  status: EquipmentStatus;
  currentWeight: ScaleData | null;
  lastBarcode: BarcodeData | null;
  isConnected: boolean;
  isScaleConnected: boolean;
  isScannerConnected: boolean;
  isSimulationMode: boolean;
  config: EquipmentConfig | null;
  isLoading: boolean;
}

export interface EquipmentActions {
  connectScale: () => Promise<boolean>;
  disconnectScale: () => Promise<void>;
  connectScanner: () => Promise<boolean>;
  disconnectScanner: () => Promise<void>;
  setConnectionType: (connectionType: 'local' | 'simulation') => void;
  getWeight: () => Promise<ScaleData>;


  updateConfig: (config: Partial<EquipmentConfig>) => void;
  loadConfig: () => Promise<void>;
  saveConfig: (config: EquipmentConfig) => Promise<void>;
  resetConfig: () => Promise<void>;
  refreshConfig: () => Promise<void>;
}

export const useEquipment = (): [EquipmentState, EquipmentActions] => {

  const [status, setStatus] = useState<EquipmentStatus>({
    isConnected: false,
    isSimulationMode: true,
    lastActivity: null,
    error: null
  });

  const [currentWeight, setCurrentWeight] = useState<ScaleData | null>(null);
  const [lastBarcode, setLastBarcode] = useState<BarcodeData | null>(null);
  const [config, setConfig] = useState<EquipmentConfig | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  // –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const [isScaleConnected, setIsScaleConnected] = useState(false);
  const [isScannerConnected, setIsScannerConnected] = useState(false);
  
  const equipmentService = useRef(EquipmentService.getInstance());
  const scaleService = useRef(new ScaleService());
  const scannerService = useRef(new BarcodeScannerService());

  // –ö–µ—à –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (10 –º–∏–Ω—É—Ç)
  const configCacheRef = useRef<{ data: EquipmentConfig | null; timestamp: number } | null>(null);
  const CONFIG_CACHE_DURATION = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç


  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î
  const loadConfig = useCallback(async () => {
    try {
      setIsLoading(true);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const now = Date.now();
      if (configCacheRef.current &&
          (now - configCacheRef.current.timestamp) < CONFIG_CACHE_DURATION) {
        if (process.env.NODE_ENV === 'development') {
          console.log('üîß Using cached equipment config');
        }
        setConfig({ ...configCacheRef.current.data });
        updateStatus({
          isSimulationMode: configCacheRef.current.data?.connectionType === 'simulation',
          isConnected: configCacheRef.current.data?.connectionType === 'simulation'
        });
        setIsLoading(false);
        return;
      }

      const response = await fetch('/api/settings/equipment', {
        credentials: 'include'
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
          configCacheRef.current = {
            data: result.data,
            timestamp: now
          };

          setConfig({ ...result.data }); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–∏
          updateStatus({
            isSimulationMode: result.data.connectionType === 'simulation',
            isConnected: result.data.connectionType === 'simulation'
          });
        }
      }
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Error loading equipment config:', error);
      }
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ë–î
  const saveConfig = useCallback(async (newConfig: EquipmentConfig) => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/settings/equipment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(newConfig)
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
          configCacheRef.current = {
            data: newConfig,
            timestamp: Date.now()
          };

          setConfig({ ...newConfig }); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–∏
          updateStatus({
            isSimulationMode: newConfig.connectionType === 'simulation',
            isConnected: newConfig.connectionType === 'simulation'
          });
        }
      }
    } catch (error) {
      console.error('Error saving equipment config:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const resetConfig = useCallback(async () => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/settings/equipment/reset', {
        method: 'POST',
        credentials: 'include'
      });
      
      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          setConfig({ ...result.data }); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–∏
          updateStatus({
            isSimulationMode: result.data.connectionType === 'simulation',
            isConnected: result.data.connectionType === 'simulation'
          });
        }
      }
    } catch (error) {
      console.error('Error resetting equipment config:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadConfig();
  }, [loadConfig]);

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
  const updateStatus = useCallback((updates: Partial<EquipmentStatus>) => {
    setStatus(prev => ({ ...prev, ...updates }));
  }, []);

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≤–∞–≥
  const connectScale = useCallback(async (): Promise<boolean> => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ config
      if (!config) {
        return false;
      }

      if (config.connectionType === 'simulation') {
        updateStatus({
          isConnected: true,
          lastActivity: new Date(),
          error: null
        });
        setIsScaleConnected(true);
        return true;
      }



      // –õ–æ–∫–∞–ª—å–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
      const result = await scaleService.current.connect();
      if (result) {
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –≤–∞–≥
        scaleService.current.onWeightData((weightData: ScaleData) => {
          setCurrentWeight(weightData);
          updateStatus({
            lastActivity: new Date(),
            error: null
          });
        });

        updateStatus({
          isConnected: true,
          lastActivity: new Date(),
          error: null
        });
        setIsScaleConnected(true);
      }
      
      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      updateStatus({ 
        isConnected: false, 
        error: errorMessage,
        lastActivity: new Date()
      });
      return false;
    }
  }, [updateStatus, config]);

  // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ –≤–∞–≥
  const disconnectScale = useCallback(async (): Promise<void> => {
    try {
      await scaleService.current.disconnect();
      setCurrentWeight(null);
      updateStatus({
        isConnected: false,
        lastActivity: new Date()
      });
      setIsScaleConnected(false);
    } catch (error) {
      console.error('Error disconnecting scale:', error);
    }
  }, [updateStatus]);

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–∫–∞–Ω–µ—Ä–∞
  const connectScanner = useCallback(async (): Promise<boolean> => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ config
      if (!config) {
        return false;
      }
      
      if (config.connectionType === 'simulation') {
        updateStatus({
          isConnected: true,
          lastActivity: new Date(),
          error: null
        });
        setIsScannerConnected(true);
        return true;
      }



      // –õ–æ–∫–∞–ª—å–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
      const result = await scannerService.current.connect();
      if (result) {
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Å–∫–∞–Ω–µ—Ä–∞
        scannerService.current.addEventListener((event: ScannerEvent) => {
          if (event.type === 'data' && event.data) {
            setLastBarcode(event.data);
            updateStatus({ 
              lastActivity: new Date(),
              error: null 
            });
          }
        });
        
        updateStatus({
          isConnected: true,
          lastActivity: new Date(),
          error: null
        });
        setIsScannerConnected(true);
      }
      
      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      updateStatus({ 
        isConnected: false, 
        error: errorMessage,
        lastActivity: new Date()
      });
      return false;
    }
  }, [updateStatus, config]);

  // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ —Å–∫–∞–Ω–µ—Ä–∞
  const disconnectScanner = useCallback(async (): Promise<void> => {
    try {
      await scannerService.current.disconnect();
      setLastBarcode(null);
      updateStatus({
        isConnected: false,
        lastActivity: new Date()
      });
      setIsScannerConnected(false);
    } catch (error) {
      console.error('Error disconnecting scanner:', error);
    }
  }, [updateStatus]);

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  const setConnectionType = useCallback((connectionType: 'local' | 'simulation') => {

    // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç config
    updateStatus({
      isSimulationMode: connectionType === 'simulation',
      isConnected: connectionType === 'simulation',
      lastActivity: new Date()
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º config –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (config) {
      const newConfig = { ...config, connectionType };
      setConfig({ ...newConfig }); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    } else {
      // –ï—Å–ª–∏ config –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π config —Å connectionType
      const tempConfig = {
        connectionType,
        scale: null,
        scanner: null,
        serialTerminal: {
          autoConnect: false,
          baudRate: 9600,
          dataBits: 8,
          stopBits: 1,
          parity: 'none' as const,
          bufferSize: 1024,
          flowControl: 'none' as const
        },
        simulation: null
      };
      setConfig({ ...tempConfig } as EquipmentConfig); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    }
  }, [updateStatus, config]);

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞–≥–∏
  const getWeight = useCallback(async (): Promise<ScaleData> => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ config –≤–º–µ—Å—Ç–æ equipmentService
      if (config?.connectionType === 'simulation') {
        const weightData = await equipmentService.current.getWeight();
        setCurrentWeight(weightData);
        return weightData;
      }

      const weightData = await scaleService.current.getCurrentWeight();
      if (weightData) {
        setCurrentWeight(weightData);
        return weightData;
      } else {
        throw new Error('Failed to get weight from scale');
      }
    } catch (error) {
      console.error('Error getting weight:', error);
      throw error;
    }
  }, [config]);


  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  const updateConfig = useCallback((newConfig: Partial<EquipmentConfig>) => {
    if (config) {
      const updatedConfig = { ...config, ...newConfig };
      setConfig({ ...updatedConfig }); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç

      // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º isSimulationMode –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è connectionType
      if (newConfig.connectionType !== undefined) {
        updateStatus({
          isSimulationMode: newConfig.connectionType === 'simulation',
          isConnected: newConfig.connectionType === 'simulation',
          lastActivity: new Date()
        });
      } else {
        updateStatus({ lastActivity: new Date() });
      }

      // –°–µ—Ä–≤–∏—Å—ã...
      if (newConfig.scale) {
        scaleService.current.updateConfig(newConfig.scale);
      }
      if (newConfig.scanner) {
        scannerService.current.updateConfig(newConfig.scanner);
      }
    } else {
      console.log('üîß useEquipment: Config not loaded yet, cannot update');
    }
  }, [updateStatus, config]);

  // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const [isInitialized, setIsInitialized] = useState(false);

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  useEffect(() => {
    // –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ
    return () => {
      disconnectScale();
      disconnectScanner();
    };
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ config
  useEffect(() => {
    const initEquipment = async () => {
      try {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (!config || isInitialized) {
          return;
        }

        setIsInitialized(true);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
        updateStatus({
          isSimulationMode: config.connectionType === 'simulation',
          isConnected: config.connectionType === 'simulation',
          lastActivity: new Date(),
          error: null
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –≤ —Ä–µ–∂–∏–º—ñ —Å–∏–º—É–ª—è—Ü—ñ—ó
        if (config.connectionType === 'simulation') {
          await connectScale();
          await connectScanner();
        } else {
        }
      } catch (error) {
        console.error('Error initializing equipment:', error);
      }
    };

    initEquipment();
  }, [config, isInitialized]); // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç config –∏ isInitialized

  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω - –ì–õ–£–ë–û–ö–û–ï –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–ï –¥–ª—è React
  const state: EquipmentState = useMemo(() => ({
    status: { ...status }, // –ö–ª–æ–Ω–∏—Ä—É–µ–º status –æ–±—ä–µ–∫—Ç
    currentWeight: currentWeight ? { ...currentWeight } : null, // –ö–ª–æ–Ω–∏—Ä—É–µ–º currentWeight
    lastBarcode: lastBarcode ? { ...lastBarcode } : null, // –ö–ª–æ–Ω–∏—Ä—É–µ–º lastBarcode
    isConnected: status.isConnected,
    isScaleConnected,
    isScannerConnected,
    isSimulationMode: status.isSimulationMode,
    config: config ? { ...config } : null, // –ö–ª–æ–Ω–∏—Ä—É–µ–º config –æ–±—ä–µ–∫—Ç
    isLoading
  }), [status, currentWeight, lastBarcode, config, isLoading, isScaleConnected, isScannerConnected]);



  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const refreshConfig = useCallback(async () => {
    await loadConfig();
  }, [loadConfig]);

  // –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ—ó
  const actions: EquipmentActions = {
    connectScale,
    disconnectScale,
    connectScanner,
    disconnectScanner,
    setConnectionType,
    getWeight,


    updateConfig,
    loadConfig,
    saveConfig,
    resetConfig,
    refreshConfig
  };

  return [state, actions];
};
