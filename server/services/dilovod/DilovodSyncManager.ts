// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

import crypto from 'crypto';
import { prisma } from '../../lib/utils.js';
import { DilovodProduct, DilovodSyncResult } from './DilovodTypes.js';
import { logWithTimestamp } from './DilovodUtils.js';
import { syncSettingsService } from '../syncSettingsService.js';

export class DilovodSyncManager {
  constructor() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π prisma –∏–∑ utils.js
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ Dilovod (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  private calculateDataHash(product: DilovodProduct): string {
    // –•–µ—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ Dilovod
    // –ù–ï –≤–∫–ª—é—á–∞–µ–º weight –∏ manualOrder - —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const dataToHash = {
      name: product.name,
      costPerItem: product.costPerItem,
      currency: product.currency,
      categoryId: product.category.id,
      categoryName: product.category.name,
      set: product.set,
      additionalPrices: product.additionalPrices,
      dilovodId: product.id
    };
    
    const dataString = JSON.stringify(dataToHash);
    return crypto.createHash('sha256').update(dataString).digest('hex');
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  async syncProductsToDatabase(dilovodProducts: DilovodProduct[]): Promise<DilovodSyncResult> {
    try {
      logWithTimestamp('–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
      logWithTimestamp(`–ü–æ–ª—É—á–µ–Ω–æ ${dilovodProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏`);
      
      const errors: string[] = [];
      let createdProducts = 0;
      let updatedProducts = 0;
      let skippedProducts = 0;
      let syncedSets = 0;

      for (const product of dilovodProducts) {
        try {
          logWithTimestamp(`\n--- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ ${product.sku} ---`);
          logWithTimestamp(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name}`);
          logWithTimestamp(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category.name} (ID: ${product.category.id})`);
          logWithTimestamp(`–¶–µ–Ω–∞: ${product.costPerItem} ${product.currency}`);
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å
          const weight = this.determineWeightByCategory(product.category.id);
          if (weight) {
            logWithTimestamp(`‚öñÔ∏è –í–µ—Å: ${weight} –≥—Ä (–∫–∞—Ç–µ–≥–æ—Ä–∏—è ID: ${product.category.id})`);
          } else {
            logWithTimestamp(`‚öñÔ∏è –í–µ—Å: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–∫–∞—Ç–µ–≥–æ—Ä–∏—è ID: ${product.category.id})`);
          }
          
          logWithTimestamp(`–ö–æ–º–ø–ª–µ–∫—Ç: ${product.set.length > 0 ? '–î–ê' : '–ù–ï–¢'}`);
          
          if (product.set.length > 0) {
            logWithTimestamp(`–°–æ—Å—Ç–∞–≤ –∫–æ–º–ø–ª–µ–∫—Ç–∞:`);
            product.set.forEach((item, index) => {
              logWithTimestamp(`  ${index + 1}. ${item.id} - ${item.quantity}`);
            });
          }
          
          logWithTimestamp(`–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã: ${product.additionalPrices.length}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ
          const existingProduct = await prisma.product.findUnique({
            where: { sku: product.sku }
          });

          // –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –¥–∞–Ω–Ω—ã—Ö –∏–∑ Dilovod
          const newDataHash = this.calculateDataHash(product);

          if (existingProduct) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            const dataChanged = existingProduct.dilovodDataHash !== newDataHash;
            
            if (dataChanged) {
              logWithTimestamp(`üîÑ –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ ${product.sku} –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º...`);
              
              const productData = this.prepareProductData(product, false); // false = —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
              logWithTimestamp(`–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, JSON.stringify(productData, null, 2));
              
              await prisma.product.update({
                where: { sku: product.sku },
                data: productData
              });
              logWithTimestamp(`‚úÖ –¢–æ–≤–∞—Ä ${product.sku} –æ–±–Ω–æ–≤–ª–µ–Ω`);
              updatedProducts++;
            } else {
              logWithTimestamp(`‚è≠Ô∏è  –¢–æ–≤–∞—Ä ${product.sku} –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ`);
              skippedProducts++;
            }
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            logWithTimestamp(`‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä ${product.sku}...`);
            
            const productData = this.prepareProductData(product, true); // true = –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            logWithTimestamp(`–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:`, JSON.stringify(productData, null, 2));
            
            await prisma.product.create({
              data: {
                sku: product.sku,
                ...productData
              }
            });
            logWithTimestamp(`‚úÖ –¢–æ–≤–∞—Ä ${product.sku} —Å–æ–∑–¥–∞–Ω`);
            createdProducts++;
          }
          
          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Ç—ã
          if (product.set && product.set.length > 0) {
            syncedSets++;
            logWithTimestamp(`üéØ –ö–æ–º–ø–ª–µ–∫—Ç ${product.sku} —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω (${product.set.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)`);
          } else {
            logWithTimestamp(`üì¶ –û–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä ${product.sku} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω`);
          }

        } catch (error) {
          const errorMessage = `–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${product.sku}: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
          logWithTimestamp(errorMessage);
          errors.push(errorMessage);
        }
      }

      const totalProcessed = createdProducts + updatedProducts + skippedProducts;
      
      logWithTimestamp(`\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ===`);
      logWithTimestamp(`üìä –í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${totalProcessed}`);
      logWithTimestamp(`  ‚ûï –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏—Ö: ${createdProducts}`);
      logWithTimestamp(`  üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ: ${updatedProducts}`);
      logWithTimestamp(`  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–±–µ–∑ –∑–º—ñ–Ω): ${skippedProducts}`);
      logWithTimestamp(`  üéØ –ö–æ–º–ø–ª–µ–∫—Ç—ñ–≤: ${syncedSets}`);
      logWithTimestamp(`  ‚ùå –ü–æ–º–∏–ª–æ–∫: ${errors.length}`);
      
      if (errors.length > 0) {
        logWithTimestamp(`\n–°–ø–∏—Å–æ–∫ –ø–æ–º–∏–ª–æ–∫:`);
        errors.forEach((error, index) => {
          logWithTimestamp(`  ${index + 1}. ${error}`);
        });
      }

      const message = [
        `–û–±—Ä–æ–±–ª–µ–Ω–æ ${totalProcessed} —Ç–æ–≤–∞—Ä—ñ–≤`,
        createdProducts > 0 ? `—Å—Ç–≤–æ—Ä–µ–Ω–æ ${createdProducts}` : null,
        updatedProducts > 0 ? `–æ–Ω–æ–≤–ª–µ–Ω–æ ${updatedProducts}` : null,
        skippedProducts > 0 ? `–ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedProducts}` : null,
        syncedSets > 0 ? `–∫–æ–º–ø–ª–µ–∫—Ç—ñ–≤ ${syncedSets}` : null,
      ].filter(Boolean).join(', ');

      return {
        success: errors.length === 0,
        message,
        syncedProducts: createdProducts + updatedProducts, // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        syncedSets,
        createdProducts,
        updatedProducts,
        skippedProducts,
        errors
      };

    } catch (error) {
      logWithTimestamp('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        syncedProducts: 0,
        syncedSets: 0,
        errors: [error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞']
      };
    }
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  private prepareProductData(product: DilovodProduct, isNew: boolean): any {
    // –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –¥–∞–Ω–Ω—ã—Ö –∏–∑ Dilovod
    const dilovodDataHash = this.calculateDataHash(product);
    
    const data: any = {
      name: product.name,
      costPerItem: product.costPerItem ? parseFloat(product.costPerItem) : null,
      currency: product.currency,
      categoryId: product.category.id ?? null,
      categoryName: product.category.name,
      set: product.set.length > 0 ? JSON.stringify(product.set) : null,
      additionalPrices: product.additionalPrices.length > 0 ? JSON.stringify(product.additionalPrices) : null,
      dilovodId: product.id,
      dilovodDataHash: dilovodDataHash,
      lastSyncAt: new Date()
    };
    
    // –í–µ—Å —ñ manualOrder –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¢–Ü–õ–¨–ö–ò –¥–ª—è –Ω–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
    // –î–ª—è —ñ—Å–Ω—É—é—á–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ (–∑–∞—Ö–∏—Å—Ç –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω)
    if (isNew) {
      const weight = this.determineWeightByCategory(product.category.id);
      data.weight = weight;
      logWithTimestamp(`‚öñÔ∏è  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: ${weight ?? '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'} –≥`);
      
      const manualOrder = this.determineManualOrderByCategory(product.category.id);
      data.manualOrder = manualOrder;
      logWithTimestamp(`üìã –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: ${manualOrder}`);
    } else {
      logWithTimestamp(`üîí –í–µ—Å —ñ –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è (–∑–∞—â–∏—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω)`);
    }
    
    return data;
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  private determineWeightByCategory(categoryId: number): number | null {
    // –ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞ - 400 –≥—Ä
    if (categoryId === 1) {
      return 400;
    }
    
    // –í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞ - 300 –≥—Ä
    if (categoryId === 2) {
      return 300;
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Å
    return null;
  }

  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
  private determineManualOrderByCategory(categoryId: number): number {
    // –ü–µ—Ä—à—ñ —Å—Ç—Ä–∞–≤–∏ - 1000
    if (categoryId === 1) {
      return 1000;
    }
    
    // –î—Ä—É–≥—ñ —Å—Ç—Ä–∞–≤–∏ - 2000
    if (categoryId === 2) {
      return 2000;
    }
    
    // –ö–æ–º–ø–ª–µ–∫—Ç–∏ - 3000
    if (categoryId === 3) {
      return 3000;
    }
    
    // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - 0 (–≤ –∫—ñ–Ω—Ü—ñ —Å–ø–∏—Å–∫—É)
    return 0;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  async getSyncStats(): Promise<{
    totalProducts: number;
    productsWithSets: number;
    lastSync: string | null;
    categoriesCount: Array<{ name: string; count: number }>;
  }> {
    try {
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
      const totalProducts = await prisma.product.count();
      
      // –¢–æ–≤–∞—Ä—ã —Å –∫–æ–º–ø–ª–µ–∫—Ç–∞–º–∏
      const productsWithSets = await prisma.product.count({
        where: {
          set: {
            not: null
          }
        }
      });
      
      // –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      const lastSyncProduct = await prisma.product.findFirst({
        orderBy: {
          lastSyncAt: 'desc'
        },
        select: {
          lastSyncAt: true
        }
      });
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const categoriesStats = await prisma.product.groupBy({
        by: ['categoryName'],
        _count: {
          categoryName: true
        },
        where: {
          categoryName: {
            not: null
          }
        }
      });
      
      const categoriesCount = categoriesStats.map(stat => ({
        name: stat.categoryName || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        count: stat._count.categoryName
      }));
      
      return {
        totalProducts,
        productsWithSets,
        lastSync: lastSyncProduct?.lastSyncAt?.toISOString() || null,
        categoriesCount
      };
      
    } catch (error) {
      logWithTimestamp('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ N –¥–Ω–µ–π)
  async cleanupOldProducts(daysOld?: number): Promise<{
    success: boolean;
    message: string;
    deletedCount: number;
  }> {
    try {
      // –ï—Å–ª–∏ daysOld –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      if (daysOld === undefined) {
        try {
          const settings = await syncSettingsService.getSyncSettings();
          daysOld = settings.dilovod.cleanupDaysOld;
        } catch (error) {
          logWithTimestamp('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Dilovod, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
          daysOld = 30;
        }
      }

      logWithTimestamp(`–û—á–∏—Å—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤, –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–ª–µ–µ ${daysOld} –¥–Ω–µ–π...`);
      
      const cutoffDate = new Date(Date.now() - daysOld * 24 * 60 * 60 * 1000);
      
      const deletedProducts = await prisma.product.deleteMany({
        where: {
          lastSyncAt: {
            lt: cutoffDate
          }
        }
      });
      
      logWithTimestamp(`–£–¥–∞–ª–µ–Ω–æ ${deletedProducts.count} —Å—Ç–∞—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
      
      return {
        success: true,
        message: `–£–¥–∞–ª–µ–Ω–æ ${deletedProducts.count} —Å—Ç–∞—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`,
        deletedCount: deletedProducts.count
      };
      
    } catch (error) {
      logWithTimestamp('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        deletedCount: 0
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
  async getProducts(filters: {
    page?: number;
    limit?: number;
    search?: string;
    category?: string;
    hasSets?: boolean;
  }): Promise<{
    products: any[];
    pagination: {
      page: number;
      limit: number;
      total: number;
      pages: number;
    };
  }> {
    try {
      const { page = 1, limit = 20, search, category, hasSets } = filters;
      const skip = (page - 1) * limit;
      
      // –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
      const where: any = {};
      
      if (search) {
        where.OR = [
          { name: { contains: search, mode: 'insensitive' } },
          { sku: { contains: search, mode: 'insensitive' } }
        ];
      }
      
      if (category) {
        where.categoryName = category;
      }
      
      if (hasSets !== undefined) {
        if (hasSets) {
          where.set = { not: null };
        } else {
          where.set = null;
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
      const [products, total] = await Promise.all([
        prisma.product.findMany({
          where,
          skip,
          take: limit,
          orderBy: {
            lastSyncAt: 'desc'
          }
        }),
        prisma.product.count({ where })
      ]);
      
      const pages = Math.ceil(total / limit);
      
      return {
        products,
        pagination: {
          page,
          limit,
          total,
          pages
        }
      };
      
    } catch (error) {
      logWithTimestamp('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
      throw error;
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  async disconnect(): Promise<void> {
    await prisma.$disconnect();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  async updateProductStockBalance(
    sku: string, 
    mainStorage: number, 
    kyivStorage: number
  ): Promise<{ success: boolean; message: string }> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä
      const existingProduct = await prisma.product.findUnique({
        where: { sku }
      });

      if (!existingProduct) {
        return {
          success: false,
          message: `–¢–æ–≤–∞—Ä —Å SKU ${sku} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`
        };
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
      await prisma.product.update({
        where: { sku },
        data: {
          stockBalanceByStock: JSON.stringify({
            "1": mainStorage,    // –°–∫–ª–∞–¥ 1 (–≥–ª–∞–≤–Ω—ã–π)
            "2": kyivStorage     // –°–∫–ª–∞–¥ 2 (–∫–∏–µ–≤—Å–∫–∏–π)
          })
        }
      });

      return {
        success: true,
        message: `–û—Å—Ç–∞—Ç–∫–∏ –¥–ª—è ${sku} –æ–±–Ω–æ–≤–ª–µ–Ω—ã`
      };

    } catch (error) {
      logWithTimestamp(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è ${sku}:`, error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      };
    }
  }

  // –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ (—è–∫—ñ —î –≤ –ë–î –∞–ª–µ –Ω–µ–º–∞—î –≤ WordPress)
  async markOutdatedProducts(currentSkus: string[]): Promise<void> {
    try {
      logWithTimestamp(`–ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ —Ç–æ–≤–∞—Ä–∏...`);
      logWithTimestamp(`–û—Ç—Ä–∏–º–∞–Ω–æ ${currentSkus.length} –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö SKU –∑ WordPress`);
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ Set –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
      const currentSkusSet = new Set(currentSkus.map(sku => sku.toLowerCase().trim()));
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∑ –ë–î
      const allProducts = await prisma.product.findMany({
        select: {
          id: true,
          sku: true,
          name: true,
          isOutdated: true
        }
      });
      
      logWithTimestamp(`–í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –ë–î: ${allProducts.length}`);
      
      let markedAsOutdated = 0;
      let unmarkedAsOutdated = 0;
      
      for (const product of allProducts) {
        const productSku = product.sku.toLowerCase().trim();
        const isInWordPress = currentSkusSet.has(productSku);
        
        // –Ø–∫—â–æ —Ç–æ–≤–∞—Ä –ù–ï –≤ WordPress –∞–ª–µ –ù–ï –ø–æ–∑–Ω–∞—á–µ–Ω–∏–π —è–∫ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π - –ø–æ–∑–Ω–∞—á–∞—î–º–æ
        if (!isInWordPress && !product.isOutdated) {
          await prisma.product.update({
            where: { id: product.id },
            data: { isOutdated: true }
          });
          logWithTimestamp(`  ‚ö†Ô∏è  –¢–æ–≤–∞—Ä ${product.sku} (${product.name}) –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π`);
          markedAsOutdated++;
        }
        
        // –Ø–∫—â–æ —Ç–æ–≤–∞—Ä –Ñ –≤ WordPress –∞–ª–µ –ø–æ–∑–Ω–∞—á–µ–Ω–∏–π —è–∫ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π - –∑–Ω—ñ–º–∞—î–º–æ –ø–æ–∑–Ω–∞—á–∫—É
        if (isInWordPress && product.isOutdated) {
          await prisma.product.update({
            where: { id: product.id },
            data: { isOutdated: false }
          });
          logWithTimestamp(`  ‚úÖ –¢–æ–≤–∞—Ä ${product.sku} (${product.name}) –∑–Ω–æ–≤—É –∞–∫—Ç—É–∞–ª—å–Ω–∏–π`);
          unmarkedAsOutdated++;
        }
      }
      
      logWithTimestamp(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:`);
      logWithTimestamp(`  ‚ö†Ô∏è  –ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö: ${markedAsOutdated}`);
      logWithTimestamp(`  ‚úÖ –ó–Ω—è—Ç–æ –ø–æ–∑–Ω–∞—á–∫—É –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ—Å—Ç—ñ: ${unmarkedAsOutdated}`);
      
    } catch (error) {
      logWithTimestamp('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:', error);
      // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –∑—É–ø–∏–Ω—è—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
    }
  }
}
