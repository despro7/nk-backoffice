import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import { JwtPayload } from '../types/auth.js';
import { AuthService } from '../services/authService.js';
import { AuthSettingsService } from '../services/authSettingsService.js';

// –†–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Request –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
declare global {
  namespace Express {
    interface Request {
      user?: JwtPayload;
    }
  }
}

// –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
let tokenCheckCount = 0;

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤
let refreshInProgress = false;
let refreshPromise: Promise<any> | null = null;

export const authenticateToken = async (req: Request, res: Response, next: NextFunction) => {
  try {
    tokenCheckCount++;
    // console.log(`üîç [Middleware] #${tokenCheckCount} –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—É—Ç–∏: ${req.path}`);

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const shouldLog = process.env.NODE_ENV === 'development';

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ cookies
    const { accessToken, refreshToken } = await AuthService.getTokenFromCookies(req);

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    // console.log('üîç [Middleware] Access token –∏–∑ cookie:', accessToken ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    // console.log('üîç [Middleware] Refresh token –∏–∑ cookie:', refreshToken ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

    if (accessToken) {
      // console.log('üîç [Middleware] Access token –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –î–û –µ–≥–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      try {
        const secret = process.env.JWT_SECRET || 'fallback_secret';
        const decoded = jwt.decode(accessToken) as any;
        
        if (decoded && decoded.exp) {
          const now = Math.floor(Date.now() / 1000);
          const timeUntilExpiry = decoded.exp - now;
          
          // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
          const settings = await AuthSettingsService.getAuthSettings();
          
          // –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
          if (settings.middlewareAutoRefreshEnabled && timeUntilExpiry <= settings.middlewareRefreshThresholdSeconds && timeUntilExpiry > 0) {
            console.log(`‚ö†Ô∏è  [Middleware] Access token –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${timeUntilExpiry} —Å–µ–∫—É–Ω–¥, –æ–±–Ω–æ–≤–ª—è–µ–º...`);
            
            if (refreshToken) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
              if (refreshInProgress) {
                console.log('‚è≠Ô∏è [Middleware] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å (–∏–∑–±–µ–≥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—É–ª–∞ –ë–î)');
                // –ù–ï –∂–¥–µ–º - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
                // –≠—Ç–æ –∏–∑–±–µ–≥–∞–µ—Ç –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –ë–î
              } else {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                refreshInProgress = true;
                console.log('üîí [Middleware] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤');
                
                refreshPromise = (async () => {
                  try {
                    const refreshResult = await AuthService.refreshToken({ refreshToken });
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ cookies
                    await AuthService.setAuthCookies(res, refreshResult.token, refreshResult.refreshToken);
                    
                    console.log('‚úÖ [Middleware] –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                    res.setHeader('X-Token-Refreshed', 'true');
                    res.setHeader('X-User-Email', decoded.email || 'unknown');
                    
                    return refreshResult;
                  } catch (refreshError) {
                    console.log('‚ùå [Middleware] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', refreshError.message);
                    throw refreshError;
                  } finally {
                    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                    refreshInProgress = false;
                    refreshPromise = null;
                    console.log('üîì [Middleware] –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —Å–Ω—è—Ç–∞');
                  }
                })();
                
                // –ù–ï –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è - –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–∫–µ–Ω–æ–º, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—É–ª –ë–î
              }
            }
          }
        }
      } catch (decodeError) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        console.log('‚ö†Ô∏è [Middleware] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:', decodeError.message);
      }
    }
    
    if (!accessToken) {
      // –ï—Å–ª–∏ access token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ—Å—Ç—å refresh token,
      // —ç—Ç–æ —Å–∏–≥–Ω–∞–ª –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.
      // –≠—Ç–æ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ cookie access token –∏—Å—Ç–µ–∫.
      if (refreshToken) {
        console.log('‚ö†Ô∏è  [Middleware] Access token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ refresh token –µ—Å—Ç—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.');
        return res.status(401).json({
          message: 'Access token required, refresh needed',
          code: 'TOKEN_EXPIRED', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –∏ –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
          shouldRefresh: true,
        });
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ access, –Ω–∏ refresh —Ç–æ–∫–µ–Ω–∞, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.
      if (shouldLog) {
        console.log('‚ùå [Middleware] Access token –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      return res.status(401).json({
        message: 'Access token required. Please login first.',
        code: 'NO_TOKEN',
        details: 'You need to authenticate before accessing this resource'
      });
    }

    const secret = process.env.JWT_SECRET || 'fallback_secret';
    // console.log('üîç [Middleware] –ü—Ä–æ–≤–µ—Ä—è–µ–º access token...');
    const decoded = jwt.verify(accessToken, secret) as JwtPayload;

    // console.log(`üë§ [Middleware] Access token –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${decoded.email}`);
    // console.log(`üîç [Middleware] –¢–∏–ø —Ç–æ–∫–µ–Ω–∞: ${decoded.tokenType}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
    if (decoded.tokenType !== 'access') {
      console.log('‚ùå [Middleware] –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞:', decoded.tokenType);
      return res.status(403).json({
        message: 'Invalid token type',
        code: 'INVALID_TOKEN_TYPE',
        details: 'The provided token is not an access token'
      });
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
    if (decoded.exp) {
      const now = Math.floor(Date.now() / 1000);
      decoded.expiresIn = Math.max(0, decoded.exp - now);
      console.log(`‚è±Ô∏è  [Middleware] –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: ${decoded.expiresIn} —Å–µ–∫`);
    }
    
    req.user = decoded;

    // console.log(`‚úÖ [Middleware] #${tokenCheckCount} –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${decoded.email}`);

    // –¢–∏—Ö–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    AuthService.updateUserActivity(decoded.userId).catch(() => {});

    next();
  } catch (error) {
    if (error instanceof jwt.TokenExpiredError) {
      console.log('‚ö†Ô∏è [Middleware] Access token –∏—Å—Ç–µ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º shouldRefresh');
      console.log('üîÑ [Middleware] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ refresh token');
      return res.status(401).json({
        message: 'Access token expired',
        code: 'TOKEN_EXPIRED',
        shouldRefresh: true,
        details: 'Your session has expired. Token will be automatically refreshed.'
      });
    }

    console.log('‚ùå [Middleware] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error.message);
    if (error.message.includes('invalid signature')) {
      console.log('‚ùå [Middleware] –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, JWT_SECRET –∏–∑–º–µ–Ω–∏–ª—Å—è');
    } else if (error.message.includes('malformed')) {
      console.log('‚ùå [Middleware] –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

    return res.status(403).json({
      message: 'Invalid token',
      code: 'INVALID_TOKEN',
      details: 'The provided token is malformed or invalid'
    });
  }
};

export const requireRole = (roles: string[]) => {
  return (req: Request, res: Response, next: NextFunction) => {
    if (!req.user) {
      return res.status(401).json({
        message: 'Authentication required',
        code: 'NO_AUTH',
        details: 'You need to be authenticated to access this resource'
      });
    }

    if (!roles.includes(req.user.role)) {
      return res.status(403).json({
        message: 'Insufficient permissions',
        code: 'INSUFFICIENT_PERMISSIONS',
        details: 'You do not have the required role to access this resource'
      });
    }

    next();
  };
};
