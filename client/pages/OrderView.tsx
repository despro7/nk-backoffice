import { useState, useEffect, useCallback, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardBody, CardHeader } from '@heroui/card';
import { useApi } from '../hooks/useApi';
import OrderChecklist from '@/components/OrderChecklist';
import OrderTrackingNumber from '@/components/OrderTrackingNumber';
import { DeviationButton } from '@/components/DeviationButton';
import { RightPanel } from '@/components/RightPanel';
import { BoxSelector } from '@/components/BoxSelector';
import { SimulationButtons } from '@/components/SimulationButtons';
import { EquipmentIntegrationGuide } from '@/components/EquipmentIntegrationGuide';
import { ScaleWeightDisplay } from '@/components/ScaleWeightDisplay';

import { useAuth } from '../contexts/AuthContext';
import { Code } from '@heroui/code';
import { DynamicIcon } from 'lucide-react/dynamic';
import { formatDateOnly, formatTimeOnly } from '../lib/formatUtils';
import { useEquipmentFromAuth } from '../contexts/AuthContext';
import { shippingClientService } from '../services/ShippingService';
import ErrorBoundary from '../components/ErrorBoundary'; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å

// –¢–∏–ø—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
interface OrderChecklistItem {
  id: string;
  name: string;
  quantity: number;
  expectedWeight: number;
  status: 'default' | 'pending' | 'success' | 'error' | 'done' | 'awaiting_confirmation' | 'confirmed';
  type: 'product' | 'box';
  boxSettings?: any;
  boxCount?: number;
  boxIndex?: number; // –ò–Ω–¥–µ–∫—Å –∫–æ—Ä–æ–±–∫–∏ (0, 1, 2...)
  portionsRange?: { start: number; end: number }; // –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ü–∏–π –¥–ª—è –∫–æ—Ä–æ–±–∫–∏
  portionsPerBox?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –Ω–∞ –∫–æ—Ä–æ–±–∫—É
}

interface OrderForAssembly {
  id: string | undefined;
  shipping: {
    carrier: string;
    trackingId: string;
    provider: string;
  };
  items: OrderChecklistItem[];
  totalPortions: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
interface Product {
  id: number;
  sku: string;
  name: string;
  weight?: number; // –í–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö
  set: Array<{ id: string; quantity: number }> | null;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–µ—Å–∞
const calculateExpectedWeight = (product: Product, quantity: number): number => {
  // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–µ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ fallback –Ω–∞ 0.3 –∫–≥
  if (product.weight && product.weight > 0) {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞–º–º—ã –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã
    return (product.weight * quantity) / 1000;
  }
  // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É (0.3 –∫–≥ –Ω–∞ –ø–æ—Ä—Ü–∏—é)
  return quantity * 0.3;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞–±–æ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
const expandProductSets = async (orderItems: any[], apiCall: any): Promise<OrderChecklistItem[]> => {
  const expandedItems: { [key: string]: OrderChecklistItem } = {};
  
  // console.log('=== –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –Ω–∞–±–æ—Ä—ñ–≤ ===');
  // console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderItems.length}`);
  
  for (const item of orderItems) {
    try {
      // console.log(`\n--- –û–±—Ä–æ–±–∫–∞ –ø–æ–∑–∏—Ü—ñ—ó: ${item.productName} (SKU: ${item.sku}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${item.quantity}) ---`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ SKU
      const response = await apiCall(`/api/products/${item.sku}`);
      if (response.ok) {
        const product: Product = await response.json();
        // console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä: ${product.name}`, product);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É product.set
        if (product.set) {
          // console.log(`üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞–±–æ—Ä—É –¥–ª—è ${product.name}:`, product.set);
        }
        
        if (product.set && Array.isArray(product.set) && product.set.length > 0) {
          // –≠—Ç–æ –Ω–∞–±–æ—Ä - —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ
          // console.log(`üîç –¶–µ –Ω–∞–±—ñ—Ä –∑ ${product.set.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤:`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É set
          const validSetItems = product.set.filter(setItem => 
            setItem && typeof setItem === 'object' && setItem.id && setItem.quantity
          );
          
          if (validSetItems.length === 0) {
            console.warn(`‚ö†Ô∏è –ù–∞–±—ñ—Ä ${product.name} –Ω–µ –º–∞—î –≤–∞–ª—ñ–¥–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤:`, product.set);
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä
            const itemName = item.productName;
            if (expandedItems[itemName]) {
              expandedItems[itemName].quantity += item.quantity;
            } else {
              expandedItems[itemName] = {
                id: item.sku,
                name: itemName,
                quantity: item.quantity,
                expectedWeight: calculateExpectedWeight(product, item.quantity),
                status: 'default' as const,
                type: 'product'
              };
            }
            continue;
          }
                      for (const setItem of validSetItems) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É setItem –µ—Å—Ç—å id (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
              if (!setItem.id) {
                console.warn(`‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–±–æ—Ä—É –Ω–µ –º–∞—î ID:`, setItem);
                continue;
              }
            
            try {
              // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞–±–æ—Ä–∞
              const componentResponse = await apiCall(`/api/products/${setItem.id}`);
              if (componentResponse.ok) {
                const component: Product = await componentResponse.json();
                const componentName = component.name;
                const totalQuantity = item.quantity * setItem.quantity;
                
                // console.log(`  ‚úÖ ${componentName}: ${setItem.quantity} √ó ${item.quantity} = ${totalQuantity} –ø–æ—Ä—Ü—ñ–π`);
                
                // –°—É–º–º–∏—Ä—É–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
                if (expandedItems[componentName]) {
                  const oldQuantity = expandedItems[componentName].quantity;
                  expandedItems[componentName].quantity += totalQuantity;
                  // console.log(`    üîÑ –°—É–º—É—î–º–æ –∑ —ñ—Å–Ω—É—é—á–∏–º–∏: ${oldQuantity} + ${totalQuantity} = ${expandedItems[componentName].quantity}`);
                } else {
                  expandedItems[componentName] = {
                    id: `${item.sku}_${setItem.id}`,
                    name: componentName,
                    quantity: totalQuantity,
                    expectedWeight: calculateExpectedWeight(component, totalQuantity),
                    status: 'default' as const,
                    type: 'product'
                  };
                  // console.log(`    ‚ûï –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: ${componentName}`);
                }
              } else {
                console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–±–æ—Ä—É: ${setItem.id} (—Å—Ç–∞—Ç—É—Å: ${componentResponse.status})`);
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                const componentName = `–ù–µ–≤—ñ–¥–æ–º–∞ —Å—Ç—Ä–∞–≤–∞ (${setItem.id})`;
                const totalQuantity = item.quantity * setItem.quantity;
                
                if (expandedItems[componentName]) {
                  expandedItems[componentName].quantity += totalQuantity;
                } else {
                  expandedItems[componentName] = {
                    id: `${item.sku}_${setItem.id}`,
                    name: componentName,
                    quantity: totalQuantity,
                    expectedWeight: totalQuantity * 0.3, // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    status: 'default' as const,
                    type: 'product'
                  };
                }
              }
            } catch (componentError) {
              console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞–±–æ—Ä—É ${setItem.id}:`, componentError);
              // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
              const componentName = `–ù–µ–≤—ñ–¥–æ–º–∞ —Å—Ç—Ä–∞–≤–∞ (${setItem.id})`;
              const totalQuantity = item.quantity * setItem.quantity;
              
              if (expandedItems[componentName]) {
                expandedItems[componentName].quantity += totalQuantity;
              } else {
                expandedItems[componentName] = {
                  id: `${item.sku}_${setItem.id}`,
                  name: componentName,
                  quantity: totalQuantity,
                  expectedWeight: totalQuantity * 0.3, // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                  status: 'default' as const,
                  type: 'product'
                };
              }
            }
          }
        } else {
          // –≠—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          // console.log(`üçΩÔ∏è –ó–≤–∏—á–∞–π–Ω–∏–π —Ç–æ–≤–∞—Ä (–Ω–µ –Ω–∞–±—ñ—Ä): ${item.productName}`);
          const itemName = item.productName;
          if (expandedItems[itemName]) {
            const oldQuantity = expandedItems[itemName].quantity;
            expandedItems[itemName].quantity += item.quantity;
            // console.log(`  üîÑ –°—É–º—É—î–º–æ –∑ —ñ—Å–Ω—É—é—á–∏–º–∏: ${oldQuantity} + ${item.quantity} = ${expandedItems[itemName].quantity}`);
          } else {
            expandedItems[itemName] = {
              id: item.sku,
              name: itemName,
              quantity: item.quantity,
              expectedWeight: calculateExpectedWeight(product, item.quantity),
              status: 'default' as const,
              type: 'product'
            };
            // console.log(`  ‚ûï –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä: ${itemName}`);
          }
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä: ${item.sku} (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
        const itemName = item.productName;
        if (expandedItems[itemName]) {
          expandedItems[itemName].quantity += item.quantity;
        } else {
          expandedItems[itemName] = {
            id: item.sku,
            name: itemName,
            quantity: item.quantity,
            expectedWeight: item.quantity * 0.3, // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            status: 'default' as const,
            type: 'product'
          };
        }
      }
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –Ω–∞–±–æ—Ä—É –¥–ª—è ${item.sku}:`, error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –∫–∞–∫ –µ—Å—Ç—å
      const itemName = item.productName;
      if (expandedItems[itemName]) {
        expandedItems[itemName].quantity += item.quantity;
      } else {
        expandedItems[itemName] = {
          id: item.sku,
          name: itemName,
          quantity: item.quantity,
          expectedWeight: item.quantity * 0.3, // Fallback –¥–ª—è –æ—à–∏–±–∫–∏
          status: 'default' as const,
          type: 'product'
        };
      }
    }
  }
  
  // console.log('\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è ===');
  // console.log(`–†–æ–∑–≥–æ—Ä–Ω—É—Ç–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${Object.keys(expandedItems).length}`);
  // console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä—Ü—ñ–π: ${Object.values(expandedItems).reduce((sum, item) => sum + item.quantity, 0)}`);
  
  // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
  Object.entries(expandedItems).forEach(([name, item]) => {
    // console.log(`  üìã ${name}: ${item.quantity} –ø–æ—Ä—Ü—ñ–π`);
  });
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
  return Object.values(expandedItems).map((item, index) => ({
    ...item,
    id: (index + 1).toString()
  }));
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–æ—Ä–æ–±–æ–∫ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
const combineBoxesWithItems = (boxes: any[], items: OrderChecklistItem[], isReadyToShip: boolean = false): OrderChecklistItem[] => {

  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  const boxItems: OrderChecklistItem[] = boxes.map((box, index) => ({
    id: `box_${index + 1}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ box.id –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    name: box.name, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–æ–±–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    quantity: 1, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫
    expectedWeight: Number(box.self_weight || box.weight), // –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å –∫–æ—Ä–æ–±–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç self_weight)
    status: isReadyToShip ? 'confirmed' : 'awaiting_confirmation' as const, // –ö–æ—Ä–æ–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ id3
    type: 'box' as const,
    boxSettings: box,
    boxCount: 1,
    boxIndex: index, // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º boxIndex —Ä–∞–≤–Ω—ã–º –∏–Ω–¥–µ–∫—Å—É –≤ –º–∞—Å—Å–∏–≤–µ –∫–æ—Ä–æ–±–æ–∫
    portionsRange: box.portionsRange || { start: 0, end: 0 },
    portionsPerBox: box.portionsPerBox || 0
  }));
  


  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ—Ä–æ–±–∫–∏, —Ä–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–æ—Ä–æ–±–∫–∞–º
  if (boxes.length > 1 && boxes[0].portionsPerBox && boxes[0].portionsPerBox > 0 && !isReadyToShip) {
    // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–æ—Ä–æ–±–∫–∞–º —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    const portionsPerBox = boxes[0].portionsPerBox;

    const productItems: OrderChecklistItem[] = [];

    let currentPortion = 0;
    let currentBoxIndex = 0;

    for (const item of items) {
      const itemPortions = item.quantity;

      if (currentPortion + itemPortions <= portionsPerBox) {
        // –¢–æ–≤–∞—Ä –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â—É—é –∫–æ—Ä–æ–±–∫—É
        productItems.push({
          ...item,
          id: `product_${currentBoxIndex}_${item.id}`,
          type: 'product' as const,
          boxIndex: currentBoxIndex
        });
        currentPortion += itemPortions;
      } else {
        // –¢–æ–≤–∞—Ä –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ—Ä–æ–±–∫–µ
        if (currentBoxIndex < boxes.length - 1) {
          currentBoxIndex++;
          currentPortion = 0;

          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –Ω–æ–≤—É—é –∫–æ—Ä–æ–±–∫—É
          productItems.push({
            ...item,
            id: `product_${currentBoxIndex}_${item.id}`,
            type: 'product' as const,
            boxIndex: currentBoxIndex
          });
          currentPortion += itemPortions;
        } else {
          // –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ—Ä–æ–±–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          productItems.push({
            ...item,
            id: `product_${currentBoxIndex}_${item.id}`,
            type: 'product' as const,
            boxIndex: currentBoxIndex
          });

        }
      }
    }

    const result = [...boxItems, ...productItems];
    return result;
  }

  // –ï—Å–ª–∏ –∫–æ—Ä–æ–±–∫–∞ –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –∫–æ—Ä–æ–±–æ–∫, –∏–ª–∏ –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ –æ–±—ã—á–Ω–æ
  const productItems = items.map((item, index) => ({
    ...item,
    id: `product_${index + 1}`,
    type: 'product' as const,
    boxIndex: 0 // –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –ø–µ—Ä–≤–æ–π –∫–æ—Ä–æ–±–∫–µ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ id3
  }));

  const result = [...boxItems, ...productItems];
  return result;
};

export default function OrderView() {
  const { externalId } = useParams<{ externalId: string }>();
  const { apiCall } = useApi();
  const navigate = useNavigate();
  const [equipmentState, equipmentActions] = useEquipmentFromAuth();

  const [order, setOrder] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [expandedItems, setExpandedItems] = useState<OrderChecklistItem[]>([]);
  const [expandingSets, setExpandingSets] = useState(false);
  const [selectedBoxes, setSelectedBoxes] = useState<any[]>([]);
  const [boxesTotalWeight, setBoxesTotalWeight] = useState<number>(0);
  const [activeBoxIndex, setActiveBoxIndex] = useState<number>(0);
  const [checklistItems, setChecklistItems] = useState<OrderChecklistItem[]>([]);
  const [weightTolerance, setWeightTolerance] = useState<{type: string, percentage: number, absolute: number}>({
    type: 'combined',
    percentage: 5,
    absolute: 20 // –≤ –≥—Ä–∞–º–º–∞—Ö
  });
  const [lastEquipmentSync, setLastEquipmentSync] = useState<number>(0);
  const [isPrintingTTN, setIsPrintingTTN] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—á–∞—Ç–∏ –¢–¢–ù
  const [showPrintTTN, setShowPrintTTN] = useState(false)
  const [isLoadingNextOrder, setIsLoadingNextOrder] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
  const [showNextOrder, setShowNextOrder] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
  const [isReadyToShip, setIsReadyToShip] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ id3

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const fetchWeightToleranceSettings = async () => {
      try {
        const response = await apiCall('/api/settings/weight-tolerance/values');
        if (response.ok) {
          const settings = await response.json();
          setWeightTolerance({
            type: settings.type || 'combined',
            percentage: settings.percentage || 5,
            absolute: settings.absolute || 20 // –≤ –≥—Ä–∞–º–º–∞—Ö
          });
        }
      } catch (error) {
        console.error('Error fetching weight tolerance settings:', error);
        // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    };

    fetchWeightToleranceSettings();
  }, []); // –£–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å apiCall, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–ª–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
  const { user } = useAuth();

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ –¢–¢–ù
  const handlePrintTTN = useCallback(async () => {
    if (!order?.ttn || !order?.provider) {
      alert('–¢–¢–ù –∞–±–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
      return;
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
    if (isPrintingTTN) {
      return;
    }

    try {
      setIsPrintingTTN(true);

      await shippingClientService.downloadAndPrintTTN(
        order.ttn,
        order.provider as 'novaposhta' | 'ukrposhta'
      );

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—á–∞—Ç–∏
      setTimeout(() => {
        setShowNextOrder(true);
      }, 2000);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ –¢–¢–ù:', error);

      const errorMessage = error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';
      alert(`–ü–æ–º–∏–ª–∫–∞ –¥—Ä—É–∫—É –¢–¢–ù: ${errorMessage}`);
    } finally {
      setIsPrintingTTN(false);
    }
  }, [order?.ttn, order?.provider, order?.orderNumber, isPrintingTTN]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É
  const handleNextOrder = useCallback(async () => {
    console.log('üöÄ [NEXT ORDER] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"');
    console.log('üìã [NEXT ORDER] –¢–µ–∫—É—â–∏–π externalId:', externalId);
    console.log('‚è≥ [NEXT ORDER] isLoadingNextOrder:', isLoadingNextOrder);

    if (!externalId || isLoadingNextOrder) {
      console.log('‚ùå [NEXT ORDER] –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: externalId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      return;
    }

    try {
      console.log('üîÑ [NEXT ORDER] –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...');
      setIsLoadingNextOrder(true);

      // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ
      console.log('üìä [NEXT ORDER] –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤...');
      const response = await apiCall('/api/orders?limit=100&sortBy=orderDate&sortOrder=desc');
      console.log('üìä [NEXT ORDER] –û—Ç–≤–µ—Ç –æ—Ç API:', response.ok ? 'OK' : 'ERROR', response.status);

      if (!response.ok) {
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å');
      }

      const ordersData = await response.json();
      const orders = ordersData.data;
      console.log('üìä [NEXT ORDER] –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:', orders.length);
      console.log('üìä [NEXT ORDER] –ü–µ—Ä–≤—ã–µ 3 –∑–∞–∫–∞–∑–∞:', orders.slice(0, 3).map(o => ({ id: o.externalId, number: o.orderNumber })));

      // 2. –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–∫–µ
      console.log('üîç [NEXT ORDER] –®–∞–≥ 2: –ò—â–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–∫–µ...');
      const currentOrderIndex = orders.findIndex((order: any) => order.externalId === externalId);
      console.log('üîç [NEXT ORDER] –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞:', currentOrderIndex);

      if (currentOrderIndex === -1) {
        throw new Error('–ü–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É');
      }

      console.log('‚úÖ [NEXT ORDER] –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω:', {
        externalId: orders[currentOrderIndex].externalId,
        orderNumber: orders[currentOrderIndex].orderNumber,
        index: currentOrderIndex
      });

      // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑
      console.log('üéØ [NEXT ORDER] –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑...');
      let nextOrderIndex = currentOrderIndex + 1;
      console.log('üéØ [NEXT ORDER] –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞:', nextOrderIndex);

      if (nextOrderIndex >= orders.length) {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É
        console.log('üîÑ [NEXT ORDER] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –∑–∞–∫–∞–∑—É');
        nextOrderIndex = 0;
      }

      const nextOrder = orders[nextOrderIndex];
      console.log('‚úÖ [NEXT ORDER] –°–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω:', {
        externalId: nextOrder.externalId,
        orderNumber: nextOrder.orderNumber,
        index: nextOrderIndex,
        isFirstOrder: nextOrderIndex === 0 && currentOrderIndex === orders.length - 1
      });

      // 4. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞ "id3" (–ì–æ—Ç–æ–≤–µ –¥–æ –≤–∏–¥–ø—Ä–∞–≤–∫–∏)
      console.log('üìù [NEXT ORDER] –®–∞–≥ 4: –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞...');
      const statusPayload = { status: 'id3' };
      console.log('üìù [NEXT ORDER] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å:', statusPayload);

      const statusResponse = await apiCall(`/api/orders/${externalId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(statusPayload),
      });

      console.log('üìù [NEXT ORDER] –û—Ç–≤–µ—Ç –æ—Ç API —Å—Ç–∞—Ç—É—Å–∞:', statusResponse.ok ? 'OK' : 'ERROR', statusResponse.status);

      if (!statusResponse.ok) {
        const errorText = await statusResponse.text();
        console.warn('‚ö†Ô∏è [NEXT ORDER] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ SalesDrive:', errorText);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        const statusData = await statusResponse.json();
        if (statusData.success) {
          if (statusData.salesDriveUpdated) {
            console.log('‚úÖ [NEXT ORDER] –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ SalesDrive –Ω–∞ "id3" (–ì–æ—Ç–æ–≤–µ –¥–æ –≤–∏–¥–ø—Ä–∞–≤–∫–∏)');
          } else {
            console.warn('‚ö†Ô∏è [NEXT ORDER] –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤ SalesDrive');
          }
        } else {
          console.warn('‚ö†Ô∏è [NEXT ORDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', statusData.error);
        }
      }

      // 5. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      console.log('üèÅ [NEXT ORDER] –®–∞–≥ 5: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É...');
      const nextOrderUrl = `/orders/${nextOrder.externalId}`;
      console.log('üèÅ [NEXT ORDER] URL —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞:', nextOrderUrl);

      navigate(nextOrderUrl);
      console.log('‚úÖ [NEXT ORDER] –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
      setShowNextOrder(false);
      console.log('üîÑ [NEXT ORDER] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—à–µ–Ω–æ');

    } catch (error) {
      console.error('‚ùå [NEXT ORDER] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É:', error);
      console.error('‚ùå [NEXT ORDER] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        stack: error instanceof Error ? error.stack : undefined
      });
      alert(`–ü–æ–º–∏–ª–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`);
    } finally {
      console.log('üèÅ [NEXT ORDER] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏');
      setIsLoadingNextOrder(false);
    }
  }, [externalId, apiCall, isLoadingNextOrder, navigate]);

  useEffect(() => {
    if (externalId) {
      fetchOrderDetails(externalId);
    }
  }, [externalId]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleSimulateScan = useCallback((itemId: string) => {
    setChecklistItems(prevItems => 
      prevItems.map(item => {
        if (item.id === itemId) {
          return { ...item, status: 'pending' };
        }
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ default
        if (item.status === 'pending' && (item.boxIndex || 0) === activeBoxIndex) {
          return { ...item, status: 'default' as const };
        }
        return item;
      })
    );
  }, [activeBoxIndex]);

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
  const calculateTolerance = useCallback((expectedWeight: number) => {
    let tolerance = 0;

    if (weightTolerance.type === 'percentage' || weightTolerance.type === 'combined') {
      // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (expectedWeight –≤ –∫–≥, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≥—Ä–∞–º–º—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞)
      tolerance += (expectedWeight * 1000 * weightTolerance.percentage) / 100;
    }

    if (weightTolerance.type === 'absolute' || weightTolerance.type === 'combined') {
      // –ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (—É–∂–µ –≤ –≥—Ä–∞–º–º–∞—Ö, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–≥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
      tolerance += weightTolerance.absolute / 1000;
    }

    return tolerance;
  }, [weightTolerance]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –≤–µ—Å–∞
  const handleSimulateWeigh = useCallback((itemId: string) => {
    const currentItem = checklistItems.find(item => item.id === itemId);
    if (!currentItem) return;

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ —Å —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é
    const expectedWeight = currentItem.expectedWeight;
    const tolerance = calculateTolerance(expectedWeight);
    const randomError = (Math.random() - 0.5) * 2 * tolerance; // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬± —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    const simulatedWeight = expectedWeight + randomError;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤–µ—Å –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    const weightDifference = Math.abs(simulatedWeight - expectedWeight);
    const isSuccess = weightDifference <= tolerance;

    setChecklistItems(prevItems => 
      prevItems.map(item => 
        item.id === itemId ? { ...item, status: isSuccess ? 'success' : 'error' } : item
      )
    );

    if (isSuccess) {
              setTimeout(() => {
          setChecklistItems(prevItems => 
            prevItems.map(item => 
              item.id === itemId ? { ...item, status: 'done' } : item
            )
          );
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–æ–±–∫–∞, –Ω–µ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if (currentItem.type === 'box') {
          return;
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        const currentIndex = checklistItems.findIndex(item => item.id === itemId);
        const nextItem = checklistItems.find((item, index) => 
          index > currentIndex && 
          item.status === 'default' && 
          (item.boxIndex || 0) === activeBoxIndex &&
          item.type === 'product'
        );
        
        if (nextItem) {
          handleSimulateScan(nextItem.id);
        }
      }, 1500);
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ pending —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setTimeout(() => {
        setChecklistItems(prevItems => 
          prevItems.map(item => 
            item.id === itemId ? { ...item, status: 'pending' } : item
          )
        );
      }, 2000);
    }
  }, [checklistItems, activeBoxIndex, calculateTolerance]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ä–æ–±–æ–∫
  const handleBoxesChange = useCallback((boxes: any[], totalWeight: number, boxesInfo?: any) => {
    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–æ–±–∫–∞—Ö
    let updatedBoxes = boxes;
    if (boxesInfo) {
      updatedBoxes = boxes.map((box, index) => ({
        ...box,
        boxIndex: index,
        portionsRange: boxesInfo.boxPortionsRanges[index],
        portionsPerBox: boxesInfo.portionsPerBox
      }));
    }
    
    setSelectedBoxes(updatedBoxes);
    setBoxesTotalWeight(totalWeight);
    setActiveBoxIndex(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ—Ä–æ–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    
    // –û–±–Ω–æ–≤–ª—è–µ–º checklistItems —Å –Ω–æ–≤—ã–º–∏ –∫–æ—Ä–æ–±–∫–∞–º–∏
    if (expandedItems.length > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º expandedItems –∫–∞–∫ –±–∞–∑–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∫–æ—Ä–æ–±–æ–∫
      const itemsWithoutBoxes = expandedItems.filter(item => item.type !== 'box');

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–æ—Ä–æ–±–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
      const combinedItems = combineBoxesWithItems(updatedBoxes, itemsWithoutBoxes, isReadyToShip);

      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å—ã done –∫–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º
      const finalItems = isReadyToShip ? combinedItems.map(item => {
        if (item.type === 'product') {
          console.log(`üì¶ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å done –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–æ–±–æ–∫: ${item.name}`);
          return { ...item, status: 'done' as const };
        }
        return item;
      }) : combinedItems;

      console.log('üì¶ –§–∏–Ω–∞–ª—å–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–æ–±–æ–∫:', finalItems.map(item => `${item.name} (${item.type}): ${item.status}`));
      setChecklistItems(finalItems);
    }
  }, [expandedItems, isReadyToShip]);

  const fetchOrderDetails = async (id: string) => {
    try {
      setLoading(true);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
      setShowNextOrder(false);
      const response = await apiCall(`/api/orders/${id}`);
      const data = await response.json();
      
      if (data.success) {
        setOrder(data.data);
        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞–±–æ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
        setExpandingSets(true);
        try {
          const expanded = await expandProductSets(data.data.items, apiCall);
          setExpandedItems(expanded);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ - –µ—Å–ª–∏ id3 (–ù–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É), –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —Å–æ–±—Ä–∞–Ω–Ω–æ–µ
          const orderIsReadyToShip = data.data.status === '3' || data.data.status === 'id3';
          setIsReadyToShip(orderIsReadyToShip);
          let processedItems = expanded;

          if (orderIsReadyToShip) {
            console.log('üì¶ –ó–∞–∫–∞–∑ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å id3 (–ù–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É) - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã–π');
            console.log('üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', expanded.length);
            processedItems = expanded.map(item => {
              console.log(`üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å done –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${item.name} (${item.type})`);
              return {
                ...item,
                status: 'done' as const
              };
            });
            console.log('üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', processedItems.length);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—á–∞—Ç–∏ –¢–¢–ù –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º id3
            setShowPrintTTN(true);
          }

          // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö —Å —Ç–æ–≤–∞—Ä–∞–º–∏
          if (selectedBoxes.length > 0) {
            const itemsWithoutBoxes = processedItems.filter(item => item.type !== 'box');
            const combinedItems = combineBoxesWithItems(selectedBoxes, itemsWithoutBoxes, orderIsReadyToShip);
            setChecklistItems(combinedItems);
          } else {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º checklistItems —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
            setChecklistItems(processedItems);
          }
        } catch (error) {
          console.error('Error expanding product sets:', error);
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
          const isReadyToShipFallback = data.data.status === '3' || data.data.status === 'id3';
          const fallbackItems = data.data.items.map((item: any, index: number) => ({
            id: (index + 1).toString(),
            name: item.productName,
            quantity: item.quantity,
            expectedWeight: item.quantity * 0.3, // Fallback –¥–ª—è –æ—à–∏–±–∫–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
            status: isReadyToShipFallback ? 'done' : 'default' as const,
            type: 'product'
          }));

          setExpandedItems(fallbackItems);

          // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö —Å —Ç–æ–≤–∞—Ä–∞–º–∏
          if (selectedBoxes.length > 0) {
            const itemsWithoutBoxes = fallbackItems.filter(item => item.type !== 'box');
            const combinedItems = combineBoxesWithItems(selectedBoxes, itemsWithoutBoxes, isReadyToShipFallback);
            setChecklistItems(combinedItems);
          } else {
            setChecklistItems(fallbackItems);
          }

          if (isReadyToShipFallback) {
            setShowPrintTTN(true);
          }
        } finally {
          setExpandingSets(false);
        }
      } else {
        console.error('Failed to fetch order:', data.error);
      }
    } catch (error) {
      console.error('Error fetching order details:', error);
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
  const totalPortions = useMemo(() => 
    expandedItems.reduce((sum, item) => sum + item.quantity, 0), 
    [expandedItems]
  );

  const orderForAssembly: OrderForAssembly = {
    id: externalId,
    shipping: {
      carrier: order?.shippingMethod || '–ù–æ–≤–∞ –ü–æ—à—Ç–∞',
      trackingId: order?.ttn || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
      provider: order?.provider || 'novaposhta', // default provider
    },
    items: expandedItems,
    totalPortions: totalPortions,
  };

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–±–æ—Ä–∞—Ö
  const analyzeOrder = () => {
    if (!order?.items) return null;
    
    const analysis = {
      totalItems: order.items.length,
      expandedItems: expandedItems.length,
      hasSets: false,
      setsInfo: [] as Array<{name: string, quantity: number, sku: string}>,
      individualItems: [] as Array<{name: string, quantity: number, sku: string}>
    };
    
    order.items.forEach((item: any) => {
      // –ó–¥–µ—Å—å –º—ã –Ω–µ –º–æ–∂–µ–º —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–±–æ—Ä–æ–º,
      // —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      // –ù–æ –º–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (item.productName.toLowerCase().includes('–Ω–∞–±—ñ—Ä') || 
          item.productName.toLowerCase().includes('–∫–æ–º–ø–ª–µ–∫—Ç') ||
          item.productName.toLowerCase().includes('(–∫)')) {
        analysis.hasSets = true;
        analysis.setsInfo.push({
          name: item.productName,
          quantity: item.quantity,
          sku: item.sku || 'N/A'
        });
      } else {
        analysis.individualItems.push({
          name: item.productName,
          quantity: item.quantity,
          sku: item.sku || 'N/A'
        });
      }
    });
    
    return analysis;
  };

  const orderAnalysis = analyzeOrder();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
  const hasItems = order?.items && order.items.length > 0;

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!order) {
    return (
      <div className="text-center text-gray-500">
        –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* –ë–ª–æ–∫ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ */}
      <div className="flex flex-col xl:flex-row items-start gap-8 w-full">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ß–µ–∫-–ª–∏—Å—Ç –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ */}
        <div className="w-full max-w-5xl">
          {/* –ß–µ–∫-–ª–∏—Å—Ç –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—ó */}
          {!hasItems ? (
            <div className="bg-white p-8 rounded-lg shadow text-center">
              <div className="text-gray-400 mb-4">
                <svg className="w-16 h-16 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                </svg>
              </div>
              <p className="text-gray-600 text-lg mb-2">–£ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤</p>
              <p className="text-gray-500">–°–∫–ª–∞–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π</p>
            </div>
          ) : expandingSets ? (
            <div className="bg-white p-8 rounded-lg shadow text-center">
              <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-600">–†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –Ω–∞–±–æ—Ä–∏ —Ç–æ–≤–∞—Ä—ñ–≤...</p>
              <p className="text-sm text-gray-500 mt-2">–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥</p>
            </div>
          ) : (
            <ErrorBoundary>
              <OrderChecklist
                key={`checklist-${equipmentState.isSimulationMode}-${equipmentState.config?.connectionType}`}
                items={checklistItems}
                totalPortions={orderForAssembly.totalPortions}
                activeBoxIndex={activeBoxIndex}
                onActiveBoxChange={setActiveBoxIndex}
                onItemStatusChange={(itemId, status) => {
                  setChecklistItems(prevItems =>
                    prevItems.map(item =>
                      item.id === itemId ? { ...item, status } : item
                    )
                  );
                }}
                onPrintTTN={handlePrintTTN}
                showPrintTTN={showPrintTTN}
                onNextOrder={handleNextOrder}
                showNextOrder={showNextOrder}
              />
            </ErrorBoundary>
          )}
          
        </div>
          
        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="w-full xl:w-80">
          <RightPanel>
            <OrderTrackingNumber order={orderForAssembly} />
            <DeviationButton />

            {/* –ö–Ω–æ–ø–∫–∏ –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è */}
            {hasItems && !expandingSets && equipmentState.isSimulationMode && (
              <div className="w-full relative">
                <SimulationButtons
                  showPrintTTN={showPrintTTN}
                  setShowPrintTTN={setShowPrintTTN}
                  key={`sim-buttons-${equipmentState.isSimulationMode}`}
                  items={checklistItems}
                  activeBoxIndex={activeBoxIndex}
                  onSimulateScan={handleSimulateScan}
                  onSimulateWeigh={handleSimulateWeigh}
                  weightTolerance={calculateTolerance(checklistItems.find(item => item.status === 'pending')?.expectedWeight || 0)}
                  className="bg-white rounded-lg shadow"
                />
                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ */}
                <div
                  className="absolute top-3 right-3 z-10 flex items-center gap-1 bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full border border-green-200 cursor-pointer hover:bg-green-200 transition-colors"
                  onClick={async () => {
                    try {
                      await equipmentActions.refreshConfig();
                      setLastEquipmentSync(Date.now());
                    } catch (error) {
                      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
                    }
                  }}
                  title="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
                >
                  <div className={`w-2 h-2 rounded-full ${
                    Date.now() - lastEquipmentSync < 10000 ? 'bg-green-500 animate-pulse' : 'bg-yellow-500'
                  }`}></div>
                  <span>Live</span>
                </div>
              </div>
            )}

            {/* –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ—Ä–æ–±–æ–∫ */}
            {hasItems && !expandingSets && (
              <BoxSelector
                totalPortions={orderForAssembly.totalPortions}
                onBoxesChange={handleBoxesChange}
                onActiveBoxChange={setActiveBoxIndex}
                activeBoxIndex={activeBoxIndex}
                className="bg-white p-6 rounded-lg shadow"
              />
            )}

            {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ—Å–∞ –Ω–∞ –≤–µ—Å–∞—Ö */}
            {hasItems && !expandingSets && (
              <ScaleWeightDisplay
                currentScaleWeight={checklistItems.filter(item =>
                  (item.boxIndex || 0) === activeBoxIndex &&
                  (item.type === 'box' || item.status === 'done')
                ).reduce((acc, item) => acc + item.expectedWeight, 0)}
                totalOrderWeight={expandedItems.reduce((sum, item) => sum + item.expectedWeight, 0)}
                className="mb-4"
              />
            )}

          </RightPanel>
        </div>
      </div>

      {/* –ë–ª–æ–∫ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ */}
	  {(user && ['admin', 'boss'].includes(user.role)) && (
		<>
		<h2 className="text-xl font-semibold text-gray-800 mt-20 border-t border-gray-300 pt-16 mb-4">–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.orderNumber || externalId} <Code color="danger" className="bg-danger-500 text-white text-base">–ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤</Code></h2>
    
		<div className="flex w-full gap-6">
			<div className="flex flex-1 min-w-0 flex-col gap-6">
				{/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
				<Card>
				<CardHeader className="border-b border-gray-200">
          <DynamicIcon name="info" size={20} className="text-gray-600 mr-2" />
					<h4 className="text-base font-semibold">–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h4>
				</CardHeader>
				<CardBody>
					<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
					<div>
						<p><strong>ID:</strong> {order.id}</p>
						<p><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> {order.orderNumber || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
						<p><strong>–¢–¢–ù:</strong> {order.ttn || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
						<p><strong>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä—Ü—ñ–π:</strong> {order.quantity}</p>
						<p><strong>–°—Ç–∞—Ç—É—Å:</strong> {order.statusText}</p>
					</div>
					<div>
						<p><strong>–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:</strong> { order.orderDate ? formatDateOnly(order.orderDate) : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'} { order.orderDate && formatTimeOnly(order.orderDate)}</p>
						<p><strong>–°—É–º–∞:</strong> {order.totalPrice} –≥—Ä–Ω</p>
						<p><strong>–°–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> {order.shippingMethod}</p>
						<p><strong>–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</strong> {order.paymentMethod}</p>
            <p><strong>–ö–æ–º–µ–Ω—Ç–∞—Ä:</strong> {order.comment || '–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è'}</p>
					</div>
					</div>
				</CardBody>
				</Card>

				{/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ */}
				<Card>
				<CardHeader className="border-b border-gray-200">
          <DynamicIcon name="user" size={20} className="text-gray-600 mr-2" />
					<h4 className="text-base font-semibold">–ö–ª—ñ—î–Ω—Ç</h4>
				</CardHeader>
				<CardBody>
					<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
					<div>
						<p><strong>–ü–Ü–ë:</strong> {order.customerName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
						<p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {order.customerPhone || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
					</div>
					<div>
						<p><strong>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</strong></p>
						<p className="text-sm text-gray-600">{order.deliveryAddress || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</p>
					</div>
					</div>
				</CardBody>
				</Card>

				{/* –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ */}
				<Card>
				<CardHeader className="border-b border-gray-200">
          <DynamicIcon name="box" size={20} className="text-gray-600 mr-2" />
					<h4 className="text-base font-semibold">–°–∫–ª–∞–¥</h4>
				</CardHeader>
				<CardBody>
					{!hasItems ? (
						<p className="text-gray-500 text-center py-4">–°–∫–ª–∞–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ–π</p>
					) : order.items && order.items.length > 0 ? (
					<div className="space-y-2">
						{order.items.map((item: any, index: number) => (
						<div key={index} className="flex justify-between items-center p-3 bg-gray-50 border-l-4 border-gray-300 rounded">
							<div>
							<p className="font-medium">{item.productName}</p>
							<p className="text-sm text-gray-600">SKU: {item.sku}</p>
							</div>
							<div className="text-right">
							<p className="font-medium">{item.quantity} —à—Ç.</p>
							<p className="text-sm text-gray-600">{item.price} –≥—Ä–Ω</p>
							</div>
						</div>
						))}
					</div>
					) : (
					<p className="text-gray-500">–°–∫–ª–∞–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ</p>
					)}
				</CardBody>
				</Card>

				{/* –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —Å–æ—Å—Ç–∞–≤ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ */}
				<Card>
				<CardHeader className="border-b border-gray-200">
          <DynamicIcon name="box" size={20} className="text-gray-600 mr-2" />
					<h4 className="text-base font-semibold">–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏–π —Å–∫–ª–∞–¥</h4>
					<p className="text-sm text-gray-600 ml-auto">–ù–∞–±–æ—Ä–∏ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç—ñ –Ω–∞ –æ–∫—Ä–µ–º—ñ —Å—Ç—Ä–∞–≤–∏</p>
				</CardHeader>
				<CardBody>
					{!hasItems ? (
						<p className="text-gray-500 text-center py-4">–°–∫–ª–∞–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ–π</p>
					) : expandedItems && expandedItems.length > 0 ? (
					<div className="space-y-2">
						{/* –°–≤–æ–¥–∫–∞ –ø–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º */}
						<div className="mb-4 p-3 bg-green-50 rounded border-l-4 border-green-400">
							<div className="text-sm text-green-700">
								<strong>üìä –°–≤–æ–¥–∫–∞:</strong> {expandedItems.length} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å—Ç—Ä–∞–≤, 
								–∑–∞–≥–∞–ª–æ–º {expandedItems.reduce((sum, item) => sum + item.quantity, 0)} –ø–æ—Ä—Ü—ñ–π
							</div>
							
							{/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∏–∫–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è */}
							{orderAnalysis && orderAnalysis.hasSets && (
								<div className="mt-2 text-xs text-green-600">
									<strong>üîÑ –õ–æ–≥—ñ–∫–∞ —Å—É–º—É–≤–∞–Ω–Ω—è:</strong> –û–¥–Ω–∞–∫–æ–≤—ñ —Å—Ç—Ä–∞–≤–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –Ω–∞–±–æ—Ä—ñ–≤ —Ç–∞ –æ–∫—Ä–µ–º—ñ —Å—Ç—Ä–∞–≤–∏ 
									–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—É–º—É—é—Ç—å—Å—è –∑–∞ –Ω–∞–∑–≤–æ—é. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –≤ –Ω–∞–±–æ—Ä—ñ "–ê" —î "–ë–æ—Ä—â" √ó3, –∞ –≤ –Ω–∞–±–æ—Ä—ñ "–ë" 
									—î "–ë–æ—Ä—â" √ó2, —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ "–ë–æ—Ä—â" √ó5.
								</div>
							)}
						</div>
						
						{/* –°–ø–∏—Å–æ–∫ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
						{expandedItems.map((item: OrderChecklistItem, index: number) => (
						<div key={index} className="flex justify-between items-center p-3 bg-blue-50 rounded border-l-4 border-blue-400">
							<div>
							<p className="font-medium">{item.name}</p>
							<div className="flex items-center gap-2 text-sm text-gray-600">
								<span>ID: {item.id}</span>
								<span>‚Ä¢</span>
								<span>{item.quantity === 1 ? '1 –ø–æ—Ä—Ü—ñ—è' : item.quantity < 5 ? `${item.quantity} –ø–æ—Ä—Ü—ñ—ó` : `${item.quantity} –ø–æ—Ä—Ü—ñ–π`}</span>
								{/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è */}
								{item.quantity > 1 && (
									<span className="text-xs text-blue-500 bg-blue-100 px-1 py-0.5 rounded">
										{item.quantity > 5 ? '—Å—É–º–æ–≤–∞–Ω–æ' : '—Å—É–º'}
									</span>
								)}
							</div>
							</div>
							<div className="text-right">
							<p className="font-medium">{item.quantity} –ø–æ—Ä—Ü—ñ–π</p>
							<p className="text-sm text-gray-600">~{item.expectedWeight ? item.expectedWeight.toFixed(1) : '0.0'} –∫–≥</p>
							</div>
						</div>
						))}
						
						{/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ */}
						<div className="mt-4 p-3 bg-blue-50 rounded border-l-4 border-blue-400">
							<div className="text-xs text-blue-700">
								<strong>üí° –ü–µ—Ä–µ–≤–∞–≥–∏ —Å–∏—Å—Ç–µ–º–∏:</strong>
								<ul className="mt-1 ml-4 space-y-1">
									<li>‚Ä¢ –ö–ª–∞–¥–æ–≤—â–∏–∫ –±–∞—á–∏—Ç—å —Ç–æ—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–∂–Ω–æ—ó —Å—Ç—Ä–∞–≤–∏</li>
									<li>‚Ä¢ –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–∞–º'—è—Ç–∞—Ç–∏, —â–æ –≤—Ö–æ–¥–∏—Ç—å –≤ –Ω–∞–±–æ—Ä–∏</li>
									<li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—É–º—É–≤–∞–Ω–Ω—è –æ–¥–Ω–∞–∫–æ–≤–∏—Ö —Å—Ç—Ä–∞–≤</li>
									<li>‚Ä¢ –ó—Ä—É—á–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—è –∑–∞ –æ–∫—Ä–µ–º–∏–º–∏ —Å—Ç—Ä–∞–≤–∞–º–∏</li>
								</ul>
							</div>
						</div>
					</div>
					) : (
					<p className="text-gray-500 text-center py-4">–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏–π —Å–∫–ª–∞–¥ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π</p>
					)}
				</CardBody>
				</Card>
			</div>

			{/* –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ */}
			<div className="flex flex-1 min-w-0 flex-col gap-8">
        {/* –ì–∏–¥ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è */}
        {hasItems && !expandingSets && (
            <EquipmentIntegrationGuide />
          )}

        <Card className="flex-1">
        <CardHeader className="border-b border-gray-200">
                <DynamicIcon name="code" size={20} className="text-gray-600 mr-2" />
          <h4 className="text-base font-semibold">–°–∏—Ä—ñ –¥–∞–Ω—ñ –∑ SalesDrive API –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order.orderNumber || externalId}</h4>
        </CardHeader>
        <CardBody>
          <pre className="bg-gray-100 p-3 rounded text-sm overflow-auto h-full font-mono">
            {JSON.stringify(order.rawData || order, null, 2)}
          </pre>
        </CardBody>
        </Card>
      </div>
		</div>
	  	</>
	  )}
    </div>
  );
}
