import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

async function createAdmin() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîß –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
    const existingAdmin = await prisma.user.findFirst({
      where: { role: 'admin' }
    });
    
    if (existingAdmin) {
      console.log('‚úÖ –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingAdmin.email);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    const hashedPassword = await bcrypt.hash('admin123', 10);
    
    const admin = await prisma.user.create({
      data: {
        email: 'g.dziov@gmail.com', // –í–∞—à email
        name: '–ì–µ–æ—Ä–≥—ñ–π –î–∑—ñ–æ–≤',
        password: hashedPassword,
        role: 'admin',
        roleName: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä',
        isActive: true,
        lastLoginAt: new Date(),
        lastActivityAt: new Date()
      }
    });
    
    console.log('‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω:');
    console.log(`   Email: ${admin.email}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: admin123`);
    console.log(`   –†–æ–ª—å: ${admin.roleName}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createAdmin();
