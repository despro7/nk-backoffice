import { Router } from 'express';
import { salesDriveService } from '../services/salesDriveService.js';
import { orderDatabaseService } from '../services/orderDatabaseService.js';
import { syncHistoryService } from '../services/syncHistoryService.js';
import { authenticateToken } from '../middleware/auth.js';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const router = Router();

// Add this simple test endpoint to server/routes/orders.ts

/**
 * GET /api/orders/test
 * Simple test to check SalesDrive API configuration
 */
router.get('/test', async (req, res) => {
  try {
    console.log('üß™ Testing SalesDrive configuration...');
    
    // Check if environment variables are set
    const hasUrl = !!process.env.SALESDRIVE_API_URL;
    const hasKey = !!process.env.SALESDRIVE_API_KEY;
    
    const config = {
      hasUrl,
      hasKey,
      url: process.env.SALESDRIVE_API_URL || 'NOT_SET',
      keyPreview: hasKey ? 'SET (hidden)' : 'NOT_SET'
    };
    
    if (!hasUrl || !hasKey) {
      return res.json({
        success: false,
        message: '‚ùå SalesDrive API not configured',
        config,
        nextSteps: [
          'Create .env file in project root',
          'Add SALESDRIVE_API_URL=your_api_url',
          'Add SALESDRIVE_API_KEY=your_api_key'
        ]
      });
    }
    
    res.json({
      success: true,
      message: '‚úÖ SalesDrive API configuration found!',
      config,
      nextSteps: [
        'Test API connection',
        'Fetch sample orders'
      ]
    });
    
  } catch (error) {
    console.error('‚ùå Test error:', error);
    res.status(500).json({
      success: false,
      error: 'Test failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/orders
 * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
router.get('/', async (req, res) => {
  const startTime = Date.now();
  const { status, sync, sortBy, sortOrder, limit } = req.query;

  console.log('üöÄ [SERVER] GET /api/orders: Request received');
  console.log('üìã [SERVER] GET /api/orders: Query params:', {
    status,
    sync,
    sortBy: sortBy || 'createdAt',
    sortOrder: sortOrder || 'desc',
    limit: parseInt(limit as string) || 1000
  });

  try {
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, —Å–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    if (sync === 'true') {
      console.log('üîÑ [SERVER] GET /api/orders: Sync requested, starting synchronization...');
      const syncStartTime = Date.now();

      const syncResult = await salesDriveService.syncOrdersWithDatabase();

      const syncDuration = Date.now() - syncStartTime;
      console.log(`‚úÖ [SERVER] GET /api/orders: Sync completed in ${syncDuration}ms:`, {
        success: syncResult.success,
        synced: syncResult.synced,
        errors: syncResult.errors
      });

      if (!syncResult.success) {
        console.warn('‚ö†Ô∏è [SERVER] GET /api/orders: Sync completed with errors:', syncResult.errors);
      }
    } else {
      console.log('‚è≠Ô∏è [SERVER] GET /api/orders: No sync requested, proceeding with local data');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    console.log('üì¶ [SERVER] GET /api/orders: Fetching orders from database...');
    const dbStartTime = Date.now();

    const orders = await orderDatabaseService.getOrders({
      status: status as string,
      limit: parseInt(limit as string) || 100,
      offset: parseInt(req.query.offset as string) || 0,
      sortBy: (sortBy as 'orderDate' | 'createdAt' | 'lastSynced' | 'orderNumber') || 'createdAt',
      sortOrder: (sortOrder as 'asc' | 'desc') || 'desc'
    });

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const totalCount = await orderDatabaseService.getOrdersCount({
      status: status as string
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –¥–ª—è —Ç–∞–±–æ–≤
    const statusCounts = await orderDatabaseService.getStatusCounts();

    const dbDuration = Date.now() - dbStartTime;
    console.log(`‚úÖ [SERVER] GET /api/orders: Database fetch completed in ${dbDuration}ms, orders count: ${orders.length}`);

    const totalDuration = Date.now() - startTime;
    console.log(`üèÅ [SERVER] GET /api/orders: Total processing time: ${totalDuration}ms`);

    const response = {
      success: true,
      data: orders,
      metadata: {
        source: 'local_database',
        totalOrders: totalCount,
        ordersOnPage: orders.length,
        fetchedAt: new Date().toISOString(),
        lastSynced: orders.length > 0 ? orders[0].lastSynced : null,
        sortBy: sortBy || 'createdAt',
        sortOrder: sortOrder || 'desc',
        limit: parseInt(limit as string) || 100,
        offset: parseInt(req.query.offset as string) || 0,
        processingTimeMs: totalDuration,
        dbFetchTimeMs: dbDuration,
        statusCounts: statusCounts
      }
    };

    console.log('üì§ [SERVER] GET /api/orders: Sending response with', orders.length, 'orders');
    res.json(response);

  } catch (error) {
    const errorTime = Date.now() - startTime;
    console.error(`‚ùå [SERVER] GET /api/orders: Error after ${errorTime}ms:`, error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
      processingTimeMs: errorTime
    });
  }
});

/**
 * POST /api/orders/sync
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ SalesDrive —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
 */
router.post('/sync', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
    const { syncSettingsService } = await import('../services/syncSettingsService.js');
    const isEnabled = await syncSettingsService.isSyncEnabled('orders');

    if (!isEnabled) {
      return res.status(400).json({
        success: false,
        error: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö'
      });
    }

    const result = await salesDriveService.syncOrdersWithDatabase();

    res.json({
      success: result.success,
      message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–æ–≤–∞–Ω–æ: ${result.synced}, –û—à–∏–±–æ–∫: ${result.errors}`,
      data: result,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error syncing orders:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * GET /api/orders/sync/status
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
router.get('/sync/status', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤ (–≤–∫–ª—é—á–∞—è –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
    const stats = await orderDatabaseService.getOrderStats();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const lastSyncedOrder = await orderDatabaseService.getLastSyncedOrder();
    
    res.json({
      success: true,
      data: {
        lastSync: lastSyncedOrder?.lastSynced || null,
        totalOrders: stats.total,
        ordersByStatus: stats.byStatus,
        syncStatus: 'success'
      }
    });
  } catch (error) {
    console.error('Error getting sync status:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * GET /api/orders/:externalId
 * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ externalId (–Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ –∏–∑ SalesDrive)
 */
router.get('/:externalId', async (req, res) => {
  try {
    const { externalId } = req.params; // –ò–∑–º–µ–Ω–∏–ª–∏ —Å id –Ω–∞ externalId
    
    if (!externalId) {
      return res.status(400).json({
        success: false,
        error: 'Order external ID is required'
      });
    }

    console.log(`üîç Fetching order details for external ID: ${externalId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –ø–æ externalId
    const orderDetails = await orderDatabaseService.getOrderByExternalId(externalId);
    
    if (!orderDetails) {
      return res.status(404).json({
        success: false,
        error: 'Order not found'
      });
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    res.json({
      success: true,
      data: {
        id: orderDetails.id,
        externalId: orderDetails.externalId, // –î–æ–±–∞–≤–∏–ª–∏ externalId –≤ –æ—Ç–≤–µ—Ç
        orderNumber: orderDetails.orderNumber,
        ttn: orderDetails.ttn,
        quantity: orderDetails.quantity,
        status: orderDetails.status,
        statusText: orderDetails.statusText,
        items: orderDetails.items,
        customerName: orderDetails.customerName,
        customerPhone: orderDetails.customerPhone,
        deliveryAddress: orderDetails.deliveryAddress,
        totalPrice: orderDetails.totalPrice,
        createdAt: orderDetails.createdAt,
        orderDate: orderDetails.orderDate,
        shippingMethod: orderDetails.shippingMethod,
        paymentMethod: orderDetails.paymentMethod,
        cityName: orderDetails.cityName,
        provider: orderDetails.provider,
        rawData: orderDetails.rawData
      }
    });

  } catch (error) {
    console.error('‚ùå Error fetching order details:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch order details',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * PUT /api/orders/:externalId/status
 * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ SalesDrive
 */
router.put('/:externalId/status', async (req, res) => {
  try {
    const { externalId } = req.params; // –ò–∑–º–µ–Ω–∏–ª–∏ —Å id –Ω–∞ externalId
    const { status } = req.body;

    if (!status) {
      return res.status(400).json({
        success: false,
        error: 'Status is required',
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è orderNumber
    const order = await orderDatabaseService.getOrderByExternalId(externalId);
    if (!order) {
      return res.status(404).json({
        success: false,
        error: 'Order not found',
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ SalesDrive
    const result = await salesDriveService.updateSalesDriveOrderStatus(order.orderNumber, status);

    if (result) {
      console.log(`‚úÖ Successfully updated order ${order.orderNumber} status to ${status} in SalesDrive`);
      res.json({
        success: true,
        message: 'Order status updated successfully in SalesDrive',
        externalId: externalId,
        orderNumber: order.orderNumber,
        newStatus: status,
        salesDriveUpdated: true,
        updatedAt: new Date().toISOString()
      });
    } else {
      console.warn(`‚ö†Ô∏è Failed to update order ${order.orderNumber} status in SalesDrive`);
      res.status(500).json({
        success: false,
        error: 'Failed to update order status in SalesDrive',
        externalId: externalId,
        orderNumber: order.orderNumber,
        newStatus: status
      });
    }
  } catch (error) {
    console.error('Error updating order status:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * GET /api/orders/stats/summary
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
 */
router.get('/stats/summary', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    const stats = await orderDatabaseService.getOrdersStats();
    const lastSyncInfo = await orderDatabaseService.getLastSyncInfo();
    
    res.json({
      success: true,
      data: stats,
      metadata: {
        source: 'Local Database',
        lastSynced: lastSyncInfo,
        fetchedAt: new Date().toISOString(),
        note: 'Data from local database, updated via background sync'
      }
    });
  } catch (error) {
    console.error('Error getting order stats from database:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * GET /api/orders/raw/all
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ —Å—ã—Ä–æ–º –≤–∏–¥–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
router.get('/raw/all', async (req, res) => {
  try {
    const allOrders = await salesDriveService.fetchOrdersFromDate();
    
    if (!allOrders.success) {
      return res.status(500).json({
        success: false,
        error: allOrders.error || 'Failed to fetch orders',
      });
    }

    res.json({
      success: true,
      data: allOrders.data,
      metadata: {
        fetchedAt: new Date().toISOString(),
        totalOrders: allOrders.data?.length || 0,
        note: 'Raw data from SalesDrive API for debugging purposes'
      }
    });
  } catch (error) {
    console.error('Error getting raw orders:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * GET /api/orders/debug/raw
 * –ü–æ–ª—É—á–∏—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç SalesDrive API –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
router.get('/debug/raw', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –æ—Ç SalesDrive API
    const response = await fetch(`${process.env.SALESDRIVE_API_URL}?page=1&limit=5`, {
      method: 'GET',
      headers: {
        'Form-Api-Key': process.env.SALESDRIVE_API_KEY || '',
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`SalesDrive API error: ${response.status} - ${response.statusText}`);
    }

    const rawData = await response.json();
    
    res.json({
      success: true,
      rawData: rawData,
      metadata: {
        fetchedAt: new Date().toISOString(),
        apiUrl: process.env.SALESDRIVE_API_URL,
        note: 'Direct raw response from SalesDrive API without processing'
      }
    });
  } catch (error) {
    console.error('Error getting debug raw data:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/orders/period
 * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
 */
router.get('/period', async (req, res) => {
  try {
    const { startDate, endDate, sync } = req.query;

    if (!startDate || !endDate) {
      return res.status(400).json({
        success: false,
        error: 'startDate and endDate are required'
      });
    }

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, —Å–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    if (sync === 'true') {
      console.log('üîÑ Sync requested for period, starting synchronization...');
      const syncResult = await salesDriveService.syncOrdersWithDatabase();

      if (!syncResult.success) {
        console.warn('‚ö†Ô∏è Sync completed with errors:', syncResult.errors);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    const orders = await orderDatabaseService.getOrders({
      limit: 10000, // –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
      sortBy: 'orderDate',
      sortOrder: 'desc'
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    const filteredOrders = orders.filter(order => {
      if (!order.orderDate) return false;
      const orderDate = new Date(order.orderDate);
      const start = new Date(startDate as string);
      const end = new Date(endDate as string);
      return orderDate >= start && orderDate <= end;
    });

    res.json({
      success: true,
      data: filteredOrders,
      metadata: {
        source: 'local_database',
        period: { startDate, endDate },
        totalOrders: filteredOrders.length,
        fetchedAt: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error('Error getting orders for period:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * GET /api/orders/products/stats/test
 * –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
router.get('/products/stats/test', async (req, res) => {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const testData = [
      {
        name: "–ë–æ—Ä—â —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π",
        sku: "BORSCH-001",
        orderedQuantity: 25,
        stockBalances: { "1": 50, "3": 30, "4": 20 }
      },
      {
        name: "–í–∞—Ä–µ–Ω–∏–∫–∏ –∑ –∫–∞—Ä—Ç–æ–ø–ª–µ—é",
        sku: "VARENYKY-001",
        orderedQuantity: 15,
        stockBalances: { "1": 40, "3": 25 }
      },
      {
        name: "–ö—É—Ä—á–∞ –ø–æ-–∫–∏—ó–≤—Å—å–∫–∏",
        sku: "KYIV-CHICKEN-001",
        orderedQuantity: 8,
        stockBalances: { "1": 15, "3": 12, "4": 10 }
      }
    ];

    res.json({
      success: true,
      data: testData,
      metadata: {
        source: 'test_data',
        filters: {
          status: 'all',
          dateRange: null
        },
        totalProducts: testData.length,
        totalOrders: 1,
        fetchedAt: new Date().toISOString(),
        note: 'Test data for debugging purposes'
      }
    });
  } catch (error) {
    console.error('Error in test endpoint:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * POST /api/orders/fix-items-data
 * –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ items –≤ –∑–∞–∫–∞–∑–∞—Ö
 */
router.post('/fix-items-data', async (req, res) => {
  try {
    const { user } = req as any;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ ADMIN)
    if (!user || user.role !== 'admin') {
      return res.status(403).json({ error: 'Access denied. Admin role required.' });
    }

    const orders = await orderDatabaseService.getOrders({ limit: 10000 });
    let fixedCount = 0;
    let skippedCount = 0;

    for (const order of orders) {
      if (order.items === '[object Object]') {
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ rawData
        try {
          if (order.rawData && typeof order.rawData === 'string') {
            const rawData = JSON.parse(order.rawData);

            // –ò—â–µ–º items –≤ rawData (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω–æ–π)
            let items = null;
            if (rawData.items) {
              items = rawData.items;
            } else if (rawData.data && rawData.data.items) {
              items = rawData.data.items;
            }

            if (items && Array.isArray(items)) {
              // –û–±–Ω–æ–≤–ª—è–µ–º items –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
              await orderDatabaseService.updateOrder(order.id, {
                items: items
              });
              fixedCount++;
              console.log(`Fixed order ${order.externalId}`);
            } else {
              console.warn(`Could not extract items from rawData for order ${order.externalId}`);
              skippedCount++;
            }
          } else {
            skippedCount++;
          }
        } catch (parseError) {
          console.warn(`Failed to parse rawData for order ${order.externalId}:`, parseError);
          skippedCount++;
        }
      }
    }

    res.json({
      success: true,
      message: `Fixed ${fixedCount} orders, skipped ${skippedCount} orders`,
      stats: {
        totalOrders: orders.length,
        fixedCount,
        skippedCount
      }
    });
  } catch (error) {
    console.error('Error fixing items data:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * POST /api/orders/preprocess-all
 * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
 */
router.post('/preprocess-all', async (req, res) => {
  try {
    const { user } = req as any;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ ADMIN)
    if (!user || user.role !== 'admin') {
      return res.status(403).json({ error: 'Access denied. Admin role required.' });
    }

    console.log('üöÄ Starting preprocessing for all orders...');

    const BATCH_SIZE = 50; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 50 –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Ä–∞–∑
    let totalProcessed = 0;
    let totalErrors = 0;
    let totalOrders = 0;

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    const allOrders = await orderDatabaseService.getOrders({ limit: 10000 });
    totalOrders = allOrders.length;
    console.log(`üìä Found ${totalOrders} orders to process`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–∞—á–∫–∞–º–∏
    for (let batchStart = 0; batchStart < totalOrders; batchStart += BATCH_SIZE) {
      const batchEnd = Math.min(batchStart + BATCH_SIZE, totalOrders);
      const batchOrders = allOrders.slice(batchStart, batchEnd);

      console.log(`üîÑ Processing batch ${Math.floor(batchStart / BATCH_SIZE) + 1}/${Math.ceil(totalOrders / BATCH_SIZE)}: orders ${batchStart + 1}-${batchEnd}`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞—á–∫–µ
      const batchPromises = batchOrders.map(async (order) => {
        try {
          const success = await (orderDatabaseService as any).updateProcessedItems(order.id);
          return success ? 'success' : 'error';
        } catch (error) {
          console.error(`‚ùå Error processing order ${order.externalId}:`, error);
          return 'error';
        }
      });

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–∞—á–∫–µ
      const batchResults = await Promise.all(batchPromises);

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—á–∫–∏
      const batchProcessed = batchResults.filter(result => result === 'success').length;
      const batchErrors = batchResults.filter(result => result === 'error').length;

      totalProcessed += batchProcessed;
      totalErrors += batchErrors;

      console.log(`‚úÖ Batch completed: ${batchProcessed} processed, ${batchErrors} errors (${totalProcessed}/${totalOrders} total)`);

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
      if (batchEnd < totalOrders) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }

    console.log(`üéâ Preprocessing completed: ${totalProcessed} processed, ${totalErrors} errors`);

    res.json({
      success: true,
      message: `Preprocessed ${totalProcessed} orders in ${Math.ceil(totalOrders / BATCH_SIZE)} batches, ${totalErrors} errors`,
      stats: {
        totalOrders,
        processedCount: totalProcessed,
        errorCount: totalErrors,
        batchesProcessed: Math.ceil(totalOrders / BATCH_SIZE),
        batchSize: BATCH_SIZE
      }
    });
  } catch (error) {
    console.error('Error in preprocess-all:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * POST /api/orders/:externalId/cache
 * –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–µ—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
router.post('/:externalId/cache', async (req, res) => {
  try {
    const { externalId } = req.params;

    // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log(`Processing cache for order ${externalId}...`);

    const success = await (orderDatabaseService as any).updateProcessedItems(externalId);

    if (success) {
      res.json({
        success: true,
        message: `Cache updated for order ${externalId}`
      });
    } else {
      res.status(500).json({
        success: false,
        error: `Failed to update cache for order ${externalId}`
      });
    }
  } catch (error) {
    console.error('Error updating cache:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * GET /api/orders/products/stats/demo
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
router.get('/products/stats/demo', async (req, res) => {
  try {
    console.log('üöÄ Demo endpoint: Simulating cached product statistics...');

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const mockCachedStats = [
      {
        name: "–ë–æ—Ä—â –∑ —Ç–µ–ª—è—Ç–∏–Ω–æ—é",
        sku: "01001",
        orderedQuantity: 15,
        stockBalances: { "1": 50, "3": 30, "4": 20 }
      },
      {
        name: "–ü–ª–æ–≤ –∑—ñ —Å–≤–∏–Ω–∏–Ω–æ—é",
        sku: "03002",
        orderedQuantity: 25,
        stockBalances: { "1": 40, "3": 25 }
      },
      {
        name: "–ö–∞—à–∞ –≥—Ä–µ—á–∞–Ω–∞ –∑—ñ —Å–≤–∏–Ω–∏–Ω–æ—é",
        sku: "03003",
        orderedQuantity: 18,
        stockBalances: { "1": 35, "3": 22, "4": 15 }
      },
      {
        name: "–ü–µ—á–µ–Ω—è –∑—ñ —Å–≤–∏–Ω–∏–Ω–æ—é",
        sku: "03001",
        orderedQuantity: 12,
        stockBalances: { "1": 28, "3": 18 }
      }
    ];

    console.log(`‚úÖ Demo: Processed ${mockCachedStats.length} products from cache`);

    res.json({
      success: true,
      data: mockCachedStats,
      metadata: {
        source: 'cached_data_demo',
        filters: {
          status: 'all',
          dateRange: null
        },
        totalProducts: mockCachedStats.length,
        totalOrders: 5,
        fetchedAt: new Date().toISOString(),
        note: 'Demo data showing how cached statistics work - much faster than real-time calculation!'
      }
    });
  } catch (error) {
    console.error('Error in demo endpoint:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * POST /api/orders/sync/manual
 * –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç
 */
router.post('/sync/manual', async (req, res) => {
  try {
    const { startDate, endDate } = req.body;

    if (!startDate) {
      return res.status(400).json({
        success: false,
        error: 'startDate is required'
      });
    }

    console.log(`üîÑ [MANUAL SYNC] Starting manual sync from: ${startDate} to: ${endDate || 'current date'}`);

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
    const syncResult = await salesDriveService.syncOrdersWithDatabaseManual(startDate, endDate);

    console.log(`‚úÖ [MANUAL SYNC] Completed: ${syncResult.synced} synced, ${syncResult.errors} errors`);

    res.json({
      success: true,
      message: `–†—É—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${syncResult.synced} —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ, ${syncResult.errors} –ø–æ–º–∏–ª–æ–∫`,
      data: syncResult
    });

  } catch (error) {
    console.error('‚ùå Manual sync error:', error);
    res.status(500).json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ —Ä—É—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó'
    });
  }
});

/**
 * GET /api/orders/sync/history
 * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π
 */
router.get('/sync/history', authenticateToken, async (req, res) => {
  try {
    const limit = parseInt(req.query.limit as string) || 20;
    const syncType = req.query.type as string;

    console.log(`üìã [SYNC HISTORY] Getting sync history (limit: ${limit}, type: ${syncType || 'all'})`);

    let history;
    if (syncType && ['manual', 'automatic', 'background'].includes(syncType)) {
      history = await syncHistoryService.getSyncHistoryByType(syncType as 'manual' | 'automatic' | 'background', limit);
    } else {
      history = await syncHistoryService.getSyncHistory(limit);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await syncHistoryService.getSyncStatistics();

    res.json({
      success: true,
      data: {
        history: history,
        statistics: stats
      }
    });

  } catch (error) {
    console.error('‚ùå Error getting sync history:', error);
    res.status(500).json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ–π'
    });
  }
});

/**
 * GET /api/orders/sync/history/:id
 * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
router.get('/sync/history/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    console.log(`üìã [SYNC HISTORY] Getting sync details for ID: ${id}`);

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ ID
    const historyRecord = await prisma.syncHistory.findUnique({
      where: { id: id }
    });

    if (!historyRecord) {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–ø–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    res.json({
      success: true,
      data: historyRecord
    });

  } catch (error) {
    console.error('‚ùå Error getting sync details:', error);
    res.status(500).json({
      success: false,
      error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó'
    });
  }
});

/**
 * GET /api/orders/products/stats
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏–∑ –∑–∞–∫–∞–∑–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
 */
router.get('/products/stats', async (req, res) => {
  try {
    const { status, startDate, endDate, sync } = req.query;
    // console.log('üîç SERVER RECEIVED:', { status, startDate, endDate, sync });

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, —Å–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    if (sync === 'true') {
      console.log('üîÑ Sync requested for products stats, starting synchronization...');
      const syncResult = await salesDriveService.syncOrdersWithDatabase();

      if (!syncResult.success) {
        console.warn('‚ö†Ô∏è Sync completed with errors:', syncResult.errors);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    const orders = await orderDatabaseService.getOrders({
      status: status as string,
      limit: 1000, // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ 1000 –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      sortBy: 'orderDate',
      sortOrder: 'desc'
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã
    let filteredOrders = orders;
    if (startDate && endDate) {
      const originalCount = orders.length;
      const start = new Date(startDate as string + ' 00:00:00');
      const end = new Date(endDate as string + ' 23:59:59');

      console.log(`üìÖ Filtering by date range: ${start.toISOString()} to ${end.toISOString()}`);

      filteredOrders = orders.filter(order => {
        if (!order.orderDate) return false;
        const orderDate = new Date(order.orderDate);
        const matches = orderDate >= start && orderDate <= end;

        if (filteredOrders.length < 10) { // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          console.log(`üìÖ Order ${order.externalId}: ${orderDate.toISOString()} - ${matches ? '‚úÖ' : '‚ùå'}`);
        }

        return matches;
      });
      console.log(`üìÖ Date filtering: ${originalCount} -> ${filteredOrders.length} orders`);
    }

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const productStats: { [key: string]: { name: string; sku: string; orderedQuantity: number; stockBalances: { [warehouse: string]: number } } } = {};

    console.log(`Processing ${filteredOrders.length} orders from cache...`);

    let processedOrders = 0;
    let cacheHits = 0;
    let cacheMisses = 0;



    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º –∏ —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∫–µ—à–∞
    for (const order of filteredOrders) {
      if (processedOrders % 50 === 0) {
        console.log(`Processed ${processedOrders}/${filteredOrders.length} orders (${cacheHits} cache hits, ${cacheMisses} misses)`);
      }
      processedOrders++;

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const processedItems = order.processedItems;
        if (processedItems && typeof processedItems === 'string') {
          const cachedStats = JSON.parse(processedItems);
          if (Array.isArray(cachedStats)) {
            cacheHits++;

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            for (const item of cachedStats) {
              if (item && item.sku) {
                if (productStats[item.sku]) {
                  productStats[item.sku].orderedQuantity += item.orderedQuantity || 0;
                  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö (–±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ)
                  productStats[item.sku].stockBalances = item.stockBalances || {};
                } else {
                  productStats[item.sku] = {
                    name: item.name || item.sku,
                    sku: item.sku,
                    orderedQuantity: item.orderedQuantity || 0,
                    stockBalances: item.stockBalances || {}
                  };
                }
              }
            }
          } else {
            // –ö–µ—à –ø–æ–≤—Ä–µ–∂–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
            console.warn(`Invalid cached data format for order ${order.externalId}, skipping...`);
            cacheMisses++;
          }
        } else {
          // –ö–µ—à–∞ –Ω–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
          console.log(`No cached data for order ${order.externalId}, skipping...`);
          cacheMisses++;
        }
      } catch (error) {
        // –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–µ—à–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
        console.warn(`Error processing cached data for order ${order.externalId}, skipping:`, error);
        cacheMisses++;
      }
    }

    console.log(`‚úÖ Cache processing completed: ${cacheHits} hits, ${cacheMisses} misses`);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const productStatsArray = Object.values(productStats);

    console.log('‚úÖ FINAL RESULT:', {
      totalProducts: productStatsArray.length,
      totalOrders: filteredOrders.length,
      filters: {
        status: status || 'all',
        dateRange: startDate && endDate ? { startDate, endDate } : null
      }
    });

    res.json({
      success: true,
      data: productStatsArray,
      metadata: {
        source: 'local_database',
        filters: {
          status: status || 'all',
          dateRange: startDate && endDate ? { startDate, endDate } : null
        },
        totalProducts: productStatsArray.length,
        totalOrders: filteredOrders.length,
        fetchedAt: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error('Error getting products stats:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * GET /api/orders/products/stats/dates
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –¥–∞—Ç–∞–º
 */
router.get('/products/stats/dates', async (req, res) => {
  try {
    const { sku, status, startDate, endDate, sync } = req.query;

    if (!sku) {
      return res.status(400).json({
        success: false,
        error: 'SKU —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, —Å–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    if (sync === 'true') {
      console.log('üîÑ Sync requested for product date stats, starting synchronization...');
      const syncResult = await salesDriveService.syncOrdersWithDatabase();

      if (!syncResult.success) {
        console.warn('‚ö†Ô∏è Sync completed with errors:', syncResult.errors);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    const orders = await orderDatabaseService.getOrders({
      status: status as string,
      limit: 1000,
      sortBy: 'orderDate',
      sortOrder: 'asc' // –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—Ç
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã
    let filteredOrders = orders;
    if (startDate && endDate) {
      const start = new Date(startDate as string + ' 00:00:00');
      const end = new Date(endDate as string + ' 23:59:59');

      filteredOrders = orders.filter(order => {
        if (!order.orderDate) return false;
        const orderDate = new Date(order.orderDate);
        return orderDate >= start && orderDate <= end;
      });
    }

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞—Ç–∞–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    const dateStats: { [date: string]: { date: string; orderedQuantity: number; stockBalances: { [warehouse: string]: number } } } = {};

    console.log(`Processing ${filteredOrders.length} orders for product ${sku}...`);

    for (const order of filteredOrders) {
      try {
        const processedItems = order.processedItems;
        if (processedItems && typeof processedItems === 'string') {
          const cachedStats = JSON.parse(processedItems);
          if (Array.isArray(cachedStats)) {
            // –ò—â–µ–º —Ç–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º SKU
            const productItem = cachedStats.find(item => item && item.sku === sku);
            if (productItem) {
              // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ YYYY-MM-DD
              const orderDate = new Date(order.orderDate);
              const dateKey = orderDate.toISOString().split('T')[0];

              if (dateStats[dateKey]) {
                dateStats[dateKey].orderedQuantity += productItem.orderedQuantity || 0;
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö (–±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ)
                dateStats[dateKey].stockBalances = productItem.stockBalances || {};
              } else {
                dateStats[dateKey] = {
                  date: dateKey,
                  orderedQuantity: productItem.orderedQuantity || 0,
                  stockBalances: productItem.stockBalances || {}
                };
              }
            }
          }
        }
      } catch (error) {
        console.warn(`Error processing cached data for order ${order.externalId}:`, error);
      }
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    const dateStatsArray = Object.values(dateStats).sort((a, b) => a.date.localeCompare(b.date));

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞
    let productInfo = { name: sku, sku: sku };
    for (const order of filteredOrders.slice().reverse()) {
      try {
        const processedItems = order.processedItems;
        if (processedItems && typeof processedItems === 'string') {
          const cachedStats = JSON.parse(processedItems);
          if (Array.isArray(cachedStats)) {
            const productItem = cachedStats.find(item => item && item.sku === sku);
            if (productItem) {
              productInfo = { name: productItem.name || sku, sku: productItem.sku };
              break;
            }
          }
        }
      } catch (error) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
      }
    }

    console.log('‚úÖ PRODUCT DATE STATS RESULT:', {
      product: productInfo,
      totalDates: dateStatsArray.length,
      totalOrders: filteredOrders.length,
      filters: {
        sku,
        status: status || 'all',
        dateRange: startDate && endDate ? { startDate, endDate } : null
      }
    });

    res.json({
      success: true,
      data: dateStatsArray,
      product: productInfo,
      metadata: {
        source: 'local_database',
        filters: {
          sku,
          status: status || 'all',
          dateRange: startDate && endDate ? { startDate, endDate } : null
        },
        totalDates: dateStatsArray.length,
        totalOrders: filteredOrders.length,
        fetchedAt: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error('Error getting product date stats:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * GET /api/orders/cache/info
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–µ—à–∞
 */
router.get('/cache/info', async (req, res) => {
  try {
    const cacheInfo = salesDriveService.getCacheInfo();

    res.json({
      success: true,
      data: cacheInfo,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error getting cache info:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * POST /api/orders/cache/clear
 * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à
 */
router.post('/cache/clear', async (req, res) => {
  try {
    const result = salesDriveService.clearCache();

    res.json({
      success: true,
      message: `Cache cleared successfully`,
      data: result,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error clearing cache:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * DELETE /api/orders/cache/:key
 * –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∏–∑ –∫–µ—à–∞
 */
router.delete('/cache/:key', async (req, res) => {
  try {
    const { key } = req.params;
    const deleted = salesDriveService.clearCacheEntry(decodeURIComponent(key));

    res.json({
      success: true,
      message: deleted ? `Cache entry cleared` : `Cache entry not found`,
      data: { deleted, key },
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error clearing cache entry:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * GET /api/orders/sync-statistics
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–º –¥–∞–Ω–Ω—ã–º
 */
router.get('/sync-statistics', async (req, res) => {
  try {
    const { startDate, endDate, includeProductStats, includeOrderDetails } = req.query;

    const options: any = {};

    if (startDate) options.startDate = startDate as string;
    if (endDate) options.endDate = endDate as string;
    if (includeProductStats === 'true') options.includeProductStats = true;
    if (includeOrderDetails === 'true') options.includeOrderDetails = true;

    console.log('üìä Sync statistics request:', options);

    const result = await salesDriveService.getSyncStatistics(options);

    res.json({
      success: result.success,
      data: result.data,
      error: result.error,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error in sync statistics endpoint:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * GET /api/orders/advanced-filter
 * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
 */
router.get('/advanced-filter', async (req, res) => {
  try {
    const {
      startDate,
      endDate,
      statusIds,
      minAmount,
      maxAmount,
      paymentMethods,
      shippingMethods,
      cities,
      limit,
      offset,
      sync
    } = req.query;

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, —Å–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    if (sync === 'true') {
      console.log('üîÑ Sync requested for advanced filter, starting synchronization...');
      const syncResult = await salesDriveService.syncOrdersWithDatabase();

      if (!syncResult.success) {
        console.warn('‚ö†Ô∏è Sync completed with errors:', syncResult.errors);
      }
    }

    // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filters: any = {};

    if (startDate) filters.startDate = startDate as string;
    if (endDate) filters.endDate = endDate as string;

    if (statusIds) {
      filters.statusIds = Array.isArray(statusIds) ? statusIds as string[] : [statusIds as string];
    }

    if (minAmount) filters.minAmount = parseFloat(minAmount as string);
    if (maxAmount) filters.maxAmount = parseFloat(maxAmount as string);

    if (paymentMethods) {
      filters.paymentMethods = Array.isArray(paymentMethods) ? paymentMethods as string[] : [paymentMethods as string];
    }

    if (shippingMethods) {
      filters.shippingMethods = Array.isArray(shippingMethods) ? shippingMethods as string[] : [shippingMethods as string];
    }

    if (cities) {
      filters.cities = Array.isArray(cities) ? cities as string[] : [cities as string];
    }

    if (limit) filters.limit = parseInt(limit as string);
    if (offset) filters.offset = parseInt(offset as string);

    console.log('üîç Advanced filter request:', filters);

    const result = await salesDriveService.fetchOrdersWithFilters(filters);

    res.json({
      success: result.success,
      data: result.data,
      metadata: result.metadata,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error in advanced filter endpoint:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

/**
 * GET /api/orders/products/chart
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –¥–∞—Ç–∞–º
 */
router.get('/products/chart', async (req, res) => {
  try {
    const { status, startDate, endDate, sync, groupBy = 'day', products } = req.query;

    if (!startDate || !endDate) {
      return res.status(400).json({
        success: false,
        error: 'startDate –∏ endDate –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, —Å–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    if (sync === 'true') {
      console.log('üîÑ Sync requested for products chart, starting synchronization...');
      const syncResult = await salesDriveService.syncOrdersWithDatabase();

      if (!syncResult.success) {
        console.warn('‚ö†Ô∏è Sync completed with errors:', syncResult.errors);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    const orders = await orderDatabaseService.getOrders({
      status: status as string,
      limit: 1000,
      sortBy: 'orderDate',
      sortOrder: 'asc'
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    const start = new Date(startDate as string + ' 00:00:00');
    const end = new Date(endDate as string + ' 23:59:59');

    // console.log(`üìÖ Filtering chart data by date range: ${start.toISOString()} to ${end.toISOString()}`);

    const filteredOrders = orders.filter(order => {
      if (!order.orderDate) return false;
      const orderDate = new Date(order.orderDate);
      return orderDate >= start && orderDate <= end;
    });

    console.log(`üìä Processing ${filteredOrders.length} orders for chart`);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è API
    const productGroupOptions = [
      { key: "first_courses", label: "–ü–µ—Ä—à—ñ —Å—Ç—Ä–∞–≤–∏" },
      { key: "main_courses", label: "–î—Ä—É–≥—ñ —Å—Ç—Ä–∞–≤–∏" },
    ];

    // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–∞
    const getProductGroup = (productName: string): string => {
      const name = productName.toLowerCase();
      if (name.includes('–±–æ—Ä—â') || name.includes('—Å—É–ø') || name.includes('–±—É–ª—å–π–æ–Ω') || name.includes('–ø–µ—Ä—à–∏–π') || name.includes('–ø–µ—Ä—à–∞')) {
        return 'first_courses';
      }
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å—á–∏—Ç–∞–µ–º –≤—Ç–æ—Ä—ã–º–∏ –±–ª—é–¥–∞–º–∏
      return 'main_courses';
    };

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    let filterProducts: string[] = [];
    let filterGroups: string[] = [];

    if (products) {
      if (Array.isArray(products)) {
        filterProducts = products as string[];
      } else {
        filterProducts = [products as string];
      }

      // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
      const individualProducts = filterProducts.filter(p => !p.startsWith('group_'));
      const groupFilters = filterProducts.filter(p => p.startsWith('group_'));

      filterProducts = individualProducts;
      filterGroups = groupFilters.map(g => g.replace('group_', ''));


    }

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –¥–∞—Ç–∞–º
    const chartData: { [dateKey: string]: { [sku: string]: { name: string; quantity: number } } } = {};
    const productInfo: { [sku: string]: string } = {};

    for (const order of filteredOrders) {
      try {
        const processedItems = order.processedItems;
        if (processedItems && typeof processedItems === 'string') {
          const cachedStats = JSON.parse(processedItems);
          if (Array.isArray(cachedStats)) {
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
            const orderDate = new Date(order.orderDate);
            let dateKey: string;

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π offset, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –¥–æ –ö–∏–µ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            const localOffset = orderDate.getTimezoneOffset() * 60000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            const kyivOffset = 3 * 60 * 60 * 1000; // UTC+3 –¥–ª—è –ª–µ—Ç–∞
            const kyivTime = new Date(orderDate.getTime() + localOffset + kyivOffset);

            switch (groupBy) {
              case 'hour':
                dateKey = kyivTime.toISOString().slice(0, 13); // YYYY-MM-DDTHH
                break;
              case 'day':
                dateKey = kyivTime.toISOString().slice(0, 10); // YYYY-MM-DD
                break;
              case 'week':
                const weekStart = new Date(kyivTime);
                weekStart.setDate(kyivTime.getDate() - kyivTime.getDay() + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                dateKey = weekStart.toISOString().slice(0, 10);
                break;
              case 'month':
                dateKey = kyivTime.toISOString().slice(0, 7); // YYYY-MM
                break;
              default:
                dateKey = kyivTime.toISOString().slice(0, 10);
            }

            if (!chartData[dateKey]) {
              chartData[dateKey] = {};
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
            for (const item of cachedStats) {
              if (item && item.sku && item.orderedQuantity > 0) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏ –≥—Ä—É–ø–ø–∞–º
                let shouldInclude = false;

                if (filterProducts.length === 0 && filterGroups.length === 0) {
                  // –ù–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
                  shouldInclude = true;
                } else {
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                  if (filterProducts.includes(item.sku)) {
                    shouldInclude = true;
                  }

                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
                  if (filterGroups.length > 0) {
                    const productGroup = getProductGroup(item.name || item.sku);
                    if (filterGroups.includes(productGroup)) {
                      shouldInclude = true;
                    }
                  }
                }

                if (shouldInclude) {
                  if (!productInfo[item.sku]) {
                    productInfo[item.sku] = item.name || item.sku;
                  }

                  if (!chartData[dateKey][item.sku]) {
                    chartData[dateKey][item.sku] = {
                      name: item.name || item.sku,
                      quantity: 0
                    };
                  }

                  chartData[dateKey][item.sku].quantity += item.orderedQuantity;
                }
              }
            }
          }
        }
      } catch (error) {
        console.warn(`Error processing order ${order.externalId} for chart:`, error);
      }
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const chartDataArray = Object.entries(chartData)
      .map(([dateKey, products]) => {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç groupBy
        let formattedDate = dateKey;
        let displayDate = dateKey;

        if (groupBy === 'hour') {
          // –î–ª—è —á–∞—Å–æ–≤: "29.08 21:00"
          const date = new Date(dateKey + ':00:00');
          formattedDate = date.toLocaleDateString('uk-UA', {
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
          });
          displayDate = formattedDate;
        } else if (groupBy === 'day') {
          // –î–ª—è –¥–Ω–µ–π: "29.08"
          const date = new Date(dateKey);
          formattedDate = date.toLocaleDateString('uk-UA', {
            day: '2-digit',
            month: '2-digit'
          });
          displayDate = formattedDate;
        } else if (groupBy === 'week') {
          // –î–ª—è –Ω–µ–¥–µ–ª—å: "26.08 - 01.09"
          const weekStart = new Date(dateKey);
          const weekEnd = new Date(weekStart);
          weekEnd.setDate(weekStart.getDate() + 6);

          const startStr = weekStart.toLocaleDateString('uk-UA', {
            day: '2-digit',
            month: '2-digit'
          });
          const endStr = weekEnd.toLocaleDateString('uk-UA', {
            day: '2-digit',
            month: '2-digit'
          });

          formattedDate = `${startStr} - ${endStr}`;
          displayDate = formattedDate;
        } else if (groupBy === 'month') {
          // –î–ª—è –º–µ—Å—è—Ü–µ–≤: "—Å–µ—Ä–ø–µ–Ω—å 2025"
          const date = new Date(dateKey + '-01');
          formattedDate = date.toLocaleDateString('uk-UA', {
            month: 'long',
            year: 'numeric'
          });
          displayDate = formattedDate;
        }

        return {
          date: displayDate,
          rawDate: dateKey, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—É—é –¥–∞—Ç—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
          ...Object.fromEntries(
            Object.entries(products).map(([sku, data]) => [
              `product_${sku}`,
              data.quantity
            ])
          ),
          ...Object.fromEntries(
            Object.entries(products).map(([sku, data]) => [
              `product_${sku}_name`,
              data.name
            ])
          )
        };
      })
      .sort((a, b) => a.rawDate.localeCompare(b.rawDate));

    // –°–æ–∑–¥–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø –∏–ª–∏ –æ–±—â—É—é –ª–∏–Ω–∏—é
    const totalDataArray = chartDataArray.map(point => {
      const result = { ...point };

      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ - —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
      if (filterGroups.length > 0) {
        filterGroups.forEach((groupKey, index) => {
          // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
          const groupProducts = Object.keys(point).filter(key => {
            if (!key.startsWith('product_') || key.endsWith('_name')) return false;

            const productName = point[`${key}_name`];
            const productGroup = getProductGroup(productName);
            return productGroup === groupKey;
          });

          // –°—É–º–º–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
          const groupTotal = groupProducts.reduce((sum, key) => sum + (point[key] || 0), 0);

          if (groupTotal > 0) {
            const groupLabel = productGroupOptions.find(opt => opt.key === groupKey)?.label || groupKey;
            result[`group_${groupKey}`] = groupTotal;
            result[`group_${groupKey}_name`] = groupLabel;
          }
        });
      }

      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
      if (filterProducts.length > 0) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –∫—Ä–æ–º–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö
        Object.keys(result).forEach(key => {
          if (key.startsWith('product_') && !key.endsWith('_name') && key !== 'product_') {
            const sku = key.replace('product_', '');
            if (!filterProducts.includes(sku)) {
              delete result[key];
              delete result[`${key}_name`];
            }
          }
        });
      }

      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ - —Å–æ–∑–¥–∞–µ–º –æ–±—â—É—é –ª–∏–Ω–∏—é –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
      if (filterGroups.length === 0 && filterProducts.length === 0) {
        const products = Object.keys(point).filter(key =>
          key.startsWith('product_') && !key.endsWith('_name') && key !== 'product_'
        );
        const total = products.reduce((sum, key) => sum + (point[key] || 0), 0);
        const productCount = products.length;

        (result as any).totalSales = total;
        (result as any).totalSales_name = `–í—Å—ñ —Ç–æ–≤–∞—Ä–∏ (${productCount})`;
      }

      return result;
    });

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–≤–∞—Ä—ã + –≥—Ä—É–ø–ø—ã)
    const actualProductCount = totalDataArray.length > 0
      ? Object.keys(totalDataArray[0]).filter(key =>
          (key.startsWith('product_') || key.startsWith('group_')) &&
          !key.endsWith('_name') &&
          key !== 'product_' &&
          key !== 'totalSales'
        ).length
      : 0;

    // console.log(`‚úÖ CHART DATA GENERATED: ${totalDataArray.length} points, ${actualProductCount} products in data, ${Object.keys(productInfo).length} total products info`);

    res.json({
      success: true,
      data: totalDataArray,
      products: productInfo,
      metadata: {
        source: 'local_database',
        filters: {
          status: status || 'all',
          dateRange: { startDate, endDate },
          groupBy,
          products: filterProducts,
          groups: filterGroups
        },
        totalPoints: totalDataArray.length,
        totalProducts: actualProductCount, // –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
        totalProductsInfo: Object.keys(productInfo).length, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ
        totalOrders: filteredOrders.length,
        fetchedAt: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error('Error getting products chart data:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
});

export default router;
