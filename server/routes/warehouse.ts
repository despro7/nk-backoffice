import { Router } from 'express';
import { prisma } from '../lib/utils.js';
import { authenticateToken } from '../middleware/auth.js';

const router = Router();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
const WAREHOUSE_IDS = {
  MAIN: '1',      // –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥ (–°–∫–ª–∞–¥ –ì–ü)
  KYIV: '2',      // –ö–∏–µ–≤—Å–∫–∏–π —Å–∫–ª–∞–¥
  SMALL: '3'      // –ú–∞–ª—ã–π —Å–∫–ª–∞–¥
} as const;

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
 */
async function updateProductStock(sku: string, sourceWarehouse: string, destinationWarehouse: string, portionsQuantity: number) {
  console.log(`üì¶ [Stock Update] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ ${sku}: ${sourceWarehouse} -> ${destinationWarehouse}, –ø–æ—Ä—Ü–∏–π: ${portionsQuantity}`);

  const product = await prisma.product.findUnique({
    where: { sku }
  });

  if (!product) {
    throw new Error(`–¢–æ–≤–∞—Ä —Å SKU ${sku} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }

  // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –∏—Ö ID (–∫–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ë–î)
  const warehouseMapping = {
    "–û—Å–Ω–æ–≤–Ω–∏–π —Å–∫–ª–∞–¥": "1",
    "–ö–∏—ó–≤—Å—å–∫–∏–π —Å–∫–ª–∞–¥": "2",
    "–ú–∞–ª–∏–π —Å–∫–ª–∞–¥": "3"
  };

  // –ü–æ–ª—É—á–∞–µ–º ID —Å–∫–ª–∞–¥–æ–≤
  const sourceWarehouseId = warehouseMapping[sourceWarehouse] || sourceWarehouse;
  const destinationWarehouseId = warehouseMapping[destinationWarehouse] || destinationWarehouse;

  // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ (–≤ –ø–æ—Ä—Ü–∏—è—Ö)
  const currentStock = product.stockBalanceByStock
    ? JSON.parse(product.stockBalanceByStock)
    : {};

  const sourceStockPortions = currentStock[sourceWarehouseId] || 0;
  const destStockPortions = currentStock[destinationWarehouseId] || 0;

  console.log(`üì¶ [Stock Update] –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏:`);
  console.log(`   ${sourceWarehouse} (ID: ${sourceWarehouseId}): ${sourceStockPortions} –ø–æ—Ä—Ü–∏–π`);
  console.log(`   ${destinationWarehouse} (ID: ${destinationWarehouseId}): ${destStockPortions} –ø–æ—Ä—Ü–∏–π`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤
  if (sourceStockPortions < portionsQuantity) {
    throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞ ${sku} –Ω–∞ —Å–∫–ª–∞–¥–µ ${sourceWarehouse}. –î–æ—Å—Ç—É–ø–Ω–æ: ${sourceStockPortions} –ø–æ—Ä—Ü–∏–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${portionsQuantity} –ø–æ—Ä—Ü–∏–π`);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ (—Ä–∞–±–æ—Ç–∞–µ–º —Å –ø–æ—Ä—Ü–∏—è–º–∏)
  const newStock = {
    ...currentStock,
    [sourceWarehouseId]: Math.max(0, sourceStockPortions - portionsQuantity),
    [destinationWarehouseId]: destStockPortions + portionsQuantity
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
  await prisma.product.update({
    where: { sku },
    data: {
      stockBalanceByStock: JSON.stringify(newStock),
      updatedAt: new Date()
    }
  });

  console.log(`‚úÖ [Stock Update] –û—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:`);
  console.log(`   ${sourceWarehouse}: ${sourceStockPortions} -> ${newStock[sourceWarehouseId]} –ø–æ—Ä—Ü–∏–π`);
  console.log(`   ${destinationWarehouse}: ${destStockPortions} -> ${newStock[destinationWarehouseId]} –ø–æ—Ä—Ü–∏–π`);

  return {
    previousStock: currentStock,
    newStock,
    sourceBalance: sourceStockPortions,
    destBalance: destStockPortions,
    movedPortions: portionsQuantity
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
 */
async function createStockMovementHistory(
  sku: string,
  sourceWarehouse: string,
  destinationWarehouse: string,
  movedPortions: number,
  boxQuantity: number,
  portionQuantity: number,
  batchNumber: string,
  movementId: number,
  userId: number,
  stockUpdateResult: any
) {
  console.log(`üìä [Movement History] –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è ${sku}: –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ ${movedPortions} –ø–æ—Ä—Ü–∏–π`);

  // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –∏—Ö ID (–∫–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ë–î)
  const warehouseMapping = {
    "–û—Å–Ω–æ–≤–Ω–∏–π —Å–∫–ª–∞–¥": "1",
    "–ö–∏—ó–≤—Å—å–∫–∏–π —Å–∫–ª–∞–¥": "2",
    "–ú–∞–ª–∏–π —Å–∫–ª–∞–¥": "3"
  };

  // –ü–æ–ª—É—á–∞–µ–º ID —Å–∫–ª–∞–¥–æ–≤
  const sourceWarehouseId = warehouseMapping[sourceWarehouse] || sourceWarehouse;
  const destinationWarehouseId = warehouseMapping[destinationWarehouse] || destinationWarehouse;

  // –°–ø–∏—Å—ã–≤–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
  await prisma.stockMovementHistory.create({
    data: {
      productSku: sku,
      warehouse: sourceWarehouse,
      movementType: 'transfer_out',
      quantity: movedPortions,  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
      quantityType: 'portion',  // –¢–∏–ø: –ø–æ—Ä—Ü–∏–∏
      batchNumber: batchNumber || null,
      referenceId: movementId.toString(),
      referenceType: 'warehouse_movement',
      previousBalance: stockUpdateResult.sourceBalance,
      newBalance: stockUpdateResult.newStock[sourceWarehouseId],
      notes: `–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ ${movedPortions} –ø–æ—Ä—Ü–∏–π –≤ ${destinationWarehouse}`,
      createdBy: userId
    }
  });

  // –ü—Ä–∏—Ö–æ–¥—É–µ–º –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–∫–ª–∞–¥
  await prisma.stockMovementHistory.create({
    data: {
      productSku: sku,
      warehouse: destinationWarehouse,
      movementType: 'transfer_in',
      quantity: movedPortions,  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
      quantityType: 'portion',  // –¢–∏–ø: –ø–æ—Ä—Ü–∏–∏
      batchNumber: batchNumber || null,
      referenceId: movementId.toString(),
      referenceType: 'warehouse_movement',
      previousBalance: stockUpdateResult.destBalance,
      newBalance: stockUpdateResult.newStock[destinationWarehouseId],
      notes: `–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ ${movedPortions} –ø–æ—Ä—Ü–∏–π –∏–∑ ${sourceWarehouse}`,
      createdBy: userId
    }
  });

  console.log(`‚úÖ [Movement History] –ó–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è ${sku}: ${movedPortions} –ø–æ—Ä—Ü–∏–π`);
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
router.get('/', authenticateToken, async (req, res) => {
  try {
    const { status, warehouse, page = 1, limit = 20 } = req.query;
    
    const where: any = {};
    if (status) where.status = status;
    if (warehouse) {
      where.OR = [
        { sourceWarehouse: warehouse },
        { destinationWarehouse: warehouse }
      ];
    }

    const skip = (Number(page) - 1) * Number(limit);
    
    const [movements, total] = await Promise.all([
      prisma.warehouseMovement.findMany({
        where,
        orderBy: { draftCreatedAt: 'desc' },
        skip,
        take: Number(limit),
        // include –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      }),
      prisma.warehouseMovement.count({ where })
    ]);

    res.json({
      movements,
      pagination: {
        page: Number(page),
        limit: Number(limit),
        total,
        pages: Math.ceil(total / Number(limit))
      }
    });
  } catch (error) {
    console.error('Error fetching warehouse movements:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// GET /drafts - –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/drafts', authenticateToken, async (req, res) => {
  try {
    console.log('üè™ [Warehouse] GET /drafts - –∑–∞–ø—Ä–æ—Å —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤...');
    const userId = (req as any).user?.userId || (req as any).user?.id;
    
    if (!userId) {
      console.error('‚ùå [Warehouse] Missing userId from authentication token');
      return res.status(401).json({ error: 'User ID not found in token' });
    }

    const drafts = await prisma.warehouseMovement.findMany({
      where: {
        createdBy: userId,
        status: 'draft'
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    console.log(`‚úÖ [Warehouse] –ù–∞–π–¥–µ–Ω–æ ${drafts.length} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    res.json({ drafts });
  } catch (error) {
    console.error('üö® [Warehouse] Error fetching drafts:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–µ–∂–¥—É —Å–∫–ª–∞–¥–∞–º–∏
router.get('/products-for-movement', authenticateToken, async (req, res) => {
  try {
    console.log('üè™ [Warehouse] GET /products-for-movement - –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è...');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≥–¥–µ –µ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫–ª–∞–¥–µ (—Å–∫–ª–∞–¥ "1")
    const products = await prisma.product.findMany({
      where: {
        stockBalanceByStock: {
          not: null
        }
      },
      orderBy: { name: 'asc' }
    });

    console.log(`üè™ [Warehouse] –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫–ª–∞–¥–µ –∏ –ø–∞—Ä—Å–∏–º JSON
    const productsWithStock = products
      .map(product => {
        try {
          const stockBalance = product.stockBalanceByStock
            ? JSON.parse(product.stockBalanceByStock)
            : {};

          // –û—Å—Ç–∞—Ç–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ –ø–æ—Ä—Ü–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–ª–∞–¥–∞—Ö
          const mainStockPortions = stockBalance["1"] || 0;  // –ü–æ—Ä—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫–ª–∞–¥–µ
          const kyivStockPortions = stockBalance["2"] || 0;   // –ü–æ—Ä—Ü–∏–∏ –Ω–∞ –∫–∏–µ–≤—Å–∫–æ–º —Å–∫–ª–∞–¥–µ
          const smallStockPortions = stockBalance["3"] || 0;  // –ü–æ—Ä—Ü–∏–∏ –Ω–∞ –º–∞–ª–æ–º —Å–∫–ª–∞–¥–µ

          // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç "—è—â–∏–∫–∏ / –ø–æ—Ä—Ü–∏–∏"
          const PORTIONS_PER_BOX = 24;
          const mainStockBoxes = Math.floor(mainStockPortions / PORTIONS_PER_BOX);
          const mainStockRemainder = mainStockPortions % PORTIONS_PER_BOX;
          const smallStockBoxes = Math.floor(smallStockPortions / PORTIONS_PER_BOX);
          const smallStockRemainder = smallStockPortions % PORTIONS_PER_BOX;



          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫–ª–∞–¥–µ
          if (mainStockPortions > 0) {
            return {
              id: product.sku, // –ò—Å–ø–æ–ª—å–∑—É–µ–º SKU –∫–∞–∫ ID
              sku: product.sku,
              name: product.name,
              balance: `${mainStockPortions} / ${smallStockPortions}`, // –æ—Å–Ω–æ–≤–Ω–æ–π / –º–∞–ª—ã–π (–≤ –ø–æ—Ä—Ü–∏—è—Ö)
              details: {
                boxes: 0, // –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—â–∏–∫–æ–≤ (–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
                portions: 0, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
                forecast: 125, // –ó–∞–≥–ª—É—à–∫–∞, –ø–æ–∑–∂–µ –∑–∞–¥–∞–¥–∏–º –ª–æ–≥–∏–∫—É
                batchNumber: '' // –ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏ (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–π)
              },
              stockData: {
                mainStock: mainStockPortions,     // –ü–æ—Ä—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫–ª–∞–¥–µ
                kyivStock: kyivStockPortions,     // –ü–æ—Ä—Ü–∏–∏ –Ω–∞ –∫–∏–µ–≤—Å–∫–æ–º —Å–∫–ª–∞–¥–µ
                smallStock: smallStockPortions,   // –ü–æ—Ä—Ü–∏–∏ –Ω–∞ –º–∞–ª–æ–º —Å–∫–ª–∞–¥–µ
                displayFormat: {
                  main: `${mainStockBoxes} / ${mainStockRemainder}`,     // "—è—â–∏–∫–∏ / –ø–æ—Ä—Ü–∏–∏"
                  small: `${smallStockBoxes} / ${smallStockRemainder}`   // "—è—â–∏–∫–∏ / –ø–æ—Ä—Ü–∏–∏"
                }
              }
            };
          }
          return null;
        } catch (error) {
          console.warn(`üö® [Warehouse] Failed to parse stockBalanceByStock for product ${product.sku}:`, error);
          console.warn(`üö® [Warehouse] Raw data:`, product.stockBalanceByStock);
          return null;
        }
      })
      .filter(Boolean);

    console.log(`‚úÖ [Warehouse] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${productsWithStock.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫–ª–∞–¥–µ`);

    res.json({
      products: productsWithStock,
      total: productsWithStock.length
    });
  } catch (error) {
    console.error('üö® [Warehouse] Error fetching products for movement:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ ID
router.get('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID
    if (!id || isNaN(Number(id))) {
      console.error('‚ùå [Warehouse] Invalid ID parameter:', id);
      return res.status(400).json({ error: 'Valid movement ID is required' });
    }
    
    const movement = await prisma.warehouseMovement.findUnique({
      where: { id: Number(id) }
    });

    if (!movement) {
      return res.status(404).json({ error: 'Movement not found' });
    }

    res.json(movement);
  } catch (error) {
    console.error('‚ùå [Warehouse] Error fetching warehouse movement:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// PUT /:id - –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
router.put('/:id', authenticateToken, async (req, res) => {
  try {
    console.log('üè™ [Warehouse] PUT /:id - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞...');
    const { id } = req.params;
    const { items, deviations, notes } = req.body;
    const userId = (req as any).user?.userId || (req as any).user?.id;

    if (!id || isNaN(Number(id))) {
      return res.status(400).json({ error: 'Invalid ID parameter' });
    }

    if (!userId) {
      console.error('‚ùå [Warehouse] Missing userId from authentication token');
      return res.status(401).json({ error: 'User ID not found in token' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å draft
    const existingDraft = await prisma.warehouseMovement.findFirst({
      where: {
        id: Number(id),
        createdBy: userId,
        status: 'draft'
      }
    });

    if (!existingDraft) {
      console.error('‚ùå [Warehouse] Draft not found or not editable');
      return res.status(404).json({ error: 'Draft not found or not editable' });
    }



    const updatedDraft = await prisma.warehouseMovement.update({
      where: { id: Number(id) },
      data: {
        items: items,
        deviations: deviations,
        notes: notes || existingDraft.notes,
        updatedAt: new Date()
      }
    });

    console.log('‚úÖ [Warehouse] Draft updated successfully:', updatedDraft.id);
    res.json(updatedDraft);
  } catch (error) {
    console.error('üö® [Warehouse] Error updating draft:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
router.post('/', authenticateToken, async (req, res) => {
  try {
    console.log('üè™ [Warehouse] POST / - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
    console.log('üè™ [Warehouse] Request body:', JSON.stringify(req.body, null, 2));
    
    const { items, deviations, sourceWarehouse, destinationWarehouse, notes } = req.body;
    const userId = (req as any).user?.userId || (req as any).user?.id;

    console.log('üè™ [Warehouse] User from token:', (req as any).user);
    console.log('üè™ [Warehouse] Extracted userId:', userId);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!items || !sourceWarehouse || !destinationWarehouse) {
      console.error('‚ùå [Warehouse] Missing required fields:', { items: !!items, sourceWarehouse, destinationWarehouse });
      return res.status(400).json({ error: 'Missing required fields' });
    }

    if (!userId) {
      console.error('‚ùå [Warehouse] Missing userId from authentication token');
      return res.status(401).json({ error: 'User ID not found in token' });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const totalCount = await prisma.warehouseMovement.count();
    const nextDocNumber = (totalCount + 1).toString().padStart(5, '0');



    const movement = await prisma.warehouseMovement.create({
      data: {
        internalDocNumber: nextDocNumber,
        items: items, // Prisma –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –≤ JSON
        deviations: deviations, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        sourceWarehouse,
        destinationWarehouse,
        notes,
        createdBy: userId
      }
    });

    console.log('‚úÖ [Warehouse] Warehouse movement created:', movement.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
    try {
      console.log('üîÑ [Warehouse] –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤...');
      console.log('üîÑ [Warehouse] Items:', JSON.stringify(items, null, 2));
      console.log('üîÑ [Warehouse] Source warehouse:', sourceWarehouse);
      console.log('üîÑ [Warehouse] Destination warehouse:', destinationWarehouse);

      for (const item of items) {
        const itemData = item as any; // Type assertion –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
        console.log(`üì¶ [Warehouse] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ ${itemData.sku}, –ø–æ—Ä—Ü–∏–π: ${itemData.portionQuantity}`);

        try {
          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ—Ä—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
          const stockUpdateResult = await updateProductStock(
            itemData.sku,
            sourceWarehouse,
            destinationWarehouse,
            itemData.portionQuantity  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
          );

          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
          await createStockMovementHistory(
            itemData.sku,
            sourceWarehouse,
            destinationWarehouse,
            itemData.portionQuantity,  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
            itemData.portionQuantity,  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
            itemData.portionQuantity,  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
            itemData.batchNumber,
            movement.id,
            userId,
            stockUpdateResult
          );

          console.log(`‚úÖ [Warehouse] –¢–æ–≤–∞—Ä ${itemData.sku} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ: –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ ${itemData.portionQuantity} –ø–æ—Ä—Ü–∏–π`);
        } catch (itemError) {
          console.error(`üö® [Warehouse] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${itemData.sku}:`, itemError);
          throw itemError; // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ
        }
      }

      console.log('‚úÖ [Warehouse] –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (stockError) {
      console.error('üö® [Warehouse] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤:', stockError);

      // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤, —É–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
      await prisma.warehouseMovement.delete({
        where: { id: movement.id }
      });

      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: ${stockError.message}`);
    }

    res.status(201).json(movement);
  } catch (error) {
    console.error('üö® [Warehouse] Error creating warehouse movement:', error);
    console.error('üö® [Warehouse] Stack trace:', error.stack);
    res.status(500).json({ error: 'Internal server error', details: error.message });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
router.put('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { items, deviations, status, notes } = req.body;

    const movement = await prisma.warehouseMovement.update({
      where: { id: Number(id) },
      data: {
        items,
        deviations,
        status,
        notes,
        draftLastEditedAt: new Date()
      }
    });

    res.json(movement);
  } catch (error) {
    console.error('Error updating warehouse movement:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Dilovod (–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏)
router.post('/:id/send', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const userId = (req as any).user?.userId || (req as any).user?.id;

    console.log(`üè™ [Warehouse] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${id} –≤ Dilovod...`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    const movement = await prisma.warehouseMovement.findUnique({
      where: { id: Number(id) }
    });

    if (!movement) {
      return res.status(404).json({ error: 'Movement not found' });
    }

    if (movement.status !== 'draft') {
      return res.status(400).json({ error: 'Only draft documents can be sent' });
    }

    // –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–∫–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π –ª–æ–≥–∏–∫–∏),
    // –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö —Å–µ–π—á–∞—Å
    if (movement.items && Array.isArray(movement.items) && movement.items.length > 0) {
      console.log('üîÑ [Warehouse] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π...');

      for (const item of movement.items) {
        const itemData = item as any; // Type assertion –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        const existingHistory = await prisma.stockMovementHistory.findFirst({
          where: {
            referenceId: movement.id.toString(),
            referenceType: 'warehouse_movement',
            productSku: itemData.sku
          }
        });

        // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        if (!existingHistory) {
          console.log(`üì¶ [Warehouse] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${itemData.sku}...`);

          try {
            console.log(`üì¶ [Warehouse] –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Dilovod –¥–ª—è ${itemData.sku}:`);
            console.log(`   –ü–æ—Ä—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: ${itemData.portionQuantity}`);

            const stockUpdateResult = await updateProductStock(
              itemData.sku,
              movement.sourceWarehouse,
              movement.destinationWarehouse,
              itemData.portionQuantity  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
            );

            await createStockMovementHistory(
              itemData.sku,
              movement.sourceWarehouse,
              movement.destinationWarehouse,
              itemData.portionQuantity,  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏
              itemData.portionQuantity,  // –ü–æ—Ä—Ü–∏–∏
              itemData.portionQuantity,  // –ü–æ—Ä—Ü–∏–∏
              itemData.batchNumber,
              movement.id,
              userId,
              stockUpdateResult
            );
          } catch (stockError) {
            console.error(`üö® [Warehouse] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è ${itemData.sku}:`, stockError);
            return res.status(400).json({
              error: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${itemData.sku}: ${stockError.message}`
            });
          }
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const updatedMovement = await prisma.warehouseMovement.update({
      where: { id: Number(id) },
      data: {
        status: 'sent',
        sentToDilovodAt: new Date()
      }
    });

    console.log(`‚úÖ [Warehouse] –î–æ–∫—É–º–µ–Ω—Ç ${id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Dilovod`);
    res.json(updatedMovement);
  } catch (error) {
    console.error('üö® [Warehouse] Error sending warehouse movement:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–≤–∏–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
router.get('/stock/history', authenticateToken, async (req, res) => {
  try {
    const { sku, warehouse, movementType, startDate, endDate, page = 1, limit = 50 } = req.query;
    
    const where: any = {};
    if (sku) where.productSku = sku;
    if (warehouse) where.warehouse = warehouse;
    if (movementType) where.movementType = movementType;
    if (startDate || endDate) {
      where.movementDate = {};
      if (startDate) where.movementDate.gte = new Date(startDate as string);
      if (endDate) where.movementDate.lte = new Date(endDate as string);
    }

    const skip = (Number(page) - 1) * Number(limit);
    
    const [history, total] = await Promise.all([
      prisma.stockMovementHistory.findMany({
        where,
        orderBy: { movementDate: 'desc' },
        skip,
        take: Number(limit)
      }),
      prisma.stockMovementHistory.count({ where })
    ]);

    res.json({
      history,
      pagination: {
        page: Number(page),
        limit: Number(limit),
        total,
        pages: Math.ceil(total / Number(limit))
      }
    });
  } catch (error) {
    console.error('Error fetching stock history:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º
router.get('/stock/current', authenticateToken, async (req, res) => {
  try {
    const { warehouse } = req.query;
    
    const where: any = {};
    if (warehouse) where.warehouse = warehouse;

    const currentStock = await prisma.stockMovementHistory.groupBy({
      by: ['productSku', 'warehouse'],
      where,
      _max: {
        movementDate: true
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ SKU –∏ —Å–∫–ª–∞–¥–∞
    const stockData = await Promise.all(
      currentStock.map(async (item) => {
        const lastRecord = await prisma.stockMovementHistory.findFirst({
          where: {
            productSku: item.productSku,
            warehouse: item.warehouse,
            movementDate: item._max.movementDate
          }
        });
        return lastRecord;
      })
    );

    res.json(stockData.filter(Boolean));
  } catch (error) {
    console.error('Error fetching current stock:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

/**
 * –û—Ç–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ)
 */
async function revertStockMovement(
  sku: string,
  sourceWarehouse: string,
  destinationWarehouse: string,
  portionsToReturn: number,
  movementId: number,
  userId: number
) {
  console.log(`üîÑ [Stock Revert] –û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${sku}: ${destinationWarehouse} -> ${sourceWarehouse}, –ø–æ—Ä—Ü–∏–π: ${portionsToReturn}`);

  const product = await prisma.product.findUnique({
    where: { sku }
  });

  if (!product) {
    throw new Error(`–¢–æ–≤–∞—Ä —Å SKU ${sku} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }

  // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –∏—Ö ID (–∫–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ë–î)
  const warehouseMapping = {
    "–û—Å–Ω–æ–≤–Ω–∏–π —Å–∫–ª–∞–¥": "1",
    "–ö–∏—ó–≤—Å—å–∫–∏–π —Å–∫–ª–∞–¥": "2",
    "–ú–∞–ª–∏–π —Å–∫–ª–∞–¥": "3"
  };

  // –ü–æ–ª—É—á–∞–µ–º ID —Å–∫–ª–∞–¥–æ–≤
  const sourceWarehouseId = warehouseMapping[sourceWarehouse] || sourceWarehouse;
  const destinationWarehouseId = warehouseMapping[destinationWarehouse] || destinationWarehouse;

  // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ (–≤ –ø–æ—Ä—Ü–∏—è—Ö)
  const currentStock = product.stockBalanceByStock
    ? JSON.parse(product.stockBalanceByStock)
    : {};

  const sourceStockPortions = currentStock[sourceWarehouseId] || 0;
  const destStockPortions = currentStock[destinationWarehouseId] || 0;

  console.log(`üîÑ [Stock Revert] –¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏:`);
  console.log(`   ${sourceWarehouse} (ID: ${sourceWarehouseId}): ${sourceStockPortions} –ø–æ—Ä—Ü–∏–π`);
  console.log(`   ${destinationWarehouse} (ID: ${destinationWarehouseId}): ${destStockPortions} –ø–æ—Ä—Ü–∏–π`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —Å–∫–ª–∞–¥–µ
  if (destStockPortions < portionsToReturn) {
    console.warn(`‚ö†Ô∏è [Stock Revert] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —Å–∫–ª–∞–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: ${destStockPortions} –ø–æ—Ä—Ü–∏–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${portionsToReturn} –ø–æ—Ä—Ü–∏–π`);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ (—Ä–∞–±–æ—Ç–∞–µ–º —Å –ø–æ—Ä—Ü–∏—è–º–∏)
  const actualReturnPortions = Math.min(destStockPortions, portionsToReturn);

  const newStock = {
    ...currentStock,
    [sourceWarehouseId]: sourceStockPortions + actualReturnPortions,
    [destinationWarehouseId]: Math.max(0, destStockPortions - actualReturnPortions)
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
  await prisma.product.update({
    where: { sku },
    data: {
      stockBalanceByStock: JSON.stringify(newStock),
      updatedAt: new Date()
    }
  });

  // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ–± –æ—Ç–º–µ–Ω–µ
  await prisma.stockMovementHistory.create({
    data: {
      productSku: sku,
      warehouse: destinationWarehouse,
      movementType: 'adjustment',
      quantity: -actualReturnPortions,  // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
      quantityType: 'portion',
      referenceId: movementId.toString(),
      referenceType: 'warehouse_movement',
      previousBalance: destStockPortions,
      newBalance: newStock[destinationWarehouseId],
      notes: `–û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—Ç ${actualReturnPortions} –ø–æ—Ä—Ü–∏–π –∏–∑ ${sourceWarehouse}`,
      createdBy: userId
    }
  });

  await prisma.stockMovementHistory.create({
    data: {
      productSku: sku,
      warehouse: sourceWarehouse,
      movementType: 'adjustment',
      quantity: actualReturnPortions,   // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
      quantityType: 'portion',
      referenceId: movementId.toString(),
      referenceType: 'warehouse_movement',
      previousBalance: sourceStockPortions,
      newBalance: newStock[sourceWarehouseId],
      notes: `–û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—Ç ${actualReturnPortions} –ø–æ—Ä—Ü–∏–π –≤ ${sourceWarehouse}`,
      createdBy: userId
    }
  });

  console.log(`‚úÖ [Stock Revert] –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${actualReturnPortions} –ø–æ—Ä—Ü–∏–π`);
}

// DELETE /:id - —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –∏ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
router.delete('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const userId = (req as any).user?.userId || (req as any).user?.id;

    console.log(`üóëÔ∏è [Warehouse] –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ ${id}...`);

    if (!id || isNaN(Number(id))) {
      return res.status(400).json({ error: 'Invalid ID parameter' });
    }

    if (!userId) {
      console.error('‚ùå [Warehouse] Missing userId from authentication token');
      return res.status(401).json({ error: 'User ID not found in token' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    const movement = await prisma.warehouseMovement.findUnique({
      where: { id: Number(id) }
    });

    if (!movement) {
      return res.status(404).json({ error: 'Movement not found' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å draft
    if (movement.createdBy !== userId) {
      return res.status(403).json({ error: 'Access denied' });
    }

    if (movement.status !== 'draft') {
      return res.status(400).json({ error: 'Only draft documents can be deleted' });
    }

    // –û—Ç–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
    if (movement.items && Array.isArray(movement.items) && movement.items.length > 0) {
      console.log('üîÑ [Warehouse] –û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤...');

      for (const item of movement.items) {
        const itemData = item as any; // Type assertion –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
        try {
          // –û—Ç–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
          await revertStockMovement(
            itemData.sku,
            movement.sourceWarehouse,
            movement.destinationWarehouse,
            itemData.portionQuantity,  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            movement.id,
            userId
          );
        } catch (revertError) {
          console.error(`üö® [Warehouse] –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥–ª—è ${itemData.sku}:`, revertError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏
        }
      }
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
    await prisma.stockMovementHistory.deleteMany({
      where: {
        referenceId: movement.id.toString(),
        referenceType: 'warehouse_movement'
      }
    });

    // –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    await prisma.warehouseMovement.delete({
      where: { id: Number(id) }
    });

    console.log(`‚úÖ [Warehouse] –ß–µ—Ä–Ω–æ–≤–∏–∫ ${id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
    res.json({ message: 'Draft deleted successfully' });
  } catch (error) {
    console.error('üö® [Warehouse] Error deleting draft:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

export default router;
