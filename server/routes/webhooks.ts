import { Router, Request, Response } from 'express';
import { salesDriveService } from '../services/salesDriveService.js';
import { orderDatabaseService } from '../services/orderDatabaseService.js';
import { ordersCacheService } from '../services/ordersCacheService.js';

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é –¥–ª—è webhook payload
interface SalesDriveWebhookPayload {
  info: {
    webhookType: string;
    webhookEvent: string;
    account: string;
  };
  data: {
    id: number;
    externalId?: string;
    statusId?: number;
    [key: string]: any;
  };
  meta?: any;
}

const router = Router();

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è webhook –∑–∞–ø—Ä–æ—Å–æ–≤
router.use('/salesdrive/order-update', (req, res, next) => {
  console.log('üîç Webhook middleware - Request details:');
  console.log(`   Method: ${req.method}`);
  console.log(`   URL: ${req.url}`);
  console.log(`   Content-Type: ${req.headers['content-type']}`);
  console.log(`   User-Agent: ${req.headers['user-agent']}`);
  console.log(`   Origin: ${req.headers['origin']}`);
  console.log(`   Body exists: ${!!req.body}`);
  console.log(`   Body keys: ${req.body ? Object.keys(req.body).join(', ') : 'none'}`);

  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
  next();
});


/**
 * POST /api/webhooks/salesdrive/order-update
 * WebHook –æ—Ç SalesDrive –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
 */
router.post('/salesdrive/order-update', async (req: Request, res: Response) => {
  try {
    // console.log('üîî WebHook received - Raw body:', JSON.stringify(req.body, null, 2));
    console.log(`üîç Webhook event: ${req.body.info?.webhookEvent}`);

    const { data } = req.body;
    const orderId = data?.id?.toString();
    const externalId = data?.externalId;

    console.log(`üîî WebHook received: status_change for order ${externalId || orderId}`);
    console.log(`   - data.id: ${data?.id}`);
    console.log(`   - data.externalId: ${data?.externalId}`);
    console.log(`   - orderId: ${orderId}`);
    console.log(`   - externalId: ${externalId}`);

    if (!orderId && !externalId) {
      console.log('‚ùå Missing order identifier - returning 400');
      return res.status(400).json({
        success: false,
        error: 'Missing order identifier'
      });
    }

    const orderIdentifier = externalId || orderId;

    // For status_change events, we always update the order
    if ( req.body.info?.webhookEvent === 'status_change' || req.body.info?.webhookEvent === 'new_order' ) {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑
      try {
        console.log(`üîç Looking for existing order in database first...`);

        // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ SalesDrive –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É
        // –í –ë–î —Å—Ç–∞—Ç—É—Å—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ '1', '2', '3' –∏ —Ç.–¥.
        const statusMapping: { [key: number]: string } = {
          1: '1', // –ù–æ–≤–∏–π
          2: '2', // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ
          3: '3', // –ù–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É
          4: '4', // –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
          5: '5', // –ü—Ä–æ–¥–∞–∂
          6: '6', // –í—ñ–¥–º–æ–≤–∞
          7: '7', // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
          8: '8'  // –í–∏–¥–∞–ª–µ–Ω–∏–π
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
        const getStatusText = (status: string): string => {
          const statusTexts: { [key: string]: string } = {
            '1': '–ù–æ–≤–∏–π',
            '2': '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ',
            '3': '–ù–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É',
            '4': '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ',
            '5': '–ü—Ä–æ–¥–∞–∂',
            '6': '–í—ñ–¥–º–æ–≤–∞',
            '7': '–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è',
            '8': '–í–∏–¥–∞–ª–µ–Ω–∏–π'
          };
          return statusTexts[status] || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å';
        };

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑ –≤ –Ω–∞—à–µ–π –ë–î
        let existingOrder = await orderDatabaseService.getOrderByExternalId(orderIdentifier);
        let orderDetails = null;
        
        const webhookData = req.body.data;
        const webhookMeta = req.body.meta.fields;
        console.log('================= \n webhookMeta:', webhookMeta);

        // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º items –∏–∑ webhookData.products –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const items = Array.isArray(webhookData.products) ? webhookData.products.map(p => ({
            productName: p.name || '',
            quantity: p.amount || 0,
            price: p.price || 0,
            sku: p.sku || ''
          }))
        : [];

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        let customerName = '';
        let customerPhone = '';

        if (webhookData.contacts) {
          const contact = webhookData.contacts;
          customerName = `${contact[0]?.lName || ''} ${contact[0]?.fName || ''} ${contact[0]?.mName || ''}`.trim();
          customerPhone = Array.isArray(contact[0].phone) ? contact[0].phone[0] : contact[0].phone || '';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        let shippingMethod = '';
        let paymentMethod = '';

        if (webhookMeta.shipping_method.options) {
          shippingMethod = webhookMeta.shipping_method.options[0]?.text?.toString() || '';
        }
        if (webhookMeta.payment_method.options) {
          paymentMethod = webhookMeta.payment_method.options[0]?.text?.toString() || '';
        }

        if (existingOrder) {
          // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ webhook, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ –ë–î
          orderDetails = {
            id: existingOrder.id,
            orderNumber: existingOrder.externalId,
            status: existingOrder.status,
            statusText: existingOrder.statusText,
            // –¢–æ–≤–∞—Ä—ã: webhook –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
            items: items || existingOrder.items,
            // –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: webhook –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            customerName: customerName || existingOrder.customerName,
            customerPhone: customerPhone || existingOrder.customerPhone,
            // –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: webhook –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            deliveryAddress: webhookData.shipping_address || existingOrder.deliveryAddress,
            // –°—É–º–º–∞: webhook –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            totalPrice: webhookData.paymentAmount || existingOrder.totalPrice,
            // –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: webhook –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            orderDate: webhookData.orderTime ? new Date(webhookData.orderTime).toISOString() : existingOrder.orderDate,
            // –°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏/–æ–ø–ª–∞—Ç—ã: webhook –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            shippingMethod: shippingMethod || existingOrder.shippingMethod,
            paymentMethod: paymentMethod || existingOrder.paymentMethod,
            // –ì–æ—Ä–æ–¥: webhook –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            cityName: existingOrder.cityName,
            provider: existingOrder.provider, // Provider –≤—Å–µ–≥–¥–∞ –∏–∑ –ë–î
            // –î—Ä—É–≥–∏–µ –ø–æ–ª—è: webhook –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            pricinaZnizki: webhookData.pricinaZnizki != null ? String(webhookData.pricinaZnizki) : existingOrder.pricinaZnizki,
            sajt: webhookData.sajt != null ? String(webhookData.sajt) : existingOrder.sajt,
            ttn: webhookData.ord_novaposhta?.EN || existingOrder.ttn,
            quantity: webhookData.kilTPorcij || existingOrder.quantity
          };
        } else {
          // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Äì —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ webhook, –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ SalesDrive API
          orderDetails = {
            id: parseInt(webhookData.id) || 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ webhook
            orderNumber: webhookData.externalId || orderIdentifier, // –ò—Å–ø–æ–ª—å–∑—É–µ–º externalId –∫–∞–∫ orderNumber
            status: webhookData.statusId ? statusMapping[webhookData.statusId] || '1' : '1',
            statusText: '–ù–æ–≤–∏–π', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            items: items,
            customerName: customerName || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–ª—ñ—î–Ω—Ç',
            customerPhone: customerPhone || '',
            deliveryAddress: webhookData.shipping_address || '',
            totalPrice: webhookData.paymentAmount || 0,
            orderDate: webhookData.orderTime ? new Date(webhookData.orderTime).toISOString() : null,
            shippingMethod: shippingMethod || '',
            paymentMethod: paymentMethod || '',
            cityName: webhookData.ord_novaposhta?.cityTemplateName || webhookData.ord_ukrposhta?.cityName || '',
            provider: 'SalesDrive',
            pricinaZnizki: webhookData.pricinaZnizki != null ? String(webhookData.pricinaZnizki) : '',
            sajt: webhookData.sajt != null ? String(webhookData.sajt) : '',
            ttn: webhookData.ord_novaposhta?.EN || '',
            quantity: webhookData.kilTPorcij || 1
          };
          console.log(`üìã Created order details from webhook data: id=${orderDetails.id}, orderNumber=${orderDetails.orderNumber}`);
        }

        if (orderDetails) {
          console.log(`üìã Order details received:`);
          console.log(`   - orderIdentifier (from webhook): ${orderIdentifier}`);
          console.log(`   - orderDetails.orderNumber: ${orderDetails.orderNumber}`);
          console.log(`   - orderDetails.id: ${orderDetails.id}`);


          if (existingOrder) {
            console.log(`üîÑ Updating existing order ${existingOrder.externalId}`);

            const newStatus = statusMapping[webhookData.statusId] || orderDetails.status;

            console.log(`üîÑ Status mapping: webhook statusId=${webhookData.statusId} -> status='${newStatus}'`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            const changes: { [key: string]: any } = {};

            // –°—Ç–∞—Ç—É—Å –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º (–≥–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ webhook)
            if (newStatus !== existingOrder.status) {
              changes.status = newStatus;
              changes.statusText = getStatusText(newStatus);
            }

            // RawData –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º (–¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            changes.rawData = webhookData;

            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
            const fieldsToCheck = [
              { key: 'customerName', newValue: orderDetails.customerName, oldValue: existingOrder.customerName },
              { key: 'customerPhone', newValue: orderDetails.customerPhone, oldValue: existingOrder.customerPhone },
              { key: 'deliveryAddress', newValue: orderDetails.deliveryAddress, oldValue: existingOrder.deliveryAddress },
              { key: 'totalPrice', newValue: orderDetails.totalPrice, oldValue: existingOrder.totalPrice },
              { key: 'orderDate', newValue: orderDetails.orderDate, oldValue: existingOrder.orderDate },
              { key: 'shippingMethod', newValue: orderDetails.shippingMethod, oldValue: existingOrder.shippingMethod },
              { key: 'paymentMethod', newValue: orderDetails.paymentMethod, oldValue: existingOrder.paymentMethod },
              { key: 'cityName', newValue: orderDetails.cityName, oldValue: existingOrder.cityName },
              { key: 'pricinaZnizki', newValue: orderDetails.pricinaZnizki, oldValue: existingOrder.pricinaZnizki },
              { key: 'sajt', newValue: orderDetails.sajt, oldValue: existingOrder.sajt },
              { key: 'ttn', newValue: orderDetails.ttn, oldValue: existingOrder.ttn },
              { key: 'quantity', newValue: orderDetails.quantity, oldValue: existingOrder.quantity }
            ];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ (–º–∞—Å—Å–∏–≤)
            const itemsChanged = JSON.stringify(orderDetails.items) !== JSON.stringify(existingOrder.items);
            if (itemsChanged) {
              changes.items = orderDetails.items;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è –ø–æ–ª—è
            fieldsToCheck.forEach(({ key, newValue, oldValue }) => {
              if (newValue !== oldValue) {
                changes[key] = newValue;
              }
            });

            const updateData = changes;

            console.log(`üìä Update data (${Object.keys(updateData).length} fields changed):`, {
              changedFields: Object.keys(updateData).map(
                key => ({
                  field: key,
                  from: existingOrder[key],
                  to: updateData[key]
                })
              ),
              oldStatus: existingOrder.status,
              newStatus: updateData.status || 'no change',
              hasItems: !!updateData.items,
              hasRawData: !!updateData.rawData
            });


            // –ü—Ä–æ–≤–µ—Ä—è–µ–º items –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π
            if (updateData.items) {
              try {
                const testSerialize = JSON.stringify(updateData.items);
                console.log(`‚úÖ Items serialization test passed, length: ${testSerialize.length}`);

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ items –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ
                if (Array.isArray(updateData.items) && updateData.items.length === 0) {
                  console.log(`‚ÑπÔ∏è Items array is empty, not updating items in database`);
                  updateData.items = undefined; // –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
                }
              } catch (serializeError) {
                console.error(`‚ùå Items serialization failed:`, serializeError);
                console.log(`   Items type: ${typeof updateData.items}`);
                console.log(`   Items isArray: ${Array.isArray(updateData.items)}`);
                // –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º items –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è
                updateData.items = null;
              }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Ç–æ–≤–∞—Ä—ã (—Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ items –≤ updateData)
            const webhookHasNewItems = !!updateData.items;

            console.log(`üì¶ Webhook items check: itemsChanged=${itemsChanged}, hasNewItems=${!!updateData.items}, willUpdateCache=${webhookHasNewItems}`);

            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if (Object.keys(updateData).length === 0) {
              console.log(`‚ÑπÔ∏è No changes detected for order ${existingOrder.externalId}, skipping update`);
              return res.json({
                success: true,
                message: `No changes for order ${orderIdentifier}`,
                timestamp: new Date().toISOString()
              });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
            await orderDatabaseService.updateOrder(existingOrder.externalId, updateData);

            console.log(`‚úÖ Order ${orderDetails.orderNumber} updated via webhook`);

            // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
            if (updateData.status) {
              console.log(`   Status changed: ${existingOrder.status} -> ${updateData.status}`);
              console.log(`üéâ Status successfully updated to: ${updateData.status}`);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ webhook –ø—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
            if (webhookHasNewItems) {
              try {
                await orderDatabaseService.updateOrderCache(existingOrder.externalId);
                console.log(`‚úÖ Cache updated for order ${existingOrder.externalId} (items changed)`);
              } catch (cacheError) {
                console.warn(`‚ö†Ô∏è Failed to update cache for order ${existingOrder.externalId}:`, cacheError);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
              }
            } else {
              console.log(`‚ÑπÔ∏è Cache not updated for order ${existingOrder.externalId} (no items change)`);
            }
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ webhook
            console.log(`üÜï Creating new order ${orderDetails.orderNumber}`);

            // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ webhook
            const newOrderStatus = statusMapping[webhookData.statusId] || '1'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é '1' (–ù–æ–≤–∏–π)
            const newOrderStatusText = getStatusText(newOrderStatus);

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
            const requiredFields = {
              id: orderDetails.id,
              externalId: orderDetails.orderNumber,
              orderNumber: orderDetails.orderNumber
            };

            if (!requiredFields.id) {
              console.error(`‚ùå Missing required field: id`);
              return res.status(400).json({
                success: false,
                error: 'Missing required field: id'
              });
            }

            if (!requiredFields.externalId) {
              console.error(`‚ùå Missing required field: externalId`);
              return res.status(400).json({
                success: false,
                error: 'Missing required field: externalId'
              });
            }

            if (!requiredFields.orderNumber) {
              console.error(`‚ùå Missing required field: orderNumber`);
              return res.status(400).json({
                success: false,
                error: 'Missing required field: orderNumber'
              });
            }

            const createData = {
              id: typeof orderDetails.id === 'string' ? parseInt(orderDetails.id) : orderDetails.id,
              externalId: orderDetails.orderNumber,
              orderNumber: orderDetails.orderNumber,
              ttn: orderDetails.ttn,
              quantity: orderDetails.quantity,
              status: newOrderStatus,
              statusText: newOrderStatusText,
              items: orderDetails.items,
              rawData: webhookData,
              customerName: orderDetails.customerName,
              customerPhone: orderDetails.customerPhone,
              deliveryAddress: orderDetails.deliveryAddress,
              totalPrice: orderDetails.totalPrice,
              orderDate: orderDetails.orderDate,
              shippingMethod: orderDetails.shippingMethod,
              paymentMethod: orderDetails.paymentMethod,
              cityName: orderDetails.cityName,
              provider: orderDetails.provider,
              pricinaZnizki: orderDetails.pricinaZnizki,
              sajt: orderDetails.sajt
            };

            console.log(`üìã Create data:`, {
              id: createData.id,
              externalId: createData.externalId,
              status: createData.status,
              statusText: createData.statusText,
              customerName: createData.customerName,
              totalPrice: createData.totalPrice,
              hasItems: !!createData.items
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
            try {
              const testItems = createData.items ? JSON.stringify(createData.items) : null;

              console.log(`‚úÖ Data serialization test passed: items=${testItems?.length || 0} chars`);
            } catch (serializeError) {
              console.error(`‚ùå Data serialization failed:`, serializeError);
              console.log(`   Items type: ${typeof createData.items}`);
              // –ù–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è
              return res.status(500).json({
                success: false,
                error: 'Data serialization failed',
                details: serializeError.message
              });
            }

            try {
              const createdOrder = await orderDatabaseService.createOrder(createData);
              console.log(`‚úÖ Order ${createData.externalId} created via webhook`);

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–µ—à –±—ã–ª —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
              try {
                const cacheExists = await ordersCacheService.hasOrderCache(createData.externalId);
                if (cacheExists) {
                  console.log(`‚úÖ Cache automatically created for new order ${createData.externalId}`);
                } else {
                  console.warn(`‚ö†Ô∏è Cache not found for new order ${createData.externalId}, attempting manual creation...`);
                  // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–µ—à –≤—Ä—É—á–Ω—É—é
                  await orderDatabaseService.updateOrderCache(createData.externalId);
                  console.log(`‚úÖ Cache manually created for new order ${createData.externalId}`);
                }
              } catch (cacheCheckError) {
                console.warn(`‚ö†Ô∏è Failed to check/create cache for new order ${createData.externalId}:`, cacheCheckError);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
              }

            } catch (createError) {
              console.error(`‚ùå Failed to create order:`, createError);
              console.error(`   Create error details:`, {
                message: createError.message,
                code: createError.code,
                meta: createError.meta
              });
              return res.status(500).json({
                success: false,
                error: 'Failed to create order',
                details: createError.message
              });
            }
          }
        } else {
          console.warn(`‚ö†Ô∏è Order ${orderIdentifier} not found in SalesDrive`);
        }
      } catch (error) {
        console.error(`‚ùå Error processing webhook for order ${orderIdentifier}:`, error);
        console.error(`   Error details:`, {
          message: error.message,
          stack: error.stack,
          name: error.name
        });
        return res.status(500).json({
          success: false,
          error: 'Failed to process order update',
          details: error.message
        });
      }
    } else {
      console.log(`‚ö†Ô∏è Unsupported webhook event: ${req.body.info?.webhookEvent}`);
    }
    
    res.json({
      success: true,
      message: `Webhook processed: ${req.body.info?.webhookEvent} for order ${orderIdentifier}`,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Webhook processing error:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Internal server error' 
    });
  }
});

/**
 * POST /api/webhooks/salesdrive/test
 * –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook
 */
router.post('/salesdrive/test', (req, res) => {
  console.log('üß™ Test webhook received:', JSON.stringify(req.body, null, 2));
  res.json({
    success: true,
    message: 'Test webhook received',
    received: req.body,
    timestamp: new Date().toISOString()
  });
});

/**
 * GET /api/webhooks/salesdrive/health
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ webhook endpoint
 */
router.get('/salesdrive/health', (req, res) => {
  res.json({
    success: true,
    message: 'SalesDrive webhook endpoint is healthy',
    timestamp: new Date().toISOString()
  });
});

export default router;
