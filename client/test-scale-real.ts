import ScaleService from './services/ScaleService';

/**
 * –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–≥ –í–¢–ê-60 —á–µ—Ä–µ–∑ ScaleService
 * –í–ê–ñ–ù–û: –î–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω—É–∂–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –≤–∞–≥–∏ –í–¢–ê-60, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ COM –ø–æ—Ä—Ç—É
 */

class ScaleRealTest {
  private scaleService: ScaleService;
  private testResults: { [key: string]: boolean } = {};

  constructor() {
    this.scaleService = new ScaleService();
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ—Å–∞–º
  async testScaleConnection(): Promise<boolean> {
    console.log('üß™ === –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –í–ï–°–ê–ú –í–¢–ê-60 ===\n');

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Serial API
      console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Serial API...');
      if (!('serial' in navigator)) {
        console.error('‚ùå Web Serial API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
        this.testResults['webSerialSupport'] = false;
        return false;
      }
      console.log('‚úÖ Web Serial API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      this.testResults['webSerialSupport'] = true;

      // 2. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ—Å–∞–º
      console.log('\n2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ—Å–∞–º...');
      const connected = await this.scaleService.connect();
      
      if (!connected) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–µ—Å–∞–º');
        this.testResults['connection'] = false;
        return false;
      }
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –≤–µ—Å–∞–º');
      this.testResults['connection'] = true;

      // 3. –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...');
      await this.testWeightReading();

      // 4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≤–∞–≥–∏
      console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≤–∞–≥–∏...');
      await this.testCurrentWeight();

      // 5. –¢–µ—Å—Ç —Å callback'–æ–º
      console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–≥–∏...');
      await this.testWeightCallback();

      // 6. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≤–∞–≥
      console.log('\n6Ô∏è‚É£ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≤–∞–≥...');
      await this.scaleService.disconnect();
      console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç –≤–∞–≥');
      this.testResults['disconnection'] = true;

      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
      return false;
    }
  }

  // –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–≥
  private async testWeightReading(): Promise<void> {
    return new Promise((resolve) => {
      let dataReceived = false;
      const timeout = setTimeout(() => {
        if (!dataReceived) {
          console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å –≤–∞–≥ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥');
          this.testResults['dataReading'] = false;
        }
        resolve();
      }, 10000);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      this.scaleService.onWeightData((weightData) => {
        dataReceived = true;
        clearTimeout(timeout);
        
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å –≤–∞–≥:');
        console.log(`   –í–∞–≥–∞: ${weightData.weight} ${weightData.unit}`);
        console.log(`   –°—Ç–∞–±—ñ–ª—å–Ω–æ: ${weightData.isStable ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`   –í—Ä–µ–º—è: ${weightData.timestamp.toLocaleTimeString()}`);
        
        this.testResults['dataReading'] = true;
        resolve();
      });

      console.log('   –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–≥... (–ø–æ–ª–æ–∂–∏—Ç–µ —á—Ç–æ-—Ç–æ –Ω–∞ –≤–∞–≥–∏)');
    });
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≤–∞–≥–∏
  private async testCurrentWeight(): Promise<void> {
    try {
      console.log('   –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –≤–∞–≥–∏...');
      const weightData = await this.scaleService.getCurrentWeight();
      
      if (weightData) {
        console.log('‚úÖ –¢–µ–∫—É—â–∞—è –≤–∞–≥–∞ –ø–æ–ª—É—á–µ–Ω–∞:');
        console.log(`   –í–∞–≥–∞: ${weightData.weight} ${weightData.unit}`);
        console.log(`   –°—Ç–∞–±—ñ–ª—å–Ω–æ: ${weightData.isStable ? '–î–∞' : '–ù–µ—Ç'}`);
        this.testResults['currentWeight'] = true;
      } else {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–∞–≥—É');
        this.testResults['currentWeight'] = false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≤–∞–≥–∏:', error);
      this.testResults['currentWeight'] = false;
    }
  }

  // –¢–µ—Å—Ç callback'–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–≥–∏
  private async testWeightCallback(): Promise<void> {
    return new Promise((resolve) => {
      let changesDetected = 0;
      let lastWeight = 0;
      
      const timeout = setTimeout(() => {
        if (changesDetected > 0) {
          console.log(`‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${changesDetected} –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∞–≥–∏`);
          this.testResults['weightCallback'] = true;
        } else {
          console.log('‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–≥–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
          this.testResults['weightCallback'] = false;
        }
        resolve();
      }, 15000);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      this.scaleService.onWeightData((weightData) => {
        const currentWeight = weightData.weight;
        
        if (Math.abs(currentWeight - lastWeight) > 0.01) { // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 10–≥
          changesDetected++;
          console.log(`   –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞–≥–∏ #${changesDetected}: ${lastWeight} ‚Üí ${currentWeight} –∫–≥`);
          lastWeight = currentWeight;
        }
      });

      console.log('   –ò–∑–º–µ–Ω–∏—Ç–µ –≤–∞–≥—É –Ω–∞ –≤–µ—Å–∞—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑...');
      console.log('   (–¥–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ —Å –≤–∞–≥)');
    });
  }

  // –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async testDifferentConfigurations(): Promise<void> {
    console.log('\nüß™ === –¢–ï–°–¢ –†–ê–ó–õ–ò–ß–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô ===\n');

    const configurations = [
      { comPort: 'COM1', baudRate: 9600, dataBits: 8, stopBits: 1, parity: 'none' as const },
      { comPort: 'COM1', baudRate: 19200, dataBits: 8, stopBits: 1, parity: 'none' as const },
      { comPort: 'COM1', baudRate: 9600, dataBits: 7, stopBits: 1, parity: 'even' as const }
    ];

    for (let i = 0; i < configurations.length; i++) {
      const config = configurations[i];
      console.log(`${i + 1}Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${JSON.stringify(config)}`);
      
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        this.scaleService.updateConfig(config);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        const connected = await this.scaleService.connect();
        
        if (connected) {
          console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
          
          // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö
          await this.waitForData(3000);
          
          // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
          await this.scaleService.disconnect();
        } else {
          console.log('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
        }
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: ${error.message}`);
      }
      
      console.log('');
    }
  }

  // –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async testConnectionStability(): Promise<void> {
    console.log('\nüß™ === –¢–ï–°–¢ –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===\n');

    try {
      console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ—Å–∞–º...');
      const connected = await this.scaleService.connect();
      
      if (!connected) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –¥–ª—è —Ç–µ—Å—Ç–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏');
        return;
      }

      let dataCount = 0;
      let errorCount = 0;
      const startTime = Date.now();
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
      const testDuration = 30000;
      
      this.scaleService.onWeightData((weightData) => {
        dataCount++;
        if (dataCount % 10 === 0) {
          console.log(`   –ü–æ–ª—É—á–µ–Ω–æ ${dataCount} –ø–∞–∫–µ—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö...`);
        }
      });

      console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ ${testDuration / 1000} —Å–µ–∫—É–Ω–¥...`);
      
      await new Promise(resolve => setTimeout(resolve, testDuration));
      
      const endTime = Date.now();
      const actualDuration = endTime - startTime;
      const dataRate = (dataCount / (actualDuration / 1000)).toFixed(2);
      
      console.log(`‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:`);
      console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${actualDuration / 1000} —Å–µ–∫—É–Ω–¥`);
      console.log(`   –ü–æ–ª—É—á–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: ${dataCount}`);
      console.log(`   –û—à–∏–±–æ–∫: ${errorCount}`);
      console.log(`   –ß–∞—Å—Ç–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ${dataRate} –ø–∞–∫–µ—Ç–æ–≤/—Å–µ–∫`);
      
      await this.scaleService.disconnect();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏:', error);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  private async waitForData(timeout: number): Promise<boolean> {
    return new Promise((resolve) => {
      let dataReceived = false;
      
      const timer = setTimeout(() => {
        resolve(dataReceived);
      }, timeout);
      
      this.scaleService.onWeightData(() => {
        if (!dataReceived) {
          dataReceived = true;
          clearTimeout(timer);
          resolve(true);
        }
      });
    });
  }

  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  printResults(): void {
    console.log('\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===\n');
    
    const tests = [
      { key: 'webSerialSupport', name: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Web Serial API' },
      { key: 'connection', name: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ—Å–∞–º' },
      { key: 'dataReading', name: '–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö' },
      { key: 'currentWeight', name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–∞–≥–∏' },
      { key: 'weightCallback', name: 'Callback –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∞–≥–∏' },
      { key: 'disconnection', name: '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≤–∞–≥' }
    ];
    
    let passedTests = 0;
    
    tests.forEach(test => {
      const result = this.testResults[test.key];
      const status = result ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${test.name}: ${result ? 'PASSED' : 'FAILED'}`);
      if (result) passedTests++;
    });
    
    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${tests.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (passedTests === tests.length) {
      console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –í–∞–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    } else {
      console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
async function runScaleRealTests() {
  const tester = new ScaleRealTest();
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤–∞–≥ –í–¢–ê-60...\n');
  console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞–≥–∏ –í–¢–ê-60 –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏ –≤–∫–ª—é—á–µ–Ω—ã!\n');
  
  try {
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    await tester.testScaleConnection();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã (–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é)
    // await tester.testDifferentConfigurations();
    // await tester.testConnectionStability();
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    tester.printResults();
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
  (window as any).runScaleRealTests = runScaleRealTests;
  console.log('üîß –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ runScaleRealTests() –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤.');
}

export { ScaleRealTest, runScaleRealTests };
